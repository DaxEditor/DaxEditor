// This code was generated by the Managed Package Parser Generator


using System;
using System.Collections.Generic;
using System.Text;
using Babel.ParserGenerator;
using Microsoft.VisualStudio.TextManager.Interop;

namespace Babel.Parser
{
public enum Tokens {error=126,EOF=127,FUNCTION=128,
    NUMBER=129,STRING=130,COLUMNNAME=131,TABLENAME=132,ESCAPEDTABLENAME=133,PARTIALCOLUMNNAME=134,PARTIALTABLENAME=135,MDXCODE=136,
    KWALTER=137,KPI=138,KWEVALUATE=139,KWDEFINE=140,KWMEASURE=141,KWORDER=142,KWBY=143,KWTRUE=144,
    KWFALSE=145,KWASC=146,KWDESC=147,KWDAY=148,KWMONTH=149,KWYEAR=150,KWCREATE=151,KWCALCULATE=152,
    KWCALCULATION=153,KWPROPERTY=154,KWGENERAL=155,KWNUMBERDECIMAL=156,KWNUMBERWHOLE=157,KWPERCENTAGE=158,KWSCIENTIFIC=159,KWCURRENCY=160,
    KWDATETIMECUSTOM=161,KWDATETIMESHORTDATEPATTERN=162,KWDATETIMEGENERAL=163,KWTEXT=164,KWACCURACY=165,KWTHOUSANDSEPARATOR=166,KWFORMAT=167,KWADDITIONALINFO=168,
    KWKPI=169,KWVISIBLE=170,KWDESCRIPTION=171,KWDISPLAYFOLDER=172,KWVAR=173,KWRETURN=174,KWDATATABLE=175,KWBOOLEAN=176,
    KWDATETIME=177,KWDOUBLE=178,KWINTEGER=179,KWSTRING=180,KWRANKX=181,KWSKIP=182,KWDENSE=183,KWNOT=184,
    KWKPIDESCRIPTION=185,KWKPITARGETFORMATSTRING=186,KWKPITARGETDESCRIPTION=187,KWKPITARGETEXPRESSION=188,KWKPISTATUSGRAPHIC=189,KWKPISTATUSDESCRIPTION=190,KWKPISTATUSEXPRESSION=191,KWKPITRENDGRAPHIC=192,
    KWKPITRENDDESCRIPTION=193,KWKPITRENDEXPRESSION=194,KWKPIANNOTATIONS=195,EQ=196,NEQ=197,GT=198,GTE=199,LT=200,
    LTE=201,POW=202,AMPAMP=203,BARBAR=204,LEFTSQUAREBRACKET=205,RIGHTSQUAREBRACKET=206,maxParseToken=207,LEX_WHITE=208,
    LEX_COMMENT=209,LEX_ERROR=210};

public partial struct LexValue
{
    public string str;
}
// Abstract base class for MPLEX scanners
public abstract class ScanBase : AScanner<LexValue,LexLocation> {
    protected abstract int CurrentSc { get; set; }
    //
    // Override the virtual EolState property if the scanner state is more
    // complicated then a simple copy of the current start state ordinal
    //
    public virtual int EolState { get { return CurrentSc; } set { CurrentSc = value; } }
}

public partial class Parser: ShiftReduceParser<LexValue, LexLocation>
{

    ErrorHandler handler = null;
    public void SetHandler(ErrorHandler hdlr) { handler = hdlr; }
    internal void CallHdlr(string msg, LexLocation val)
    {
        handler.AddError(msg, val.sLin, val.sCol, val.eCol - val.sCol);
    }

    internal TextSpan MkTSpan(LexLocation s)
    {
        TextSpan ts;
        ts.iStartLine = s.sLin;
        ts.iStartIndex = s.sCol;
        ts.iEndLine = s.eLin;
        ts.iEndIndex = s.eCol;
        return ts;
    }

    internal void Match(LexLocation lh, LexLocation rh)
    {
        DefineMatch(MkTSpan(lh), MkTSpan(rh));
    }

    internal void StartFunction(LexLocation s, string token)
    {
        System.Diagnostics.Debug.WriteLine("StartName:" + token);
        Sink.StartName(MkTSpan(s), token); 
    }

    internal void StartParameters(LexLocation s)
    {
        System.Diagnostics.Debug.WriteLine("StartParameters");
        Sink.StartParameters(MkTSpan(s)); 
    }

    internal void EndParameters(LexLocation s)
    {
        System.Diagnostics.Debug.WriteLine("EndParameters");
        Sink.EndParameters(MkTSpan(s));
    }

    internal void NextParameter(LexLocation s)
    {
        System.Diagnostics.Debug.WriteLine("Next Parameter");
        Sink.NextParameter(MkTSpan(s));
    }
  protected override void Initialize()
  {
    this.errToken = (int)Tokens.error;
    this.eofToken = (int)Tokens.EOF;

    states=new State[357];
    AddState(0,new State(new int[]{140,5,139,177,196,181,151,187,152,350,137,354,127,356},new int[]{-1,1,-3,3,-10,180,-5,183,-12,184,-13,341,-14,344,-15,347,-16,351,-6,355}));
    AddState(1,new State(new int[]{127,2}));
    AddState(2,new State(-1));
    AddState(3,new State(new int[]{140,5,139,177,127,-2},new int[]{-10,4}));
    AddState(4,new State(-14));
    AddState(5,new State(new int[]{141,168},new int[]{-11,6}));
    AddState(6,new State(new int[]{139,7}));
    AddState(7,new State(new int[]{132,29,133,30,128,31,175,34,131,28,152,74,144,75,145,76,150,77,148,78,149,79,167,80,184,81,181,95,40,52,129,121,130,122,33,126,45,127,43,128,173,135},new int[]{-4,8,-57,25,-53,26,-56,32,-65,33,-59,59,-55,50,-54,60,-71,61,-78,62,-70,118,-69,94,-72,119,-73,120,-74,123,-76,124,-75,129,-44,130,-43,131,-42,134}));
    AddState(8,new State(new int[]{142,157,43,12,45,13,42,14,47,15,203,16,204,17,38,18,198,19,199,20,200,21,201,22,196,23,197,24,140,-16,139,-16,127,-16},new int[]{-9,9,-77,10}));
    AddState(9,new State(-15));
    AddState(10,new State(new int[]{132,29,133,30,128,31,175,34,131,28,152,74,144,75,145,76,150,77,148,78,149,79,167,80,184,81,181,95,40,52,129,121,130,122,33,126,45,127,43,128,173,135},new int[]{-4,11,-57,25,-53,26,-56,32,-65,33,-59,59,-55,50,-54,60,-71,61,-78,62,-70,118,-69,94,-72,119,-73,120,-74,123,-76,124,-75,129,-44,130,-43,131,-42,134}));
    AddState(11,new State(new int[]{43,12,45,13,42,14,47,15,203,16,204,17,38,18,198,19,199,20,200,21,201,22,196,23,197,24,142,-217,140,-217,139,-217,127,-217,125,-217,44,-217,41,-217,126,-217,174,-217,173,-217,146,-217,147,-217,141,-217,153,-217,59,-217,170,-217,165,-217,166,-217,167,-217,168,-217,171,-217,172,-217,185,-217,186,-217,187,-217,188,-217,189,-217,190,-217,191,-217,192,-217,193,-217,194,-217,195,-217},new int[]{-77,10}));
    AddState(12,new State(-218));
    AddState(13,new State(-219));
    AddState(14,new State(-220));
    AddState(15,new State(-221));
    AddState(16,new State(-222));
    AddState(17,new State(-223));
    AddState(18,new State(-224));
    AddState(19,new State(-225));
    AddState(20,new State(-226));
    AddState(21,new State(-227));
    AddState(22,new State(-228));
    AddState(23,new State(-229));
    AddState(24,new State(-230));
    AddState(25,new State(-210));
    AddState(26,new State(new int[]{131,28,142,-161,43,-161,45,-161,42,-161,47,-161,203,-161,204,-161,38,-161,198,-161,199,-161,200,-161,201,-161,196,-161,197,-161,140,-161,139,-161,127,-161,125,-161,44,-161,41,-161,126,-161,174,-161,173,-161,146,-161,147,-161,141,-161,153,-161,59,-161,170,-161,165,-161,166,-161,167,-161,168,-161,171,-161,172,-161,185,-161,186,-161,187,-161,188,-161,189,-161,190,-161,191,-161,192,-161,193,-161,194,-161,195,-161},new int[]{-54,27}));
    AddState(27,new State(-154));
    AddState(28,new State(-156));
    AddState(29,new State(-157));
    AddState(30,new State(-158));
    AddState(31,new State(new int[]{131,-159,142,-159,43,-159,45,-159,42,-159,47,-159,203,-159,204,-159,38,-159,198,-159,199,-159,200,-159,201,-159,196,-159,197,-159,140,-159,139,-159,127,-159,125,-159,44,-159,41,-159,126,-159,174,-159,173,-159,146,-159,147,-159,141,-159,153,-159,59,-159,170,-159,165,-159,166,-159,167,-159,168,-159,171,-159,172,-159,185,-159,186,-159,187,-159,188,-159,189,-159,190,-159,191,-159,192,-159,193,-159,194,-159,195,-159,40,-239}));
    AddState(32,new State(-160));
    AddState(33,new State(-178));
    AddState(34,new State(new int[]{40,35}));
    AddState(35,new State(new int[]{130,147},new int[]{-64,36,-63,156}));
    AddState(36,new State(new int[]{44,37}));
    AddState(37,new State(new int[]{123,38,130,147},new int[]{-63,146}));
    AddState(38,new State(new int[]{123,42},new int[]{-61,39}));
    AddState(39,new State(new int[]{125,40}));
    AddState(40,new State(new int[]{41,41}));
    AddState(41,new State(-177));
    AddState(42,new State(new int[]{132,29,133,30,128,31,175,34,131,28,152,74,144,75,145,76,150,77,148,78,149,79,167,80,184,81,181,95,40,52,129,121,130,122,33,126,45,127,43,128,173,135,125,-162,44,-162},new int[]{-60,43,-58,145,-59,49,-55,50,-53,26,-56,32,-65,33,-54,60,-71,61,-78,62,-70,118,-69,94,-72,119,-73,120,-74,123,-76,124,-75,129,-4,144,-57,25,-44,130,-43,131,-42,134}));
    AddState(43,new State(new int[]{125,44,44,47}));
    AddState(44,new State(new int[]{44,45,125,-166}));
    AddState(45,new State(new int[]{123,42},new int[]{-61,46}));
    AddState(46,new State(-167));
    AddState(47,new State(new int[]{132,29,133,30,128,31,175,34,131,28,152,74,144,75,145,76,150,77,148,78,149,79,167,80,184,81,181,95,40,52,129,121,130,122,33,126,45,127,43,128,173,135,125,-162,44,-162},new int[]{-58,48,-59,49,-55,50,-53,26,-56,32,-65,33,-54,60,-71,61,-78,62,-70,118,-69,94,-72,119,-73,120,-74,123,-76,124,-75,129,-4,144,-57,25,-44,130,-43,131,-42,134}));
    AddState(48,new State(-165));
    AddState(49,new State(new int[]{125,-163,44,-163,43,-211,45,-211,42,-211,47,-211,203,-211,204,-211,38,-211,198,-211,199,-211,200,-211,201,-211,196,-211,197,-211}));
    AddState(50,new State(new int[]{40,52,142,-197,43,-197,45,-197,42,-197,47,-197,203,-197,204,-197,38,-197,198,-197,199,-197,200,-197,201,-197,196,-197,197,-197,140,-197,139,-197,127,-197,125,-197,44,-197,41,-197,126,-197,174,-197,173,-197,146,-197,147,-197,141,-197,153,-197,59,-197,170,-197,165,-197,166,-197,167,-197,168,-197,171,-197,172,-197,185,-197,186,-197,187,-197,188,-197,189,-197,190,-197,191,-197,192,-197,193,-197,194,-197,195,-197},new int[]{-72,51}));
    AddState(51,new State(-231));
    AddState(52,new State(new int[]{41,53,132,29,133,30,128,31,175,34,131,28,152,74,144,75,145,76,150,77,148,78,149,79,167,80,184,81,181,95,40,52,129,121,130,122,33,126,45,127,43,128,173,135},new int[]{-48,54,-4,73,-57,25,-53,26,-56,32,-65,33,-59,59,-55,50,-54,60,-71,61,-78,62,-70,118,-69,94,-72,119,-73,120,-74,123,-76,124,-75,129,-44,130,-43,131,-42,134}));
    AddState(53,new State(-232));
    AddState(54,new State(new int[]{41,55,126,56,44,70},new int[]{-49,57}));
    AddState(55,new State(-233));
    AddState(56,new State(-234));
    AddState(57,new State(new int[]{132,29,133,30,128,31,175,34,131,28,152,74,144,75,145,76,150,77,148,78,149,79,167,80,184,81,181,95,40,52,129,121,130,122,33,126,45,127,43,128,173,135},new int[]{-4,58,-57,25,-53,26,-56,32,-65,33,-59,59,-55,50,-54,60,-71,61,-78,62,-70,118,-69,94,-72,119,-73,120,-74,123,-76,124,-75,129,-44,130,-43,131,-42,134}));
    AddState(58,new State(new int[]{43,12,45,13,42,14,47,15,203,16,204,17,38,18,198,19,199,20,200,21,201,22,196,23,197,24,41,-145,126,-145,44,-145},new int[]{-77,10}));
    AddState(59,new State(-211));
    AddState(60,new State(-155));
    AddState(61,new State(-198));
    AddState(62,new State(new int[]{40,84},new int[]{-79,63,-51,64,-50,85}));
    AddState(63,new State(-235));
    AddState(64,new State(new int[]{126,71,41,69,132,29,133,30,128,31,175,34,131,28,152,74,144,75,145,76,150,77,148,78,149,79,167,80,184,81,181,95,40,52,129,121,130,122,33,126,45,127,43,128,173,135,142,-248,42,-248,47,-248,203,-248,204,-248,38,-248,198,-248,199,-248,200,-248,201,-248,196,-248,197,-248,140,-248,139,-248,127,-248,125,-248,44,-248,174,-248,146,-248,147,-248,141,-248,153,-248,59,-248,170,-248,165,-248,166,-248,168,-248,171,-248,172,-248,185,-248,186,-248,187,-248,188,-248,189,-248,190,-248,191,-248,192,-248,193,-248,194,-248,195,-248},new int[]{-52,65,-48,66,-4,73,-57,25,-53,26,-56,32,-65,33,-59,59,-55,50,-54,60,-71,61,-78,62,-70,118,-69,94,-72,119,-73,120,-74,123,-76,124,-75,129,-44,130,-43,131,-42,134}));
    AddState(65,new State(-148));
    AddState(66,new State(new int[]{126,68,41,69,44,70},new int[]{-52,67,-49,57}));
    AddState(67,new State(-149));
    AddState(68,new State(-150));
    AddState(69,new State(-251));
    AddState(70,new State(-147));
    AddState(71,new State(new int[]{41,69},new int[]{-52,72}));
    AddState(72,new State(-151));
    AddState(73,new State(new int[]{43,12,45,13,42,14,47,15,203,16,204,17,38,18,198,19,199,20,200,21,201,22,196,23,197,24,41,-146,126,-146,44,-146},new int[]{-77,10}));
    AddState(74,new State(-240));
    AddState(75,new State(new int[]{40,-241,142,-205,43,-205,45,-205,42,-205,47,-205,203,-205,204,-205,38,-205,198,-205,199,-205,200,-205,201,-205,196,-205,197,-205,140,-205,139,-205,127,-205,125,-205,44,-205,41,-205,126,-205,174,-205,173,-205,146,-205,147,-205,141,-205,153,-205,59,-205,170,-205,165,-205,166,-205,167,-205,168,-205,171,-205,172,-205,185,-205,186,-205,187,-205,188,-205,189,-205,190,-205,191,-205,192,-205,193,-205,194,-205,195,-205}));
    AddState(76,new State(new int[]{40,-242,142,-206,43,-206,45,-206,42,-206,47,-206,203,-206,204,-206,38,-206,198,-206,199,-206,200,-206,201,-206,196,-206,197,-206,140,-206,139,-206,127,-206,125,-206,44,-206,41,-206,126,-206,174,-206,173,-206,146,-206,147,-206,141,-206,153,-206,59,-206,170,-206,165,-206,166,-206,167,-206,168,-206,171,-206,172,-206,185,-206,186,-206,187,-206,188,-206,189,-206,190,-206,191,-206,192,-206,193,-206,194,-206,195,-206}));
    AddState(77,new State(new int[]{40,-243,142,-209,43,-209,45,-209,42,-209,47,-209,203,-209,204,-209,38,-209,198,-209,199,-209,200,-209,201,-209,196,-209,197,-209,140,-209,139,-209,127,-209,125,-209,44,-209,41,-209,126,-209,174,-209,173,-209,146,-209,147,-209,141,-209,153,-209,59,-209,170,-209,165,-209,166,-209,167,-209,168,-209,171,-209,172,-209,185,-209,186,-209,187,-209,188,-209,189,-209,190,-209,191,-209,192,-209,193,-209,194,-209,195,-209}));
    AddState(78,new State(new int[]{40,-244,142,-207,43,-207,45,-207,42,-207,47,-207,203,-207,204,-207,38,-207,198,-207,199,-207,200,-207,201,-207,196,-207,197,-207,140,-207,139,-207,127,-207,125,-207,44,-207,41,-207,126,-207,174,-207,173,-207,146,-207,147,-207,141,-207,153,-207,59,-207,170,-207,165,-207,166,-207,167,-207,168,-207,171,-207,172,-207,185,-207,186,-207,187,-207,188,-207,189,-207,190,-207,191,-207,192,-207,193,-207,194,-207,195,-207}));
    AddState(79,new State(new int[]{40,-245,142,-208,43,-208,45,-208,42,-208,47,-208,203,-208,204,-208,38,-208,198,-208,199,-208,200,-208,201,-208,196,-208,197,-208,140,-208,139,-208,127,-208,125,-208,44,-208,41,-208,126,-208,174,-208,173,-208,146,-208,147,-208,141,-208,153,-208,59,-208,170,-208,165,-208,166,-208,167,-208,168,-208,171,-208,172,-208,185,-208,186,-208,187,-208,188,-208,189,-208,190,-208,191,-208,192,-208,193,-208,194,-208,195,-208}));
    AddState(80,new State(-246));
    AddState(81,new State(new int[]{128,87,152,74,144,88,145,89,150,90,148,91,149,92,167,80,184,93,181,95,40,-247},new int[]{-78,82,-70,86,-69,94}));
    AddState(82,new State(new int[]{40,84},new int[]{-79,83,-51,64,-50,85}));
    AddState(83,new State(-237));
    AddState(84,new State(-250));
    AddState(85,new State(-249));
    AddState(86,new State(-238));
    AddState(87,new State(-239));
    AddState(88,new State(-241));
    AddState(89,new State(-242));
    AddState(90,new State(-243));
    AddState(91,new State(-244));
    AddState(92,new State(-245));
    AddState(93,new State(-247));
    AddState(94,new State(-194));
    AddState(95,new State(new int[]{40,96}));
    AddState(96,new State(new int[]{132,29,133,30,128,31,175,34,131,28,152,74,144,75,145,76,150,77,148,78,149,79,167,80,184,81,181,95,40,52,129,121,130,122,33,126,45,127,43,128,173,135},new int[]{-4,97,-57,25,-53,26,-56,32,-65,33,-59,59,-55,50,-54,60,-71,61,-78,62,-70,118,-69,94,-72,119,-73,120,-74,123,-76,124,-75,129,-44,130,-43,131,-42,134}));
    AddState(97,new State(new int[]{44,98,43,12,45,13,42,14,47,15,203,16,204,17,38,18,198,19,199,20,200,21,201,22,196,23,197,24},new int[]{-77,10}));
    AddState(98,new State(new int[]{132,29,133,30,128,31,175,34,131,28,152,74,144,75,145,76,150,77,148,78,149,79,167,80,184,81,181,95,40,52,129,121,130,122,33,126,45,127,43,128,173,135},new int[]{-4,99,-57,25,-53,26,-56,32,-65,33,-59,59,-55,50,-54,60,-71,61,-78,62,-70,118,-69,94,-72,119,-73,120,-74,123,-76,124,-75,129,-44,130,-43,131,-42,134}));
    AddState(99,new State(new int[]{41,100,44,101,43,12,45,13,42,14,47,15,203,16,204,17,38,18,198,19,199,20,200,21,201,22,196,23,197,24},new int[]{-77,10}));
    AddState(100,new State(-190));
    AddState(101,new State(new int[]{132,29,133,30,128,31,175,34,131,28,152,74,144,75,145,76,150,77,148,78,149,79,167,80,184,81,181,95,40,52,129,121,130,122,33,126,45,127,43,128,173,135,41,-188,44,-188},new int[]{-68,102,-59,117,-55,50,-53,26,-56,32,-65,33,-54,60,-71,61,-78,62,-70,118,-69,94,-72,119,-73,120,-74,123,-76,124,-75,129,-4,144,-57,25,-44,130,-43,131,-42,134}));
    AddState(102,new State(new int[]{41,103,44,104}));
    AddState(103,new State(-191));
    AddState(104,new State(new int[]{129,112,144,113,145,114,146,115,147,116,41,-182,44,-182},new int[]{-67,105}));
    AddState(105,new State(new int[]{41,106,44,107}));
    AddState(106,new State(-192));
    AddState(107,new State(new int[]{182,110,183,111,41,-179},new int[]{-66,108}));
    AddState(108,new State(new int[]{41,109}));
    AddState(109,new State(-193));
    AddState(110,new State(-180));
    AddState(111,new State(-181));
    AddState(112,new State(-183));
    AddState(113,new State(-184));
    AddState(114,new State(-185));
    AddState(115,new State(-186));
    AddState(116,new State(-187));
    AddState(117,new State(new int[]{41,-189,44,-189,43,-211,45,-211,42,-211,47,-211,203,-211,204,-211,38,-211,198,-211,199,-211,200,-211,201,-211,196,-211,197,-211}));
    AddState(118,new State(-236));
    AddState(119,new State(-199));
    AddState(120,new State(-200));
    AddState(121,new State(-201));
    AddState(122,new State(-202));
    AddState(123,new State(-203));
    AddState(124,new State(new int[]{132,29,133,30,128,31,175,34,131,28,152,74,144,75,145,76,150,77,148,78,149,79,167,80,184,81,181,95,40,52,129,121,130,122,33,126,45,127,43,128,173,135},new int[]{-4,125,-57,25,-53,26,-56,32,-65,33,-59,59,-55,50,-54,60,-71,61,-78,62,-70,118,-69,94,-72,119,-73,120,-74,123,-76,124,-75,129,-44,130,-43,131,-42,134}));
    AddState(125,new State(new int[]{43,12,45,13,42,14,47,15,203,16,204,17,38,18,198,19,199,20,200,21,201,22,196,23,197,24,142,-213,140,-213,139,-213,127,-213,125,-213,44,-213,41,-213,126,-213,174,-213,173,-213,146,-213,147,-213,141,-213,153,-213,59,-213,170,-213,165,-213,166,-213,167,-213,168,-213,171,-213,172,-213,185,-213,186,-213,187,-213,188,-213,189,-213,190,-213,191,-213,192,-213,193,-213,194,-213,195,-213},new int[]{-77,10}));
    AddState(126,new State(-214));
    AddState(127,new State(-215));
    AddState(128,new State(-216));
    AddState(129,new State(-204));
    AddState(130,new State(-212));
    AddState(131,new State(new int[]{174,132,173,135},new int[]{-42,143}));
    AddState(132,new State(new int[]{132,29,133,30,128,31,175,34,131,28,152,74,144,75,145,76,150,77,148,78,149,79,167,80,184,81,181,95,40,52,129,121,130,122,33,126,45,127,43,128,173,135},new int[]{-4,133,-57,25,-53,26,-56,32,-65,33,-59,59,-55,50,-54,60,-71,61,-78,62,-70,118,-69,94,-72,119,-73,120,-74,123,-76,124,-75,129,-44,130,-43,131,-42,134}));
    AddState(133,new State(new int[]{43,12,45,13,42,14,47,15,203,16,204,17,38,18,198,19,199,20,200,21,201,22,196,23,197,24,142,-103,140,-103,139,-103,127,-103,125,-103,44,-103,41,-103,126,-103,174,-103,173,-103,146,-103,147,-103,141,-103,153,-103,59,-103,170,-103,165,-103,166,-103,167,-103,168,-103,171,-103,172,-103,185,-103,186,-103,187,-103,188,-103,189,-103,190,-103,191,-103,192,-103,193,-103,194,-103,195,-103},new int[]{-77,10}));
    AddState(134,new State(-101));
    AddState(135,new State(new int[]{126,139,132,142},new int[]{-41,136}));
    AddState(136,new State(new int[]{196,137}));
    AddState(137,new State(new int[]{132,29,133,30,128,31,175,34,131,28,152,74,144,75,145,76,150,77,148,78,149,79,167,80,184,81,181,95,40,52,129,121,130,122,33,126,45,127,43,128,173,135},new int[]{-4,138,-57,25,-53,26,-56,32,-65,33,-59,59,-55,50,-54,60,-71,61,-78,62,-70,118,-69,94,-72,119,-73,120,-74,123,-76,124,-75,129,-44,130,-43,131,-42,134}));
    AddState(138,new State(new int[]{43,12,45,13,42,14,47,15,203,16,204,17,38,18,198,19,199,20,200,21,201,22,196,23,197,24,174,-99,173,-99},new int[]{-77,10}));
    AddState(139,new State(new int[]{196,140}));
    AddState(140,new State(new int[]{132,29,133,30,128,31,175,34,131,28,152,74,144,75,145,76,150,77,148,78,149,79,167,80,184,81,181,95,40,52,129,121,130,122,33,126,45,127,43,128,173,135},new int[]{-4,141,-57,25,-53,26,-56,32,-65,33,-59,59,-55,50,-54,60,-71,61,-78,62,-70,118,-69,94,-72,119,-73,120,-74,123,-76,124,-75,129,-44,130,-43,131,-42,134}));
    AddState(141,new State(new int[]{43,12,45,13,42,14,47,15,203,16,204,17,38,18,198,19,199,20,200,21,201,22,196,23,197,24,174,-100,173,-100},new int[]{-77,10}));
    AddState(142,new State(-98));
    AddState(143,new State(-102));
    AddState(144,new State(new int[]{43,12,45,13,42,14,47,15,203,16,204,17,38,18,198,19,199,20,200,21,201,22,196,23,197,24},new int[]{-77,10}));
    AddState(145,new State(-164));
    AddState(146,new State(-176));
    AddState(147,new State(new int[]{44,148}));
    AddState(148,new State(new int[]{176,150,160,151,177,152,178,153,179,154,180,155},new int[]{-62,149}));
    AddState(149,new State(-174));
    AddState(150,new State(-168));
    AddState(151,new State(-169));
    AddState(152,new State(-170));
    AddState(153,new State(-171));
    AddState(154,new State(-172));
    AddState(155,new State(-173));
    AddState(156,new State(-175));
    AddState(157,new State(new int[]{143,158}));
    AddState(158,new State(new int[]{132,29,133,30,128,31,175,34,131,28,152,74,144,75,145,76,150,77,148,78,149,79,167,80,184,81,181,95,40,52,129,121,130,122,33,126,45,127,43,128,173,135},new int[]{-8,159,-4,160,-57,25,-53,26,-56,32,-65,33,-59,59,-55,50,-54,60,-71,61,-78,62,-70,118,-69,94,-72,119,-73,120,-74,123,-76,124,-75,129,-44,130,-43,131,-42,134}));
    AddState(159,new State(-12));
    AddState(160,new State(new int[]{44,164,146,166,147,167,43,12,45,13,42,14,47,15,203,16,204,17,38,18,198,19,199,20,200,21,201,22,196,23,197,24,140,-11,139,-11,127,-11},new int[]{-7,161,-77,10}));
    AddState(161,new State(new int[]{44,162,140,-10,139,-10,127,-10}));
    AddState(162,new State(new int[]{132,29,133,30,128,31,175,34,131,28,152,74,144,75,145,76,150,77,148,78,149,79,167,80,184,81,181,95,40,52,129,121,130,122,33,126,45,127,43,128,173,135},new int[]{-8,163,-4,160,-57,25,-53,26,-56,32,-65,33,-59,59,-55,50,-54,60,-71,61,-78,62,-70,118,-69,94,-72,119,-73,120,-74,123,-76,124,-75,129,-44,130,-43,131,-42,134}));
    AddState(163,new State(-8));
    AddState(164,new State(new int[]{132,29,133,30,128,31,175,34,131,28,152,74,144,75,145,76,150,77,148,78,149,79,167,80,184,81,181,95,40,52,129,121,130,122,33,126,45,127,43,128,173,135},new int[]{-8,165,-4,160,-57,25,-53,26,-56,32,-65,33,-59,59,-55,50,-54,60,-71,61,-78,62,-70,118,-69,94,-72,119,-73,120,-74,123,-76,124,-75,129,-44,130,-43,131,-42,134}));
    AddState(165,new State(-9));
    AddState(166,new State(-6));
    AddState(167,new State(-7));
    AddState(168,new State(new int[]{132,29,133,30,128,176,175,34},new int[]{-46,169,-53,174,-56,32,-65,33}));
    AddState(169,new State(new int[]{196,170}));
    AddState(170,new State(new int[]{132,29,133,30,128,31,175,34,131,28,152,74,144,75,145,76,150,77,148,78,149,79,167,80,184,81,181,95,40,52,129,121,130,122,33,126,45,127,43,128,173,135},new int[]{-47,171,-4,173,-57,25,-53,26,-56,32,-65,33,-59,59,-55,50,-54,60,-71,61,-78,62,-70,118,-69,94,-72,119,-73,120,-74,123,-76,124,-75,129,-44,130,-43,131,-42,134}));
    AddState(171,new State(new int[]{141,168,139,-143},new int[]{-11,172}));
    AddState(172,new State(-144));
    AddState(173,new State(new int[]{43,12,45,13,42,14,47,15,203,16,204,17,38,18,198,19,199,20,200,21,201,22,196,23,197,24,141,-196,139,-196},new int[]{-77,10}));
    AddState(174,new State(new int[]{131,28},new int[]{-54,175}));
    AddState(175,new State(-153));
    AddState(176,new State(-159));
    AddState(177,new State(new int[]{132,29,133,30,128,31,175,34,131,28,152,74,144,75,145,76,150,77,148,78,149,79,167,80,184,81,181,95,40,52,129,121,130,122,33,126,45,127,43,128,173,135},new int[]{-4,178,-57,25,-53,26,-56,32,-65,33,-59,59,-55,50,-54,60,-71,61,-78,62,-70,118,-69,94,-72,119,-73,120,-74,123,-76,124,-75,129,-44,130,-43,131,-42,134}));
    AddState(178,new State(new int[]{142,157,43,12,45,13,42,14,47,15,203,16,204,17,38,18,198,19,199,20,200,21,201,22,196,23,197,24,140,-18,139,-18,127,-18},new int[]{-9,179,-77,10}));
    AddState(179,new State(-17));
    AddState(180,new State(-13));
    AddState(181,new State(new int[]{132,29,133,30,128,31,175,34,131,28,152,74,144,75,145,76,150,77,148,78,149,79,167,80,184,81,181,95,40,52,129,121,130,122,33,126,45,127,43,128,173,135},new int[]{-4,182,-57,25,-53,26,-56,32,-65,33,-59,59,-55,50,-54,60,-71,61,-78,62,-70,118,-69,94,-72,119,-73,120,-74,123,-76,124,-75,129,-44,130,-43,131,-42,134}));
    AddState(182,new State(new int[]{43,12,45,13,42,14,47,15,203,16,204,17,38,18,198,19,199,20,200,21,201,22,196,23,197,24,127,-3},new int[]{-77,10}));
    AddState(183,new State(-4));
    AddState(184,new State(new int[]{59,185,127,-19}));
    AddState(185,new State(new int[]{151,187,152,350,137,354,127,-20},new int[]{-5,186,-12,184,-13,341,-14,344,-15,347,-16,351}));
    AddState(186,new State(-21));
    AddState(187,new State(new int[]{141,188,169,339,136,340}));
    AddState(188,new State(new int[]{126,326,132,337,131,338,133,30,128,176,175,34},new int[]{-17,189,-18,333,-53,324,-56,32,-65,33}));
    AddState(189,new State(new int[]{46,190}));
    AddState(190,new State(new int[]{132,29,133,30,128,176,175,34},new int[]{-18,191,-53,324,-56,32,-65,33}));
    AddState(191,new State(new int[]{196,192}));
    AddState(192,new State(new int[]{132,29,133,30,128,31,175,34,131,28,152,74,144,75,145,76,150,77,148,78,149,79,167,80,184,81,181,95,40,52,129,121,130,122,33,126,45,127,43,128,173,135},new int[]{-19,193,-4,323,-57,25,-53,26,-56,32,-65,33,-59,59,-55,50,-54,60,-71,61,-78,62,-70,118,-69,94,-72,119,-73,120,-74,123,-76,124,-75,129,-44,130,-43,131,-42,134}));
    AddState(193,new State(new int[]{153,195,59,-37,127,-37},new int[]{-20,194}));
    AddState(194,new State(-38));
    AddState(195,new State(new int[]{154,196}));
    AddState(196,new State(new int[]{126,312,155,313,156,314,157,315,158,316,159,317,160,318,161,319,162,320,163,321,164,322},new int[]{-21,197}));
    AddState(197,new State(new int[]{170,201,165,209,166,216,167,224,168,229,171,234,172,242,185,248,186,254,187,260,188,266,189,272,190,278,191,284,192,290,193,296,194,302,195,308,59,-140,127,-140},new int[]{-45,198,-23,199,-22,207,-27,214,-28,222,-29,227,-25,232,-26,240,-30,246,-31,252,-32,258,-33,264,-34,270,-35,276,-36,282,-37,288,-38,294,-39,300,-40,306}));
    AddState(198,new State(-142));
    AddState(199,new State(new int[]{170,201,165,209,166,216,167,224,168,229,171,234,172,242,185,248,186,254,187,260,188,266,189,272,190,278,191,284,192,290,193,296,194,302,195,308,59,-104,127,-104},new int[]{-45,200,-23,199,-22,207,-27,214,-28,222,-29,227,-25,232,-26,240,-30,246,-31,252,-32,258,-33,264,-34,270,-35,276,-36,282,-37,288,-38,294,-39,300,-40,306}));
    AddState(200,new State(-105));
    AddState(201,new State(new int[]{196,202,126,206}));
    AddState(202,new State(new int[]{144,203,145,204,126,205}));
    AddState(203,new State(-60));
    AddState(204,new State(-61));
    AddState(205,new State(-63));
    AddState(206,new State(-62));
    AddState(207,new State(new int[]{170,201,165,209,166,216,167,224,168,229,171,234,172,242,185,248,186,254,187,260,188,266,189,272,190,278,191,284,192,290,193,296,194,302,195,308,59,-106,127,-106},new int[]{-45,208,-23,199,-22,207,-27,214,-28,222,-29,227,-25,232,-26,240,-30,246,-31,252,-32,258,-33,264,-34,270,-35,276,-36,282,-37,288,-38,294,-39,300,-40,306}));
    AddState(208,new State(-107));
    AddState(209,new State(new int[]{196,210,126,213}));
    AddState(210,new State(new int[]{129,211,126,212}));
    AddState(211,new State(-57));
    AddState(212,new State(-59));
    AddState(213,new State(-58));
    AddState(214,new State(new int[]{170,201,165,209,166,216,167,224,168,229,171,234,172,242,185,248,186,254,187,260,188,266,189,272,190,278,191,284,192,290,193,296,194,302,195,308,59,-108,127,-108},new int[]{-45,215,-23,199,-22,207,-27,214,-28,222,-29,227,-25,232,-26,240,-30,246,-31,252,-32,258,-33,264,-34,270,-35,276,-36,282,-37,288,-38,294,-39,300,-40,306}));
    AddState(215,new State(-109));
    AddState(216,new State(new int[]{196,217,126,221}));
    AddState(217,new State(new int[]{144,218,145,219,126,220}));
    AddState(218,new State(-70));
    AddState(219,new State(-71));
    AddState(220,new State(-73));
    AddState(221,new State(-72));
    AddState(222,new State(new int[]{170,201,165,209,166,216,167,224,168,229,171,234,172,242,185,248,186,254,187,260,188,266,189,272,190,278,191,284,192,290,193,296,194,302,195,308,59,-110,127,-110},new int[]{-45,223,-23,199,-22,207,-27,214,-28,222,-29,227,-25,232,-26,240,-30,246,-31,252,-32,258,-33,264,-34,270,-35,276,-36,282,-37,288,-38,294,-39,300,-40,306}));
    AddState(223,new State(-111));
    AddState(224,new State(new int[]{196,225}));
    AddState(225,new State(new int[]{133,226}));
    AddState(226,new State(-74));
    AddState(227,new State(new int[]{170,201,165,209,166,216,167,224,168,229,171,234,172,242,185,248,186,254,187,260,188,266,189,272,190,278,191,284,192,290,193,296,194,302,195,308,59,-112,127,-112},new int[]{-45,228,-23,199,-22,207,-27,214,-28,222,-29,227,-25,232,-26,240,-30,246,-31,252,-32,258,-33,264,-34,270,-35,276,-36,282,-37,288,-38,294,-39,300,-40,306}));
    AddState(228,new State(-113));
    AddState(229,new State(new int[]{196,230}));
    AddState(230,new State(new int[]{133,231}));
    AddState(231,new State(-75));
    AddState(232,new State(new int[]{170,201,165,209,166,216,167,224,168,229,171,234,172,242,185,248,186,254,187,260,188,266,189,272,190,278,191,284,192,290,193,296,194,302,195,308,59,-114,127,-114},new int[]{-45,233,-23,199,-22,207,-27,214,-28,222,-29,227,-25,232,-26,240,-30,246,-31,252,-32,258,-33,264,-34,270,-35,276,-36,282,-37,288,-38,294,-39,300,-40,306}));
    AddState(233,new State(-115));
    AddState(234,new State(new int[]{196,235,126,239}));
    AddState(235,new State(new int[]{133,237,130,238},new int[]{-24,236}));
    AddState(236,new State(-66));
    AddState(237,new State(-64));
    AddState(238,new State(-65));
    AddState(239,new State(-67));
    AddState(240,new State(new int[]{170,201,165,209,166,216,167,224,168,229,171,234,172,242,185,248,186,254,187,260,188,266,189,272,190,278,191,284,192,290,193,296,194,302,195,308,59,-116,127,-116},new int[]{-45,241,-23,199,-22,207,-27,214,-28,222,-29,227,-25,232,-26,240,-30,246,-31,252,-32,258,-33,264,-34,270,-35,276,-36,282,-37,288,-38,294,-39,300,-40,306}));
    AddState(241,new State(-117));
    AddState(242,new State(new int[]{196,243,126,245}));
    AddState(243,new State(new int[]{133,244}));
    AddState(244,new State(-68));
    AddState(245,new State(-69));
    AddState(246,new State(new int[]{170,201,165,209,166,216,167,224,168,229,171,234,172,242,185,248,186,254,187,260,188,266,189,272,190,278,191,284,192,290,193,296,194,302,195,308,59,-118,127,-118},new int[]{-45,247,-23,199,-22,207,-27,214,-28,222,-29,227,-25,232,-26,240,-30,246,-31,252,-32,258,-33,264,-34,270,-35,276,-36,282,-37,288,-38,294,-39,300,-40,306}));
    AddState(247,new State(-119));
    AddState(248,new State(new int[]{196,249,126,251}));
    AddState(249,new State(new int[]{133,237,130,238},new int[]{-24,250}));
    AddState(250,new State(-76));
    AddState(251,new State(-77));
    AddState(252,new State(new int[]{170,201,165,209,166,216,167,224,168,229,171,234,172,242,185,248,186,254,187,260,188,266,189,272,190,278,191,284,192,290,193,296,194,302,195,308,59,-120,127,-120},new int[]{-45,253,-23,199,-22,207,-27,214,-28,222,-29,227,-25,232,-26,240,-30,246,-31,252,-32,258,-33,264,-34,270,-35,276,-36,282,-37,288,-38,294,-39,300,-40,306}));
    AddState(253,new State(-121));
    AddState(254,new State(new int[]{196,255,126,257}));
    AddState(255,new State(new int[]{133,237,130,238},new int[]{-24,256}));
    AddState(256,new State(-78));
    AddState(257,new State(-79));
    AddState(258,new State(new int[]{170,201,165,209,166,216,167,224,168,229,171,234,172,242,185,248,186,254,187,260,188,266,189,272,190,278,191,284,192,290,193,296,194,302,195,308,59,-122,127,-122},new int[]{-45,259,-23,199,-22,207,-27,214,-28,222,-29,227,-25,232,-26,240,-30,246,-31,252,-32,258,-33,264,-34,270,-35,276,-36,282,-37,288,-38,294,-39,300,-40,306}));
    AddState(259,new State(-123));
    AddState(260,new State(new int[]{196,261,126,263}));
    AddState(261,new State(new int[]{133,237,130,238},new int[]{-24,262}));
    AddState(262,new State(-80));
    AddState(263,new State(-81));
    AddState(264,new State(new int[]{170,201,165,209,166,216,167,224,168,229,171,234,172,242,185,248,186,254,187,260,188,266,189,272,190,278,191,284,192,290,193,296,194,302,195,308,59,-124,127,-124},new int[]{-45,265,-23,199,-22,207,-27,214,-28,222,-29,227,-25,232,-26,240,-30,246,-31,252,-32,258,-33,264,-34,270,-35,276,-36,282,-37,288,-38,294,-39,300,-40,306}));
    AddState(265,new State(-125));
    AddState(266,new State(new int[]{196,267,126,269}));
    AddState(267,new State(new int[]{132,29,133,30,128,31,175,34,131,28,152,74,144,75,145,76,150,77,148,78,149,79,167,80,184,81,181,95,40,52,129,121,130,122,33,126,45,127,43,128,173,135},new int[]{-4,268,-57,25,-53,26,-56,32,-65,33,-59,59,-55,50,-54,60,-71,61,-78,62,-70,118,-69,94,-72,119,-73,120,-74,123,-76,124,-75,129,-44,130,-43,131,-42,134}));
    AddState(268,new State(new int[]{43,12,45,13,42,14,47,15,203,16,204,17,38,18,198,19,199,20,200,21,201,22,196,23,197,24,170,-82,165,-82,166,-82,167,-82,168,-82,171,-82,172,-82,185,-82,186,-82,187,-82,188,-82,189,-82,190,-82,191,-82,192,-82,193,-82,194,-82,195,-82,59,-82,127,-82},new int[]{-77,10}));
    AddState(269,new State(-83));
    AddState(270,new State(new int[]{170,201,165,209,166,216,167,224,168,229,171,234,172,242,185,248,186,254,187,260,188,266,189,272,190,278,191,284,192,290,193,296,194,302,195,308,59,-126,127,-126},new int[]{-45,271,-23,199,-22,207,-27,214,-28,222,-29,227,-25,232,-26,240,-30,246,-31,252,-32,258,-33,264,-34,270,-35,276,-36,282,-37,288,-38,294,-39,300,-40,306}));
    AddState(271,new State(-127));
    AddState(272,new State(new int[]{196,273,126,275}));
    AddState(273,new State(new int[]{133,237,130,238},new int[]{-24,274}));
    AddState(274,new State(-84));
    AddState(275,new State(-85));
    AddState(276,new State(new int[]{170,201,165,209,166,216,167,224,168,229,171,234,172,242,185,248,186,254,187,260,188,266,189,272,190,278,191,284,192,290,193,296,194,302,195,308,59,-128,127,-128},new int[]{-45,277,-23,199,-22,207,-27,214,-28,222,-29,227,-25,232,-26,240,-30,246,-31,252,-32,258,-33,264,-34,270,-35,276,-36,282,-37,288,-38,294,-39,300,-40,306}));
    AddState(277,new State(-129));
    AddState(278,new State(new int[]{196,279,126,281}));
    AddState(279,new State(new int[]{133,237,130,238},new int[]{-24,280}));
    AddState(280,new State(-86));
    AddState(281,new State(-87));
    AddState(282,new State(new int[]{170,201,165,209,166,216,167,224,168,229,171,234,172,242,185,248,186,254,187,260,188,266,189,272,190,278,191,284,192,290,193,296,194,302,195,308,59,-130,127,-130},new int[]{-45,283,-23,199,-22,207,-27,214,-28,222,-29,227,-25,232,-26,240,-30,246,-31,252,-32,258,-33,264,-34,270,-35,276,-36,282,-37,288,-38,294,-39,300,-40,306}));
    AddState(283,new State(-131));
    AddState(284,new State(new int[]{196,285,126,287}));
    AddState(285,new State(new int[]{132,29,133,30,128,31,175,34,131,28,152,74,144,75,145,76,150,77,148,78,149,79,167,80,184,81,181,95,40,52,129,121,130,122,33,126,45,127,43,128,173,135},new int[]{-4,286,-57,25,-53,26,-56,32,-65,33,-59,59,-55,50,-54,60,-71,61,-78,62,-70,118,-69,94,-72,119,-73,120,-74,123,-76,124,-75,129,-44,130,-43,131,-42,134}));
    AddState(286,new State(new int[]{43,12,45,13,42,14,47,15,203,16,204,17,38,18,198,19,199,20,200,21,201,22,196,23,197,24,170,-88,165,-88,166,-88,167,-88,168,-88,171,-88,172,-88,185,-88,186,-88,187,-88,188,-88,189,-88,190,-88,191,-88,192,-88,193,-88,194,-88,195,-88,59,-88,127,-88},new int[]{-77,10}));
    AddState(287,new State(-89));
    AddState(288,new State(new int[]{170,201,165,209,166,216,167,224,168,229,171,234,172,242,185,248,186,254,187,260,188,266,189,272,190,278,191,284,192,290,193,296,194,302,195,308,59,-132,127,-132},new int[]{-45,289,-23,199,-22,207,-27,214,-28,222,-29,227,-25,232,-26,240,-30,246,-31,252,-32,258,-33,264,-34,270,-35,276,-36,282,-37,288,-38,294,-39,300,-40,306}));
    AddState(289,new State(-133));
    AddState(290,new State(new int[]{196,291,126,293}));
    AddState(291,new State(new int[]{133,237,130,238},new int[]{-24,292}));
    AddState(292,new State(-90));
    AddState(293,new State(-91));
    AddState(294,new State(new int[]{170,201,165,209,166,216,167,224,168,229,171,234,172,242,185,248,186,254,187,260,188,266,189,272,190,278,191,284,192,290,193,296,194,302,195,308,59,-134,127,-134},new int[]{-45,295,-23,199,-22,207,-27,214,-28,222,-29,227,-25,232,-26,240,-30,246,-31,252,-32,258,-33,264,-34,270,-35,276,-36,282,-37,288,-38,294,-39,300,-40,306}));
    AddState(295,new State(-135));
    AddState(296,new State(new int[]{196,297,126,299}));
    AddState(297,new State(new int[]{133,237,130,238},new int[]{-24,298}));
    AddState(298,new State(-92));
    AddState(299,new State(-93));
    AddState(300,new State(new int[]{170,201,165,209,166,216,167,224,168,229,171,234,172,242,185,248,186,254,187,260,188,266,189,272,190,278,191,284,192,290,193,296,194,302,195,308,59,-136,127,-136},new int[]{-45,301,-23,199,-22,207,-27,214,-28,222,-29,227,-25,232,-26,240,-30,246,-31,252,-32,258,-33,264,-34,270,-35,276,-36,282,-37,288,-38,294,-39,300,-40,306}));
    AddState(301,new State(-137));
    AddState(302,new State(new int[]{196,303,126,305}));
    AddState(303,new State(new int[]{132,29,133,30,128,31,175,34,131,28,152,74,144,75,145,76,150,77,148,78,149,79,167,80,184,81,181,95,40,52,129,121,130,122,33,126,45,127,43,128,173,135},new int[]{-4,304,-57,25,-53,26,-56,32,-65,33,-59,59,-55,50,-54,60,-71,61,-78,62,-70,118,-69,94,-72,119,-73,120,-74,123,-76,124,-75,129,-44,130,-43,131,-42,134}));
    AddState(304,new State(new int[]{43,12,45,13,42,14,47,15,203,16,204,17,38,18,198,19,199,20,200,21,201,22,196,23,197,24,170,-94,165,-94,166,-94,167,-94,168,-94,171,-94,172,-94,185,-94,186,-94,187,-94,188,-94,189,-94,190,-94,191,-94,192,-94,193,-94,194,-94,195,-94,59,-94,127,-94},new int[]{-77,10}));
    AddState(305,new State(-95));
    AddState(306,new State(new int[]{170,201,165,209,166,216,167,224,168,229,171,234,172,242,185,248,186,254,187,260,188,266,189,272,190,278,191,284,192,290,193,296,194,302,195,308,59,-138,127,-138},new int[]{-45,307,-23,199,-22,207,-27,214,-28,222,-29,227,-25,232,-26,240,-30,246,-31,252,-32,258,-33,264,-34,270,-35,276,-36,282,-37,288,-38,294,-39,300,-40,306}));
    AddState(307,new State(-139));
    AddState(308,new State(new int[]{196,309,126,311}));
    AddState(309,new State(new int[]{133,310}));
    AddState(310,new State(-96));
    AddState(311,new State(-97));
    AddState(312,new State(-141));
    AddState(313,new State(-47));
    AddState(314,new State(-48));
    AddState(315,new State(-49));
    AddState(316,new State(-50));
    AddState(317,new State(-51));
    AddState(318,new State(-52));
    AddState(319,new State(-53));
    AddState(320,new State(-54));
    AddState(321,new State(-55));
    AddState(322,new State(-56));
    AddState(323,new State(new int[]{43,12,45,13,42,14,47,15,203,16,204,17,38,18,198,19,199,20,200,21,201,22,196,23,197,24,153,-195,59,-195,127,-195},new int[]{-77,10}));
    AddState(324,new State(new int[]{131,28},new int[]{-54,325}));
    AddState(325,new State(-152));
    AddState(326,new State(new int[]{46,327,196,331}));
    AddState(327,new State(new int[]{132,29,133,30,128,176,175,34},new int[]{-18,328,-53,324,-56,32,-65,33}));
    AddState(328,new State(new int[]{196,329}));
    AddState(329,new State(new int[]{132,29,133,30,128,31,175,34,131,28,152,74,144,75,145,76,150,77,148,78,149,79,167,80,184,81,181,95,40,52,129,121,130,122,33,126,45,127,43,128,173,135},new int[]{-19,330,-4,323,-57,25,-53,26,-56,32,-65,33,-59,59,-55,50,-54,60,-71,61,-78,62,-70,118,-69,94,-72,119,-73,120,-74,123,-76,124,-75,129,-44,130,-43,131,-42,134}));
    AddState(330,new State(-39));
    AddState(331,new State(new int[]{132,29,133,30,128,31,175,34,131,28,152,74,144,75,145,76,150,77,148,78,149,79,167,80,184,81,181,95,40,52,129,121,130,122,33,126,45,127,43,128,173,135},new int[]{-19,332,-4,323,-57,25,-53,26,-56,32,-65,33,-59,59,-55,50,-54,60,-71,61,-78,62,-70,118,-69,94,-72,119,-73,120,-74,123,-76,124,-75,129,-44,130,-43,131,-42,134}));
    AddState(332,new State(-42));
    AddState(333,new State(new int[]{196,334}));
    AddState(334,new State(new int[]{132,29,133,30,128,31,175,34,131,28,152,74,144,75,145,76,150,77,148,78,149,79,167,80,184,81,181,95,40,52,129,121,130,122,33,126,45,127,43,128,173,135},new int[]{-19,335,-4,323,-57,25,-53,26,-56,32,-65,33,-59,59,-55,50,-54,60,-71,61,-78,62,-70,118,-69,94,-72,119,-73,120,-74,123,-76,124,-75,129,-44,130,-43,131,-42,134}));
    AddState(335,new State(new int[]{153,195,59,-40,127,-40},new int[]{-20,336}));
    AddState(336,new State(-41));
    AddState(337,new State(new int[]{46,-35,131,-157}));
    AddState(338,new State(-36));
    AddState(339,new State(-43));
    AddState(340,new State(-44));
    AddState(341,new State(new int[]{59,342,127,-22}));
    AddState(342,new State(new int[]{151,187,152,350,137,354,127,-23},new int[]{-5,343,-12,184,-13,341,-14,344,-15,347,-16,351}));
    AddState(343,new State(-24));
    AddState(344,new State(new int[]{59,345,127,-25}));
    AddState(345,new State(new int[]{151,187,152,350,137,354,127,-26},new int[]{-5,346,-12,184,-13,341,-14,344,-15,347,-16,351}));
    AddState(346,new State(-27));
    AddState(347,new State(new int[]{59,348,127,-28}));
    AddState(348,new State(new int[]{151,187,152,350,137,354,127,-29},new int[]{-5,349,-12,184,-13,341,-14,344,-15,347,-16,351}));
    AddState(349,new State(-30));
    AddState(350,new State(-45));
    AddState(351,new State(new int[]{59,352,127,-31}));
    AddState(352,new State(new int[]{151,187,152,350,137,354,127,-32},new int[]{-5,353,-12,184,-13,341,-14,344,-15,347,-16,351}));
    AddState(353,new State(-33));
    AddState(354,new State(-46));
    AddState(355,new State(-5));
    AddState(356,new State(-34));

    rules=new Rule[252];
    rules[1]=new Rule(-2, new int[]{-1,127});
    rules[2]=new Rule(-1, new int[]{-3});
    rules[3]=new Rule(-1, new int[]{196,-4});
    rules[4]=new Rule(-1, new int[]{-5});
    rules[5]=new Rule(-1, new int[]{-6});
    rules[6]=new Rule(-7, new int[]{146});
    rules[7]=new Rule(-7, new int[]{147});
    rules[8]=new Rule(-8, new int[]{-4,-7,44,-8});
    rules[9]=new Rule(-8, new int[]{-4,44,-8});
    rules[10]=new Rule(-8, new int[]{-4,-7});
    rules[11]=new Rule(-8, new int[]{-4});
    rules[12]=new Rule(-9, new int[]{142,143,-8});
    rules[13]=new Rule(-3, new int[]{-10});
    rules[14]=new Rule(-3, new int[]{-3,-10});
    rules[15]=new Rule(-10, new int[]{140,-11,139,-4,-9});
    rules[16]=new Rule(-10, new int[]{140,-11,139,-4});
    rules[17]=new Rule(-10, new int[]{139,-4,-9});
    rules[18]=new Rule(-10, new int[]{139,-4});
    rules[19]=new Rule(-5, new int[]{-12});
    rules[20]=new Rule(-5, new int[]{-12,59});
    rules[21]=new Rule(-5, new int[]{-12,59,-5});
    rules[22]=new Rule(-5, new int[]{-13});
    rules[23]=new Rule(-5, new int[]{-13,59});
    rules[24]=new Rule(-5, new int[]{-13,59,-5});
    rules[25]=new Rule(-5, new int[]{-14});
    rules[26]=new Rule(-5, new int[]{-14,59});
    rules[27]=new Rule(-5, new int[]{-14,59,-5});
    rules[28]=new Rule(-5, new int[]{-15});
    rules[29]=new Rule(-5, new int[]{-15,59});
    rules[30]=new Rule(-5, new int[]{-15,59,-5});
    rules[31]=new Rule(-5, new int[]{-16});
    rules[32]=new Rule(-5, new int[]{-16,59});
    rules[33]=new Rule(-5, new int[]{-16,59,-5});
    rules[34]=new Rule(-6, new int[]{127});
    rules[35]=new Rule(-17, new int[]{132});
    rules[36]=new Rule(-17, new int[]{131});
    rules[37]=new Rule(-12, new int[]{151,141,-17,46,-18,196,-19});
    rules[38]=new Rule(-12, new int[]{151,141,-17,46,-18,196,-19,-20});
    rules[39]=new Rule(-12, new int[]{151,141,126,46,-18,196,-19});
    rules[40]=new Rule(-12, new int[]{151,141,-18,196,-19});
    rules[41]=new Rule(-12, new int[]{151,141,-18,196,-19,-20});
    rules[42]=new Rule(-12, new int[]{151,141,126,196,-19});
    rules[43]=new Rule(-13, new int[]{151,169});
    rules[44]=new Rule(-14, new int[]{151,136});
    rules[45]=new Rule(-15, new int[]{152});
    rules[46]=new Rule(-16, new int[]{137});
    rules[47]=new Rule(-21, new int[]{155});
    rules[48]=new Rule(-21, new int[]{156});
    rules[49]=new Rule(-21, new int[]{157});
    rules[50]=new Rule(-21, new int[]{158});
    rules[51]=new Rule(-21, new int[]{159});
    rules[52]=new Rule(-21, new int[]{160});
    rules[53]=new Rule(-21, new int[]{161});
    rules[54]=new Rule(-21, new int[]{162});
    rules[55]=new Rule(-21, new int[]{163});
    rules[56]=new Rule(-21, new int[]{164});
    rules[57]=new Rule(-22, new int[]{165,196,129});
    rules[58]=new Rule(-22, new int[]{165,126});
    rules[59]=new Rule(-22, new int[]{165,196,126});
    rules[60]=new Rule(-23, new int[]{170,196,144});
    rules[61]=new Rule(-23, new int[]{170,196,145});
    rules[62]=new Rule(-23, new int[]{170,126});
    rules[63]=new Rule(-23, new int[]{170,196,126});
    rules[64]=new Rule(-24, new int[]{133});
    rules[65]=new Rule(-24, new int[]{130});
    rules[66]=new Rule(-25, new int[]{171,196,-24});
    rules[67]=new Rule(-25, new int[]{171,126});
    rules[68]=new Rule(-26, new int[]{172,196,133});
    rules[69]=new Rule(-26, new int[]{172,126});
    rules[70]=new Rule(-27, new int[]{166,196,144});
    rules[71]=new Rule(-27, new int[]{166,196,145});
    rules[72]=new Rule(-27, new int[]{166,126});
    rules[73]=new Rule(-27, new int[]{166,196,126});
    rules[74]=new Rule(-28, new int[]{167,196,133});
    rules[75]=new Rule(-29, new int[]{168,196,133});
    rules[76]=new Rule(-30, new int[]{185,196,-24});
    rules[77]=new Rule(-30, new int[]{185,126});
    rules[78]=new Rule(-31, new int[]{186,196,-24});
    rules[79]=new Rule(-31, new int[]{186,126});
    rules[80]=new Rule(-32, new int[]{187,196,-24});
    rules[81]=new Rule(-32, new int[]{187,126});
    rules[82]=new Rule(-33, new int[]{188,196,-4});
    rules[83]=new Rule(-33, new int[]{188,126});
    rules[84]=new Rule(-34, new int[]{189,196,-24});
    rules[85]=new Rule(-34, new int[]{189,126});
    rules[86]=new Rule(-35, new int[]{190,196,-24});
    rules[87]=new Rule(-35, new int[]{190,126});
    rules[88]=new Rule(-36, new int[]{191,196,-4});
    rules[89]=new Rule(-36, new int[]{191,126});
    rules[90]=new Rule(-37, new int[]{192,196,-24});
    rules[91]=new Rule(-37, new int[]{192,126});
    rules[92]=new Rule(-38, new int[]{193,196,-24});
    rules[93]=new Rule(-38, new int[]{193,126});
    rules[94]=new Rule(-39, new int[]{194,196,-4});
    rules[95]=new Rule(-39, new int[]{194,126});
    rules[96]=new Rule(-40, new int[]{195,196,133});
    rules[97]=new Rule(-40, new int[]{195,126});
    rules[98]=new Rule(-41, new int[]{132});
    rules[99]=new Rule(-42, new int[]{173,-41,196,-4});
    rules[100]=new Rule(-42, new int[]{173,126,196,-4});
    rules[101]=new Rule(-43, new int[]{-42});
    rules[102]=new Rule(-43, new int[]{-43,-42});
    rules[103]=new Rule(-44, new int[]{-43,174,-4});
    rules[104]=new Rule(-45, new int[]{-23});
    rules[105]=new Rule(-45, new int[]{-23,-45});
    rules[106]=new Rule(-45, new int[]{-22});
    rules[107]=new Rule(-45, new int[]{-22,-45});
    rules[108]=new Rule(-45, new int[]{-27});
    rules[109]=new Rule(-45, new int[]{-27,-45});
    rules[110]=new Rule(-45, new int[]{-28});
    rules[111]=new Rule(-45, new int[]{-28,-45});
    rules[112]=new Rule(-45, new int[]{-29});
    rules[113]=new Rule(-45, new int[]{-29,-45});
    rules[114]=new Rule(-45, new int[]{-25});
    rules[115]=new Rule(-45, new int[]{-25,-45});
    rules[116]=new Rule(-45, new int[]{-26});
    rules[117]=new Rule(-45, new int[]{-26,-45});
    rules[118]=new Rule(-45, new int[]{-30});
    rules[119]=new Rule(-45, new int[]{-30,-45});
    rules[120]=new Rule(-45, new int[]{-31});
    rules[121]=new Rule(-45, new int[]{-31,-45});
    rules[122]=new Rule(-45, new int[]{-32});
    rules[123]=new Rule(-45, new int[]{-32,-45});
    rules[124]=new Rule(-45, new int[]{-33});
    rules[125]=new Rule(-45, new int[]{-33,-45});
    rules[126]=new Rule(-45, new int[]{-34});
    rules[127]=new Rule(-45, new int[]{-34,-45});
    rules[128]=new Rule(-45, new int[]{-35});
    rules[129]=new Rule(-45, new int[]{-35,-45});
    rules[130]=new Rule(-45, new int[]{-36});
    rules[131]=new Rule(-45, new int[]{-36,-45});
    rules[132]=new Rule(-45, new int[]{-37});
    rules[133]=new Rule(-45, new int[]{-37,-45});
    rules[134]=new Rule(-45, new int[]{-38});
    rules[135]=new Rule(-45, new int[]{-38,-45});
    rules[136]=new Rule(-45, new int[]{-39});
    rules[137]=new Rule(-45, new int[]{-39,-45});
    rules[138]=new Rule(-45, new int[]{-40});
    rules[139]=new Rule(-45, new int[]{-40,-45});
    rules[140]=new Rule(-20, new int[]{153,154,-21});
    rules[141]=new Rule(-20, new int[]{153,154,126});
    rules[142]=new Rule(-20, new int[]{153,154,-21,-45});
    rules[143]=new Rule(-11, new int[]{141,-46,196,-47});
    rules[144]=new Rule(-11, new int[]{141,-46,196,-47,-11});
    rules[145]=new Rule(-48, new int[]{-48,-49,-4});
    rules[146]=new Rule(-48, new int[]{-4});
    rules[147]=new Rule(-49, new int[]{44});
    rules[148]=new Rule(-50, new int[]{-51,-52});
    rules[149]=new Rule(-50, new int[]{-51,-48,-52});
    rules[150]=new Rule(-50, new int[]{-51,-48,126});
    rules[151]=new Rule(-50, new int[]{-51,126,-52});
    rules[152]=new Rule(-18, new int[]{-53,-54});
    rules[153]=new Rule(-46, new int[]{-53,-54});
    rules[154]=new Rule(-55, new int[]{-53,-54});
    rules[155]=new Rule(-55, new int[]{-54});
    rules[156]=new Rule(-54, new int[]{131});
    rules[157]=new Rule(-53, new int[]{132});
    rules[158]=new Rule(-53, new int[]{133});
    rules[159]=new Rule(-53, new int[]{128});
    rules[160]=new Rule(-53, new int[]{-56});
    rules[161]=new Rule(-57, new int[]{-53});
    rules[162]=new Rule(-58, new int[]{});
    rules[163]=new Rule(-58, new int[]{-59});
    rules[164]=new Rule(-60, new int[]{-58});
    rules[165]=new Rule(-60, new int[]{-60,44,-58});
    rules[166]=new Rule(-61, new int[]{123,-60,125});
    rules[167]=new Rule(-61, new int[]{123,-60,125,44,-61});
    rules[168]=new Rule(-62, new int[]{176});
    rules[169]=new Rule(-62, new int[]{160});
    rules[170]=new Rule(-62, new int[]{177});
    rules[171]=new Rule(-62, new int[]{178});
    rules[172]=new Rule(-62, new int[]{179});
    rules[173]=new Rule(-62, new int[]{180});
    rules[174]=new Rule(-63, new int[]{130,44,-62});
    rules[175]=new Rule(-64, new int[]{-63});
    rules[176]=new Rule(-64, new int[]{-64,44,-63});
    rules[177]=new Rule(-65, new int[]{175,40,-64,44,123,-61,125,41});
    rules[178]=new Rule(-56, new int[]{-65});
    rules[179]=new Rule(-66, new int[]{});
    rules[180]=new Rule(-66, new int[]{182});
    rules[181]=new Rule(-66, new int[]{183});
    rules[182]=new Rule(-67, new int[]{});
    rules[183]=new Rule(-67, new int[]{129});
    rules[184]=new Rule(-67, new int[]{144});
    rules[185]=new Rule(-67, new int[]{145});
    rules[186]=new Rule(-67, new int[]{146});
    rules[187]=new Rule(-67, new int[]{147});
    rules[188]=new Rule(-68, new int[]{});
    rules[189]=new Rule(-68, new int[]{-59});
    rules[190]=new Rule(-69, new int[]{181,40,-4,44,-4,41});
    rules[191]=new Rule(-69, new int[]{181,40,-4,44,-4,44,-68,41});
    rules[192]=new Rule(-69, new int[]{181,40,-4,44,-4,44,-68,44,-67,41});
    rules[193]=new Rule(-69, new int[]{181,40,-4,44,-4,44,-68,44,-67,44,-66,41});
    rules[194]=new Rule(-70, new int[]{-69});
    rules[195]=new Rule(-19, new int[]{-4});
    rules[196]=new Rule(-47, new int[]{-4});
    rules[197]=new Rule(-59, new int[]{-55});
    rules[198]=new Rule(-59, new int[]{-71});
    rules[199]=new Rule(-59, new int[]{-72});
    rules[200]=new Rule(-59, new int[]{-73});
    rules[201]=new Rule(-59, new int[]{129});
    rules[202]=new Rule(-59, new int[]{130});
    rules[203]=new Rule(-59, new int[]{-74});
    rules[204]=new Rule(-59, new int[]{-75});
    rules[205]=new Rule(-59, new int[]{144});
    rules[206]=new Rule(-59, new int[]{145});
    rules[207]=new Rule(-59, new int[]{148});
    rules[208]=new Rule(-59, new int[]{149});
    rules[209]=new Rule(-59, new int[]{150});
    rules[210]=new Rule(-4, new int[]{-57});
    rules[211]=new Rule(-4, new int[]{-59});
    rules[212]=new Rule(-4, new int[]{-44});
    rules[213]=new Rule(-74, new int[]{-76,-4});
    rules[214]=new Rule(-76, new int[]{33});
    rules[215]=new Rule(-76, new int[]{45});
    rules[216]=new Rule(-76, new int[]{43});
    rules[217]=new Rule(-75, new int[]{-4,-77,-4});
    rules[218]=new Rule(-77, new int[]{43});
    rules[219]=new Rule(-77, new int[]{45});
    rules[220]=new Rule(-77, new int[]{42});
    rules[221]=new Rule(-77, new int[]{47});
    rules[222]=new Rule(-77, new int[]{203});
    rules[223]=new Rule(-77, new int[]{204});
    rules[224]=new Rule(-77, new int[]{38});
    rules[225]=new Rule(-77, new int[]{198});
    rules[226]=new Rule(-77, new int[]{199});
    rules[227]=new Rule(-77, new int[]{200});
    rules[228]=new Rule(-77, new int[]{201});
    rules[229]=new Rule(-77, new int[]{196});
    rules[230]=new Rule(-77, new int[]{197});
    rules[231]=new Rule(-73, new int[]{-55,-72});
    rules[232]=new Rule(-72, new int[]{40,41});
    rules[233]=new Rule(-72, new int[]{40,-48,41});
    rules[234]=new Rule(-72, new int[]{40,-48,126});
    rules[235]=new Rule(-71, new int[]{-78,-79});
    rules[236]=new Rule(-71, new int[]{-70});
    rules[237]=new Rule(-71, new int[]{184,-78,-79});
    rules[238]=new Rule(-71, new int[]{184,-70});
    rules[239]=new Rule(-78, new int[]{128});
    rules[240]=new Rule(-78, new int[]{152});
    rules[241]=new Rule(-78, new int[]{144});
    rules[242]=new Rule(-78, new int[]{145});
    rules[243]=new Rule(-78, new int[]{150});
    rules[244]=new Rule(-78, new int[]{148});
    rules[245]=new Rule(-78, new int[]{149});
    rules[246]=new Rule(-78, new int[]{167});
    rules[247]=new Rule(-78, new int[]{184});
    rules[248]=new Rule(-79, new int[]{-51});
    rules[249]=new Rule(-79, new int[]{-50});
    rules[250]=new Rule(-51, new int[]{40});
    rules[251]=new Rule(-52, new int[]{41});

    nonTerminals = new string[] {"", "Start", "$accept", "DaxQueries", 
      "Expression", "DaxScript", "Empty", "Order", "OrderByList", "OrderBy", 
      "DaxQuery", "Definitions", "CreateMeasure", "CreateKpi", "CreateMember", 
      "Calculate", "Alter", "CubeName", "MeasureName", "MeasureExpression", "CalculationProperty", 
      "CalculationPropertyFormatType", "CalculationPropertyAccuracy", "CalculationPropertyVisible", 
      "CalculationPropertyDescriptionContent", "CalculationPropertyDescription", 
      "CalculationPropertyDisplayFolder", "CalculationPropertyThousandSeparator", 
      "CalculationPropertyFormat", "CalculationPropertyAdditionalInfo", "CalculationPropertyKpiDescription", 
      "CalculationPropertyKpiTargetFormatString", "CalculationPropertyKpiTargetDescription", 
      "CalculationPropertyKpiTargetExpression", "CalculationPropertyKpiStatusGraphic", 
      "CalculationPropertyKpiStatusDescription", "CalculationPropertyKpiStatusExpression", 
      "CalculationPropertyKpiTrendGraphic", "CalculationPropertyKpiTrendDescription", 
      "CalculationPropertyKpiTrendExpression", "CalculationPropertyKpiAnnotations", 
      "VarName", "VarDeclaration", "VarDeclarations", "VarExpression", "CalculationPropertyParams", 
      "QueryMeasureName", "QueryMeasureExpression", "Params1", "ParamSeparator", 
      "ParenthesisParameters", "StartArg", "EndArg", "TableRef", "ColumnRef", 
      "ColMeasureRef", "DataTableFunction", "TableExpression", "DataTableValue", 
      "ScalarExpression", "DataTableValues", "DataTableRows", "DataTableColumnType", 
      "DataTableColumn", "DataTableColumns", "DataTable", "RankXTies", "RankXOrder", 
      "RankXValue", "RankX", "RankXFunction", "FunctionCall", "ParenthesisExpression", 
      "CalculateShortcut", "UnaryExpression", "BinaryExpression", "UnaryOperator", 
      "BinaryOperator", "FunctionName", "FunctionArgs", };
  }

  protected override void DoAction(int action)
  {
    switch (action)
    {
      case 37: // CreateMeasure -> KWCREATE KWMEASURE CubeName '.' MeasureName EQ MeasureExpression 
{ SpecifyFullMeasureText(location_stack.array[location_stack.top-7], location_stack.array[location_stack.top-1]); }
        break;
      case 38: // CreateMeasure -> KWCREATE KWMEASURE CubeName '.' MeasureName EQ MeasureExpression CalculationProperty 
{ SpecifyFullMeasureText(location_stack.array[location_stack.top-8], location_stack.array[location_stack.top-2]); }
        break;
      case 39: // CreateMeasure -> KWCREATE KWMEASURE error '.' MeasureName EQ MeasureExpression 
{ CallHdlr("Cube name expected before '.'", location_stack.array[location_stack.top-5]); }
        break;
      case 40: // CreateMeasure -> KWCREATE KWMEASURE MeasureName EQ MeasureExpression 
{ SpecifyFullMeasureText(location_stack.array[location_stack.top-5], location_stack.array[location_stack.top-1]); }
        break;
      case 41: // CreateMeasure -> KWCREATE KWMEASURE MeasureName EQ MeasureExpression CalculationProperty 
{ SpecifyFullMeasureText(location_stack.array[location_stack.top-6], location_stack.array[location_stack.top-2]); }
        break;
      case 42: // CreateMeasure -> KWCREATE KWMEASURE error EQ MeasureExpression 
{ CallHdlr("Measure name expected", location_stack.array[location_stack.top-3]); }
        break;
      case 47: // CalculationPropertyFormatType -> KWGENERAL 
{ SpecifyCalculationProperty(location_stack.array[location_stack.top-1]); }
        break;
      case 48: // CalculationPropertyFormatType -> KWNUMBERDECIMAL 
{ SpecifyCalculationProperty(location_stack.array[location_stack.top-1]); }
        break;
      case 49: // CalculationPropertyFormatType -> KWNUMBERWHOLE 
{ SpecifyCalculationProperty(location_stack.array[location_stack.top-1]); }
        break;
      case 50: // CalculationPropertyFormatType -> KWPERCENTAGE 
{ SpecifyCalculationProperty(location_stack.array[location_stack.top-1]); }
        break;
      case 51: // CalculationPropertyFormatType -> KWSCIENTIFIC 
{ SpecifyCalculationProperty(location_stack.array[location_stack.top-1]); }
        break;
      case 52: // CalculationPropertyFormatType -> KWCURRENCY 
{ SpecifyCalculationProperty(location_stack.array[location_stack.top-1]); }
        break;
      case 53: // CalculationPropertyFormatType -> KWDATETIMECUSTOM 
{ SpecifyCalculationProperty(location_stack.array[location_stack.top-1]); }
        break;
      case 54: // CalculationPropertyFormatType -> KWDATETIMESHORTDATEPATTERN 
{ SpecifyCalculationProperty(location_stack.array[location_stack.top-1]); }
        break;
      case 55: // CalculationPropertyFormatType -> KWDATETIMEGENERAL 
{ SpecifyCalculationProperty(location_stack.array[location_stack.top-1]); }
        break;
      case 56: // CalculationPropertyFormatType -> KWTEXT 
{ SpecifyCalculationProperty(location_stack.array[location_stack.top-1]); }
        break;
      case 57: // CalculationPropertyAccuracy -> KWACCURACY EQ NUMBER 
{ SpecifyCalcPropAccuracy(location_stack.array[location_stack.top-1]); }
        break;
      case 58: // CalculationPropertyAccuracy -> KWACCURACY error 
{ CallHdlr("'=' is not specified", location_stack.array[location_stack.top-1]); }
        break;
      case 59: // CalculationPropertyAccuracy -> KWACCURACY EQ error 
{ CallHdlr("Value of Accuracy is not a number", location_stack.array[location_stack.top-1]); }
        break;
      case 60: // CalculationPropertyVisible -> KWVISIBLE EQ KWTRUE 
{ SpecifyCalcPropIsHidden(false); }
        break;
      case 61: // CalculationPropertyVisible -> KWVISIBLE EQ KWFALSE 
{ SpecifyCalcPropIsHidden(true); }
        break;
      case 62: // CalculationPropertyVisible -> KWVISIBLE error 
{ CallHdlr("'=' is not specified", location_stack.array[location_stack.top-1]); }
        break;
      case 63: // CalculationPropertyVisible -> KWVISIBLE EQ error 
{ CallHdlr("Visible can be either TRUE or FALSE", location_stack.array[location_stack.top-1]); }
        break;
      case 66: // CalculationPropertyDescription -> KWDESCRIPTION EQ CalculationPropertyDescriptionContent 
{ SpecifyCalcPropDescription(location_stack.array[location_stack.top-1]);  }
        break;
      case 67: // CalculationPropertyDescription -> KWDESCRIPTION error 
{ CallHdlr("'=' is not specified", location_stack.array[location_stack.top-1]); }
        break;
      case 68: // CalculationPropertyDisplayFolder -> KWDISPLAYFOLDER EQ ESCAPEDTABLENAME 
{ SpecifyCalcPropDisplayFolder(location_stack.array[location_stack.top-1]);  }
        break;
      case 69: // CalculationPropertyDisplayFolder -> KWDISPLAYFOLDER error 
{ CallHdlr("'=' is not specified", location_stack.array[location_stack.top-1]); }
        break;
      case 70: // CalculationPropertyThousandSeparator -> KWTHOUSANDSEPARATOR EQ KWTRUE 
{ SpecifyCalcPropThousandSeparator(true); }
        break;
      case 71: // CalculationPropertyThousandSeparator -> KWTHOUSANDSEPARATOR EQ KWFALSE 
{ SpecifyCalcPropThousandSeparator(false); }
        break;
      case 72: // CalculationPropertyThousandSeparator -> KWTHOUSANDSEPARATOR error 
{ CallHdlr("'=' is not specified", location_stack.array[location_stack.top-1]); }
        break;
      case 73: // CalculationPropertyThousandSeparator -> KWTHOUSANDSEPARATOR EQ error 
{ CallHdlr("ThousandSeparator can be either TRUE or FALSE", location_stack.array[location_stack.top-1]); }
        break;
      case 74: // CalculationPropertyFormat -> KWFORMAT EQ ESCAPEDTABLENAME 
{ SpecifyCalcPropFormat(location_stack.array[location_stack.top-1]); }
        break;
      case 75: // CalculationPropertyAdditionalInfo -> KWADDITIONALINFO EQ ESCAPEDTABLENAME 
{ SpecifyCalcPropAdditionalInfo(location_stack.array[location_stack.top-1]); }
        break;
      case 76: // CalculationPropertyKpiDescription -> KWKPIDESCRIPTION EQ CalculationPropertyDescriptionContent 
{ SpecifyCalcPropKpiDescription(location_stack.array[location_stack.top-1]);  }
        break;
      case 77: // CalculationPropertyKpiDescription -> KWKPIDESCRIPTION error 
{ CallHdlr("'=' is not specified", location_stack.array[location_stack.top-1]); }
        break;
      case 78: // CalculationPropertyKpiTargetFormatString -> KWKPITARGETFORMATSTRING EQ CalculationPropertyDescriptionContent 
{ SpecifyCalcPropKpiTargetFormatString(location_stack.array[location_stack.top-1]);  }
        break;
      case 79: // CalculationPropertyKpiTargetFormatString -> KWKPITARGETFORMATSTRING error 
{ CallHdlr("'=' is not specified", location_stack.array[location_stack.top-1]); }
        break;
      case 80: // CalculationPropertyKpiTargetDescription -> KWKPITARGETDESCRIPTION EQ CalculationPropertyDescriptionContent 
{ SpecifyCalcPropKpiTargetDescription(location_stack.array[location_stack.top-1]);  }
        break;
      case 81: // CalculationPropertyKpiTargetDescription -> KWKPITARGETDESCRIPTION error 
{ CallHdlr("'=' is not specified", location_stack.array[location_stack.top-1]); }
        break;
      case 82: // CalculationPropertyKpiTargetExpression -> KWKPITARGETEXPRESSION EQ Expression 
{ SpecifyCalcPropKpiTargetExpression(location_stack.array[location_stack.top-1]);  }
        break;
      case 83: // CalculationPropertyKpiTargetExpression -> KWKPITARGETEXPRESSION error 
{ CallHdlr("'=' is not specified", location_stack.array[location_stack.top-1]); }
        break;
      case 84: // CalculationPropertyKpiStatusGraphic -> KWKPISTATUSGRAPHIC EQ CalculationPropertyDescriptionContent 
{ SpecifyCalcPropKpiStatusGraphic(location_stack.array[location_stack.top-1]);  }
        break;
      case 85: // CalculationPropertyKpiStatusGraphic -> KWKPISTATUSGRAPHIC error 
{ CallHdlr("'=' is not specified", location_stack.array[location_stack.top-1]); }
        break;
      case 86: // CalculationPropertyKpiStatusDescription -> KWKPISTATUSDESCRIPTION EQ CalculationPropertyDescriptionContent 
{ SpecifyCalcPropKpiStatusDescription(location_stack.array[location_stack.top-1]);  }
        break;
      case 87: // CalculationPropertyKpiStatusDescription -> KWKPISTATUSDESCRIPTION error 
{ CallHdlr("'=' is not specified", location_stack.array[location_stack.top-1]); }
        break;
      case 88: // CalculationPropertyKpiStatusExpression -> KWKPISTATUSEXPRESSION EQ Expression 
{ SpecifyCalcPropKpiStatusExpression(location_stack.array[location_stack.top-1]);  }
        break;
      case 89: // CalculationPropertyKpiStatusExpression -> KWKPISTATUSEXPRESSION error 
{ CallHdlr("'=' is not specified", location_stack.array[location_stack.top-1]); }
        break;
      case 90: // CalculationPropertyKpiTrendGraphic -> KWKPITRENDGRAPHIC EQ CalculationPropertyDescriptionContent 
{ SpecifyCalcPropKpiTrendGraphic(location_stack.array[location_stack.top-1]);  }
        break;
      case 91: // CalculationPropertyKpiTrendGraphic -> KWKPITRENDGRAPHIC error 
{ CallHdlr("'=' is not specified", location_stack.array[location_stack.top-1]); }
        break;
      case 92: // CalculationPropertyKpiTrendDescription -> KWKPITRENDDESCRIPTION EQ CalculationPropertyDescriptionContent 
{ SpecifyCalcPropKpiTrendDescription(location_stack.array[location_stack.top-1]);  }
        break;
      case 93: // CalculationPropertyKpiTrendDescription -> KWKPITRENDDESCRIPTION error 
{ CallHdlr("'=' is not specified", location_stack.array[location_stack.top-1]); }
        break;
      case 94: // CalculationPropertyKpiTrendExpression -> KWKPITRENDEXPRESSION EQ Expression 
{ SpecifyCalcPropKpiTrendExpression(location_stack.array[location_stack.top-1]);  }
        break;
      case 95: // CalculationPropertyKpiTrendExpression -> KWKPITRENDEXPRESSION error 
{ CallHdlr("'=' is not specified", location_stack.array[location_stack.top-1]); }
        break;
      case 96: // CalculationPropertyKpiAnnotations -> KWKPIANNOTATIONS EQ ESCAPEDTABLENAME 
{ SpecifyCalcPropKpiAnnotations(location_stack.array[location_stack.top-1]);  }
        break;
      case 97: // CalculationPropertyKpiAnnotations -> KWKPIANNOTATIONS error 
{ CallHdlr("'=' is not specified", location_stack.array[location_stack.top-1]); }
        break;
      case 100: // VarDeclaration -> KWVAR error EQ Expression 
{ CallHdlr("Var name expected", location_stack.array[location_stack.top-3]); }
        break;
      case 141: // CalculationProperty -> KWCALCULATION KWPROPERTY error 
{ CallHdlr("Wrong calculation property type.  Expected types: General, NumberDecimal, NumberWhole, Percentage, Scientific, Currency, DateTimeCustom, Visible, Description, DisplayFolder", location_stack.array[location_stack.top-2]); }
        break;
      case 147: // ParamSeparator -> ',' 
{ NextParameter(location_stack.array[location_stack.top-1]); }
        break;
      case 148: // ParenthesisParameters -> StartArg EndArg 
{ Match(location_stack.array[location_stack.top-2], location_stack.array[location_stack.top-1]); }
        break;
      case 149: // ParenthesisParameters -> StartArg Params1 EndArg 
{ Match(location_stack.array[location_stack.top-3], location_stack.array[location_stack.top-1]); }
        break;
      case 150: // ParenthesisParameters -> StartArg Params1 error 
{ CallHdlr("unmatched parentheses", location_stack.array[location_stack.top-1]); }
        break;
      case 151: // ParenthesisParameters -> StartArg error EndArg 
{ yyval = value_stack.array[value_stack.top-1];
                                             CallHdlr("error in parameters", location_stack.array[location_stack.top-2]); }
        break;
      case 152: // MeasureName -> TableRef ColumnRef 
{ CreateNewMeasure(location_stack.array[location_stack.top-2], location_stack.array[location_stack.top-1]); }
        break;
      case 178: // DataTableFunction -> DataTable 
{ StartFunction(location_stack.array[location_stack.top-1], value_stack.array[value_stack.top-1].str); }
        break;
      case 194: // RankXFunction -> RankX 
{ StartFunction(location_stack.array[location_stack.top-1], value_stack.array[value_stack.top-1].str); }
        break;
      case 195: // MeasureExpression -> Expression 
{ SpecifyMeasureExpression(location_stack.array[location_stack.top-1]); }
        break;
      case 232: // ParenthesisExpression -> '(' ')' 
{ Match(location_stack.array[location_stack.top-2], location_stack.array[location_stack.top-1]); }
        break;
      case 233: // ParenthesisExpression -> '(' Params1 ')' 
{ Match(location_stack.array[location_stack.top-3], location_stack.array[location_stack.top-1]); }
        break;
      case 234: // ParenthesisExpression -> '(' Params1 error 
{ CallHdlr("unmatched parentheses", location_stack.array[location_stack.top-1]); }
        break;
      case 239: // FunctionName -> FUNCTION 
{ StartFunction(location_stack.array[location_stack.top-1], value_stack.array[value_stack.top-1].str); }
        break;
      case 240: // FunctionName -> KWCALCULATE 
{ StartFunction(location_stack.array[location_stack.top-1], value_stack.array[value_stack.top-1].str); }
        break;
      case 241: // FunctionName -> KWTRUE 
{ StartFunction(location_stack.array[location_stack.top-1], value_stack.array[value_stack.top-1].str); }
        break;
      case 242: // FunctionName -> KWFALSE 
{ StartFunction(location_stack.array[location_stack.top-1], value_stack.array[value_stack.top-1].str); }
        break;
      case 243: // FunctionName -> KWYEAR 
{ StartFunction(location_stack.array[location_stack.top-1], value_stack.array[value_stack.top-1].str); }
        break;
      case 244: // FunctionName -> KWDAY 
{ StartFunction(location_stack.array[location_stack.top-1], value_stack.array[value_stack.top-1].str); }
        break;
      case 245: // FunctionName -> KWMONTH 
{ StartFunction(location_stack.array[location_stack.top-1], value_stack.array[value_stack.top-1].str); }
        break;
      case 246: // FunctionName -> KWFORMAT 
{ StartFunction(location_stack.array[location_stack.top-1], value_stack.array[value_stack.top-1].str); }
        break;
      case 247: // FunctionName -> KWNOT 
{ StartFunction(location_stack.array[location_stack.top-1], value_stack.array[value_stack.top-1].str); }
        break;
      case 250: // StartArg -> '(' 
{
        StartParameters(location_stack.array[location_stack.top-1]);
    }
        break;
      case 251: // EndArg -> ')' 
{
        EndParameters(location_stack.array[location_stack.top-1]);
    }
        break;
    }
  }

  protected override string TerminalToString(int terminal)
  {
    if (((Tokens)terminal).ToString() != terminal.ToString())
      return ((Tokens)terminal).ToString();
    else
      return CharToString((char)terminal);
  }














}
}
