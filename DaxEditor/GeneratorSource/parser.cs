// This code was generated by the Managed Package Parser Generator


using System;
using System.Collections.Generic;
using System.Text;
using Babel.ParserGenerator;
using Microsoft.VisualStudio.TextManager.Interop;

namespace Babel.Parser
{
public enum Tokens {error=126,EOF=127,FUNCTION=128,
    NUMBER=129,STRING=130,COLUMNNAME=131,TABLENAME=132,ESCAPEDTABLENAME=133,PARTIALCOLUMNNAME=134,PARTIALTABLENAME=135,MDXCODE=136,
    KWALTER=137,KPI=138,KWEVALUATE=139,KWDEFINE=140,KWMEASURE=141,KWORDER=142,KWBY=143,KWTRUE=144,
    KWFALSE=145,KWASC=146,KWDESC=147,KWDAY=148,KWMONTH=149,KWYEAR=150,KWCREATE=151,KWCALCULATE=152,
    KWCALCULATION=153,KWPROPERTY=154,KWGENERAL=155,KWNUMBERDECIMAL=156,KWNUMBERWHOLE=157,KWPERCENTAGE=158,KWSCIENTIFIC=159,KWCURRENCY=160,
    KWDATETIMECUSTOM=161,KWDATETIMESHORTDATEPATTERN=162,KWDATETIMEGENERAL=163,KWTEXT=164,KWACCURACY=165,KWTHOUSANDSEPARATOR=166,KWFORMAT=167,KWADDITIONALINFO=168,
    KWKPI=169,KWVISIBLE=170,KWDESCRIPTION=171,KWDISPLAYFOLDER=172,KWVAR=173,KWRETURN=174,KWDATATABLE=175,KWBOOLEAN=176,
    KWDATETIME=177,KWDOUBLE=178,KWINTEGER=179,KWSTRING=180,KWRANKX=181,KWSKIP=182,KWDENSE=183,KWNOT=184,
    KWAS=185,KWASSOCIATED_MEASURE_GROUP=186,KWGOAL=187,KWSTATUS=188,KWSTATUS_GRAPHIC=189,KWTREND=190,KWTREND_GRAPHIC=191,KWKPIDESCRIPTION=192,
    KWKPITARGETFORMATSTRING=193,KWKPITARGETDESCRIPTION=194,KWKPITARGETEXPRESSION=195,KWKPISTATUSGRAPHIC=196,KWKPISTATUSDESCRIPTION=197,KWKPISTATUSEXPRESSION=198,KWKPITRENDGRAPHIC=199,KWKPITRENDDESCRIPTION=200,
    KWKPITRENDEXPRESSION=201,KWKPIANNOTATIONS=202,EQ=203,NEQ=204,GT=205,GTE=206,LT=207,LTE=208,
    POW=209,AMPAMP=210,BARBAR=211,LEFTSQUAREBRACKET=212,RIGHTSQUAREBRACKET=213,maxParseToken=214,LEX_WHITE=215,LEX_COMMENT=216,
    LEX_ERROR=217};

public partial struct LexValue
{
    public string str;
}
// Abstract base class for MPLEX scanners
public abstract class ScanBase : AScanner<LexValue,LexLocation> {
    protected abstract int CurrentSc { get; set; }
    //
    // Override the virtual EolState property if the scanner state is more
    // complicated then a simple copy of the current start state ordinal
    //
    public virtual int EolState { get { return CurrentSc; } set { CurrentSc = value; } }
}

public partial class Parser: ShiftReduceParser<LexValue, LexLocation>
{

    ErrorHandler handler = null;
    public void SetHandler(ErrorHandler hdlr) { handler = hdlr; }
    internal void CallHdlr(string msg, LexLocation val)
    {
        handler.AddError(msg, val.sLin, val.sCol, val.eCol - val.sCol);
    }

    internal TextSpan MkTSpan(LexLocation s)
    {
        TextSpan ts;
        ts.iStartLine = s.sLin;
        ts.iStartIndex = s.sCol;
        ts.iEndLine = s.eLin;
        ts.iEndIndex = s.eCol;
        return ts;
    }

    internal void Match(LexLocation lh, LexLocation rh)
    {
        DefineMatch(MkTSpan(lh), MkTSpan(rh));
    }

    internal void StartFunction(LexLocation s, string token)
    {
        System.Diagnostics.Debug.WriteLine("StartName:" + token);
        Sink.StartName(MkTSpan(s), token); 
    }

    internal void StartParameters(LexLocation s)
    {
        System.Diagnostics.Debug.WriteLine("StartParameters");
        Sink.StartParameters(MkTSpan(s)); 
    }

    internal void EndParameters(LexLocation s)
    {
        System.Diagnostics.Debug.WriteLine("EndParameters");
        Sink.EndParameters(MkTSpan(s));
    }

    internal void NextParameter(LexLocation s)
    {
        System.Diagnostics.Debug.WriteLine("Next Parameter");
        Sink.NextParameter(MkTSpan(s));
    }
  protected override void Initialize()
  {
    this.errToken = (int)Tokens.error;
    this.eofToken = (int)Tokens.EOF;

    states=new State[388];
    AddState(0,new State(new int[]{140,5,139,178,203,182,151,189,152,383,137,385,127,387},new int[]{-1,1,-3,3,-10,181,-5,184,-12,185,-13,188,-14,380,-15,381,-16,382,-17,384,-6,386}));
    AddState(1,new State(new int[]{127,2}));
    AddState(2,new State(-1));
    AddState(3,new State(new int[]{140,5,139,178,127,-2},new int[]{-10,4}));
    AddState(4,new State(-14));
    AddState(5,new State(new int[]{141,169},new int[]{-11,6}));
    AddState(6,new State(new int[]{139,7}));
    AddState(7,new State(new int[]{132,36,133,37,128,38,175,41,131,35,152,72,144,73,145,74,150,75,148,76,149,77,167,78,184,79,181,92,40,24,129,118,130,119,33,123,45,124,43,125,173,131},new int[]{-4,8,-70,17,-92,18,-90,32,-88,21,-85,22,-83,33,-82,39,-81,40,-74,57,-73,58,-66,59,-72,115,-71,91,-86,116,-87,117,-84,120,-89,121,-55,126,-54,127,-53,130}));
    AddState(8,new State(new int[]{142,10,140,-16,139,-16,127,-16},new int[]{-9,9}));
    AddState(9,new State(-15));
    AddState(10,new State(new int[]{143,11}));
    AddState(11,new State(new int[]{132,36,133,37,128,38,175,41,131,35,152,72,144,73,145,74,150,75,148,76,149,77,167,78,184,79,181,92,40,24,129,118,130,119,33,123,45,124,43,125,173,131},new int[]{-8,12,-4,13,-70,17,-92,18,-90,32,-88,21,-85,22,-83,33,-82,39,-81,40,-74,57,-73,58,-66,59,-72,115,-71,91,-86,116,-87,117,-84,120,-89,121,-55,126,-54,127,-53,130}));
    AddState(12,new State(-12));
    AddState(13,new State(new int[]{44,165,146,167,147,168,140,-11,139,-11,127,-11},new int[]{-7,14}));
    AddState(14,new State(new int[]{44,15,140,-10,139,-10,127,-10}));
    AddState(15,new State(new int[]{132,36,133,37,128,38,175,41,131,35,152,72,144,73,145,74,150,75,148,76,149,77,167,78,184,79,181,92,40,24,129,118,130,119,33,123,45,124,43,125,173,131},new int[]{-8,16,-4,13,-70,17,-92,18,-90,32,-88,21,-85,22,-83,33,-82,39,-81,40,-74,57,-73,58,-66,59,-72,115,-71,91,-86,116,-87,117,-84,120,-89,121,-55,126,-54,127,-53,130}));
    AddState(16,new State(-8));
    AddState(17,new State(-265));
    AddState(18,new State(new int[]{43,152,45,153,42,154,47,155,210,156,211,157,38,158,205,159,206,160,207,161,208,162,203,163,204,164,142,-264,140,-264,139,-264,127,-264,44,-264,146,-264,147,-264,41,-264,126,-264,125,-264,174,-264,173,-264,141,-264,153,-264,59,-264,170,-264,165,-264,166,-264,167,-264,168,-264,171,-264,172,-264,192,-264,193,-264,194,-264,195,-264,196,-264,197,-264,198,-264,199,-264,200,-264,201,-264,202,-264},new int[]{-91,19}));
    AddState(19,new State(new int[]{132,36,133,37,128,38,175,41,131,35,152,72,144,73,145,74,150,75,148,76,149,77,167,78,184,79,181,92,40,24,129,118,130,119,33,123,45,124,43,125},new int[]{-90,20,-88,21,-85,22,-83,33,-82,39,-81,40,-74,57,-73,58,-66,59,-72,115,-71,91,-86,116,-87,117,-84,120,-89,121}));
    AddState(20,new State(-263));
    AddState(21,new State(-247));
    AddState(22,new State(new int[]{40,24,43,-232,45,-232,42,-232,47,-232,210,-232,211,-232,38,-232,205,-232,206,-232,207,-232,208,-232,203,-232,204,-232,142,-232,140,-232,139,-232,127,-232,44,-232,146,-232,147,-232,41,-232,126,-232,125,-232,174,-232,173,-232,141,-232,153,-232,59,-232,170,-232,165,-232,166,-232,167,-232,168,-232,171,-232,172,-232,192,-232,193,-232,194,-232,195,-232,196,-232,197,-232,198,-232,199,-232,200,-232,201,-232,202,-232},new int[]{-86,23}));
    AddState(23,new State(-231));
    AddState(24,new State(new int[]{41,25,132,36,133,37,128,38,175,41,131,35,152,72,144,73,145,74,150,75,148,76,149,77,167,78,184,79,181,92,40,24,129,118,130,119,33,123,45,124,43,125,173,131},new int[]{-61,26,-60,71,-4,31,-70,17,-92,18,-90,32,-88,21,-85,22,-83,33,-82,39,-81,40,-74,57,-73,58,-66,59,-72,115,-71,91,-86,116,-87,117,-84,120,-89,121,-55,126,-54,127,-53,130}));
    AddState(25,new State(-228));
    AddState(26,new State(new int[]{41,27,126,28,44,68},new int[]{-59,29}));
    AddState(27,new State(-229));
    AddState(28,new State(-230));
    AddState(29,new State(new int[]{132,36,133,37,128,38,175,41,131,35,152,72,144,73,145,74,150,75,148,76,149,77,167,78,184,79,181,92,40,24,129,118,130,119,33,123,45,124,43,125,173,131},new int[]{-60,30,-4,31,-70,17,-92,18,-90,32,-88,21,-85,22,-83,33,-82,39,-81,40,-74,57,-73,58,-66,59,-72,115,-71,91,-86,116,-87,117,-84,120,-89,121,-55,126,-54,127,-53,130}));
    AddState(30,new State(-163));
    AddState(31,new State(-161));
    AddState(32,new State(-262));
    AddState(33,new State(new int[]{131,35,43,-222,45,-222,42,-222,47,-222,210,-222,211,-222,38,-222,205,-222,206,-222,207,-222,208,-222,203,-222,204,-222,142,-222,140,-222,139,-222,127,-222,44,-222,146,-222,147,-222,41,-222,126,-222,125,-222,174,-222,173,-222,141,-222,153,-222,59,-222,170,-222,165,-222,166,-222,167,-222,168,-222,171,-222,172,-222,192,-222,193,-222,194,-222,195,-222,196,-222,197,-222,198,-222,199,-222,200,-222,201,-222,202,-222},new int[]{-74,34}));
    AddState(34,new State(-226));
    AddState(35,new State(-200));
    AddState(36,new State(-218));
    AddState(37,new State(-219));
    AddState(38,new State(new int[]{131,-220,43,-220,45,-220,42,-220,47,-220,210,-220,211,-220,38,-220,205,-220,206,-220,207,-220,208,-220,203,-220,204,-220,142,-220,140,-220,139,-220,127,-220,44,-220,146,-220,147,-220,41,-220,126,-220,125,-220,174,-220,173,-220,141,-220,153,-220,59,-220,170,-220,165,-220,166,-220,167,-220,168,-220,171,-220,172,-220,192,-220,193,-220,194,-220,195,-220,196,-220,197,-220,198,-220,199,-220,200,-220,201,-220,202,-220,40,-171}));
    AddState(39,new State(-221));
    AddState(40,new State(-217));
    AddState(41,new State(new int[]{40,42}));
    AddState(42,new State(new int[]{130,142},new int[]{-80,43,-79,151}));
    AddState(43,new State(new int[]{44,44}));
    AddState(44,new State(new int[]{123,45,130,142},new int[]{-79,141}));
    AddState(45,new State(new int[]{123,49},new int[]{-77,46}));
    AddState(46,new State(new int[]{125,47}));
    AddState(47,new State(new int[]{41,48}));
    AddState(48,new State(-216));
    AddState(49,new State(new int[]{132,36,133,37,128,38,175,41,131,35,152,72,144,73,145,74,150,75,148,76,149,77,167,78,184,79,181,92,40,24,129,118,130,119,33,123,45,124,43,125,125,-201,44,-201},new int[]{-76,50,-75,140,-70,56,-92,18,-90,32,-88,21,-85,22,-83,33,-82,39,-81,40,-74,57,-73,58,-66,59,-72,115,-71,91,-86,116,-87,117,-84,120,-89,121}));
    AddState(50,new State(new int[]{125,51,44,54}));
    AddState(51,new State(new int[]{44,52,125,-205}));
    AddState(52,new State(new int[]{123,49},new int[]{-77,53}));
    AddState(53,new State(-206));
    AddState(54,new State(new int[]{132,36,133,37,128,38,175,41,131,35,152,72,144,73,145,74,150,75,148,76,149,77,167,78,184,79,181,92,40,24,129,118,130,119,33,123,45,124,43,125,125,-201,44,-201},new int[]{-75,55,-70,56,-92,18,-90,32,-88,21,-85,22,-83,33,-82,39,-81,40,-74,57,-73,58,-66,59,-72,115,-71,91,-86,116,-87,117,-84,120,-89,121}));
    AddState(55,new State(-204));
    AddState(56,new State(-202));
    AddState(57,new State(-227));
    AddState(58,new State(-233));
    AddState(59,new State(new int[]{40,82},new int[]{-65,60,-64,61,-62,62}));
    AddState(60,new State(-196));
    AddState(61,new State(-170));
    AddState(62,new State(new int[]{126,69,41,67,132,36,133,37,128,38,175,41,131,35,152,72,144,73,145,74,150,75,148,76,149,77,167,78,184,79,181,92,40,24,129,118,130,119,33,123,45,124,43,125,173,131},new int[]{-63,63,-61,64,-60,71,-4,31,-70,17,-92,18,-90,32,-88,21,-85,22,-83,33,-82,39,-81,40,-74,57,-73,58,-66,59,-72,115,-71,91,-86,116,-87,117,-84,120,-89,121,-55,126,-54,127,-53,130}));
    AddState(63,new State(-166));
    AddState(64,new State(new int[]{126,66,41,67,44,68},new int[]{-63,65,-59,29}));
    AddState(65,new State(-167));
    AddState(66,new State(-168));
    AddState(67,new State(-165));
    AddState(68,new State(-160));
    AddState(69,new State(new int[]{41,67},new int[]{-63,70}));
    AddState(70,new State(-169));
    AddState(71,new State(-162));
    AddState(72,new State(-172));
    AddState(73,new State(new int[]{40,-173,43,-238,45,-238,42,-238,47,-238,210,-238,211,-238,38,-238,205,-238,206,-238,207,-238,208,-238,203,-238,204,-238,142,-238,140,-238,139,-238,127,-238,44,-238,146,-238,147,-238,41,-238,126,-238,125,-238,174,-238,173,-238,141,-238,153,-238,59,-238,170,-238,165,-238,166,-238,167,-238,168,-238,171,-238,172,-238,192,-238,193,-238,194,-238,195,-238,196,-238,197,-238,198,-238,199,-238,200,-238,201,-238,202,-238}));
    AddState(74,new State(new int[]{40,-174,43,-239,45,-239,42,-239,47,-239,210,-239,211,-239,38,-239,205,-239,206,-239,207,-239,208,-239,203,-239,204,-239,142,-239,140,-239,139,-239,127,-239,44,-239,146,-239,147,-239,41,-239,126,-239,125,-239,174,-239,173,-239,141,-239,153,-239,59,-239,170,-239,165,-239,166,-239,167,-239,168,-239,171,-239,172,-239,192,-239,193,-239,194,-239,195,-239,196,-239,197,-239,198,-239,199,-239,200,-239,201,-239,202,-239}));
    AddState(75,new State(new int[]{40,-175,43,-242,45,-242,42,-242,47,-242,210,-242,211,-242,38,-242,205,-242,206,-242,207,-242,208,-242,203,-242,204,-242,142,-242,140,-242,139,-242,127,-242,44,-242,146,-242,147,-242,41,-242,126,-242,125,-242,174,-242,173,-242,141,-242,153,-242,59,-242,170,-242,165,-242,166,-242,167,-242,168,-242,171,-242,172,-242,192,-242,193,-242,194,-242,195,-242,196,-242,197,-242,198,-242,199,-242,200,-242,201,-242,202,-242}));
    AddState(76,new State(new int[]{40,-176,43,-240,45,-240,42,-240,47,-240,210,-240,211,-240,38,-240,205,-240,206,-240,207,-240,208,-240,203,-240,204,-240,142,-240,140,-240,139,-240,127,-240,44,-240,146,-240,147,-240,41,-240,126,-240,125,-240,174,-240,173,-240,141,-240,153,-240,59,-240,170,-240,165,-240,166,-240,167,-240,168,-240,171,-240,172,-240,192,-240,193,-240,194,-240,195,-240,196,-240,197,-240,198,-240,199,-240,200,-240,201,-240,202,-240}));
    AddState(77,new State(new int[]{40,-177,43,-241,45,-241,42,-241,47,-241,210,-241,211,-241,38,-241,205,-241,206,-241,207,-241,208,-241,203,-241,204,-241,142,-241,140,-241,139,-241,127,-241,44,-241,146,-241,147,-241,41,-241,126,-241,125,-241,174,-241,173,-241,141,-241,153,-241,59,-241,170,-241,165,-241,166,-241,167,-241,168,-241,171,-241,172,-241,192,-241,193,-241,194,-241,195,-241,196,-241,197,-241,198,-241,199,-241,200,-241,201,-241,202,-241}));
    AddState(78,new State(-178));
    AddState(79,new State(new int[]{128,84,152,72,144,85,145,86,150,87,148,88,149,89,167,78,184,90,181,92,40,-179},new int[]{-66,80,-72,83,-71,91}));
    AddState(80,new State(new int[]{40,82},new int[]{-65,81,-64,61,-62,62}));
    AddState(81,new State(-198));
    AddState(82,new State(-164));
    AddState(83,new State(-199));
    AddState(84,new State(-171));
    AddState(85,new State(-173));
    AddState(86,new State(-174));
    AddState(87,new State(-175));
    AddState(88,new State(-176));
    AddState(89,new State(-177));
    AddState(90,new State(-179));
    AddState(91,new State(-195));
    AddState(92,new State(new int[]{40,93}));
    AddState(93,new State(new int[]{132,36,133,37,128,38,175,41,131,35,152,72,144,73,145,74,150,75,148,76,149,77,167,78,184,79,181,92,40,24,129,118,130,119,33,123,45,124,43,125,173,131},new int[]{-4,94,-70,17,-92,18,-90,32,-88,21,-85,22,-83,33,-82,39,-81,40,-74,57,-73,58,-66,59,-72,115,-71,91,-86,116,-87,117,-84,120,-89,121,-55,126,-54,127,-53,130}));
    AddState(94,new State(new int[]{44,95}));
    AddState(95,new State(new int[]{132,36,133,37,128,38,175,41,131,35,152,72,144,73,145,74,150,75,148,76,149,77,167,78,184,79,181,92,40,24,129,118,130,119,33,123,45,124,43,125,173,131},new int[]{-4,96,-70,17,-92,18,-90,32,-88,21,-85,22,-83,33,-82,39,-81,40,-74,57,-73,58,-66,59,-72,115,-71,91,-86,116,-87,117,-84,120,-89,121,-55,126,-54,127,-53,130}));
    AddState(96,new State(new int[]{41,97,44,98}));
    AddState(97,new State(-191));
    AddState(98,new State(new int[]{132,36,133,37,128,38,175,41,131,35,152,72,144,73,145,74,150,75,148,76,149,77,167,78,184,79,181,92,40,24,129,118,130,119,33,123,45,124,43,125,41,-189,44,-189},new int[]{-69,99,-70,114,-92,18,-90,32,-88,21,-85,22,-83,33,-82,39,-81,40,-74,57,-73,58,-66,59,-72,115,-71,91,-86,116,-87,117,-84,120,-89,121}));
    AddState(99,new State(new int[]{41,100,44,101}));
    AddState(100,new State(-192));
    AddState(101,new State(new int[]{129,109,144,110,145,111,146,112,147,113,41,-183,44,-183},new int[]{-68,102}));
    AddState(102,new State(new int[]{41,103,44,104}));
    AddState(103,new State(-193));
    AddState(104,new State(new int[]{182,107,183,108,41,-180},new int[]{-67,105}));
    AddState(105,new State(new int[]{41,106}));
    AddState(106,new State(-194));
    AddState(107,new State(-181));
    AddState(108,new State(-182));
    AddState(109,new State(-184));
    AddState(110,new State(-185));
    AddState(111,new State(-186));
    AddState(112,new State(-187));
    AddState(113,new State(-188));
    AddState(114,new State(-190));
    AddState(115,new State(-197));
    AddState(116,new State(-234));
    AddState(117,new State(-235));
    AddState(118,new State(-236));
    AddState(119,new State(-237));
    AddState(120,new State(-243));
    AddState(121,new State(new int[]{132,36,133,37,128,38,175,41,131,35,152,72,144,73,145,74,150,75,148,76,149,77,167,78,184,79,181,92,40,24,129,118,130,119,33,123,45,124,43,125},new int[]{-90,122,-88,21,-85,22,-83,33,-82,39,-81,40,-74,57,-73,58,-66,59,-72,115,-71,91,-86,116,-87,117,-84,120,-89,121}));
    AddState(122,new State(-248));
    AddState(123,new State(-244));
    AddState(124,new State(-245));
    AddState(125,new State(-246));
    AddState(126,new State(-266));
    AddState(127,new State(new int[]{174,128,173,131},new int[]{-53,139}));
    AddState(128,new State(new int[]{132,36,133,37,128,38,175,41,131,35,152,72,144,73,145,74,150,75,148,76,149,77,167,78,184,79,181,92,40,24,129,118,130,119,33,123,45,124,43,125,173,131},new int[]{-4,129,-70,17,-92,18,-90,32,-88,21,-85,22,-83,33,-82,39,-81,40,-74,57,-73,58,-66,59,-72,115,-71,91,-86,116,-87,117,-84,120,-89,121,-55,126,-54,127,-53,130}));
    AddState(129,new State(-117));
    AddState(130,new State(-115));
    AddState(131,new State(new int[]{126,135,132,138},new int[]{-52,132}));
    AddState(132,new State(new int[]{203,133}));
    AddState(133,new State(new int[]{132,36,133,37,128,38,175,41,131,35,152,72,144,73,145,74,150,75,148,76,149,77,167,78,184,79,181,92,40,24,129,118,130,119,33,123,45,124,43,125,173,131},new int[]{-4,134,-70,17,-92,18,-90,32,-88,21,-85,22,-83,33,-82,39,-81,40,-74,57,-73,58,-66,59,-72,115,-71,91,-86,116,-87,117,-84,120,-89,121,-55,126,-54,127,-53,130}));
    AddState(134,new State(-113));
    AddState(135,new State(new int[]{203,136}));
    AddState(136,new State(new int[]{132,36,133,37,128,38,175,41,131,35,152,72,144,73,145,74,150,75,148,76,149,77,167,78,184,79,181,92,40,24,129,118,130,119,33,123,45,124,43,125,173,131},new int[]{-4,137,-70,17,-92,18,-90,32,-88,21,-85,22,-83,33,-82,39,-81,40,-74,57,-73,58,-66,59,-72,115,-71,91,-86,116,-87,117,-84,120,-89,121,-55,126,-54,127,-53,130}));
    AddState(137,new State(-114));
    AddState(138,new State(-112));
    AddState(139,new State(-116));
    AddState(140,new State(-203));
    AddState(141,new State(-215));
    AddState(142,new State(new int[]{44,143}));
    AddState(143,new State(new int[]{176,145,160,146,177,147,178,148,179,149,180,150},new int[]{-78,144}));
    AddState(144,new State(-213));
    AddState(145,new State(-207));
    AddState(146,new State(-208));
    AddState(147,new State(-209));
    AddState(148,new State(-210));
    AddState(149,new State(-211));
    AddState(150,new State(-212));
    AddState(151,new State(-214));
    AddState(152,new State(-249));
    AddState(153,new State(-250));
    AddState(154,new State(-251));
    AddState(155,new State(-252));
    AddState(156,new State(-253));
    AddState(157,new State(-254));
    AddState(158,new State(-255));
    AddState(159,new State(-256));
    AddState(160,new State(-257));
    AddState(161,new State(-258));
    AddState(162,new State(-259));
    AddState(163,new State(-260));
    AddState(164,new State(-261));
    AddState(165,new State(new int[]{132,36,133,37,128,38,175,41,131,35,152,72,144,73,145,74,150,75,148,76,149,77,167,78,184,79,181,92,40,24,129,118,130,119,33,123,45,124,43,125,173,131},new int[]{-8,166,-4,13,-70,17,-92,18,-90,32,-88,21,-85,22,-83,33,-82,39,-81,40,-74,57,-73,58,-66,59,-72,115,-71,91,-86,116,-87,117,-84,120,-89,121,-55,126,-54,127,-53,130}));
    AddState(166,new State(-9));
    AddState(167,new State(-6));
    AddState(168,new State(-7));
    AddState(169,new State(new int[]{132,36,133,37,128,177,175,41},new int[]{-58,170,-83,175,-82,39,-81,40}));
    AddState(170,new State(new int[]{203,171}));
    AddState(171,new State(new int[]{132,36,133,37,128,38,175,41,131,35,152,72,144,73,145,74,150,75,148,76,149,77,167,78,184,79,181,92,40,24,129,118,130,119,33,123,45,124,43,125,173,131},new int[]{-57,172,-4,174,-70,17,-92,18,-90,32,-88,21,-85,22,-83,33,-82,39,-81,40,-74,57,-73,58,-66,59,-72,115,-71,91,-86,116,-87,117,-84,120,-89,121,-55,126,-54,127,-53,130}));
    AddState(172,new State(new int[]{141,169,139,-158},new int[]{-11,173}));
    AddState(173,new State(-159));
    AddState(174,new State(-157));
    AddState(175,new State(new int[]{131,35},new int[]{-74,176}));
    AddState(176,new State(-225));
    AddState(177,new State(-220));
    AddState(178,new State(new int[]{132,36,133,37,128,38,175,41,131,35,152,72,144,73,145,74,150,75,148,76,149,77,167,78,184,79,181,92,40,24,129,118,130,119,33,123,45,124,43,125,173,131},new int[]{-4,179,-70,17,-92,18,-90,32,-88,21,-85,22,-83,33,-82,39,-81,40,-74,57,-73,58,-66,59,-72,115,-71,91,-86,116,-87,117,-84,120,-89,121,-55,126,-54,127,-53,130}));
    AddState(179,new State(new int[]{142,10,140,-18,139,-18,127,-18},new int[]{-9,180}));
    AddState(180,new State(-17));
    AddState(181,new State(-13));
    AddState(182,new State(new int[]{132,36,133,37,128,38,175,41,131,35,152,72,144,73,145,74,150,75,148,76,149,77,167,78,184,79,181,92,40,24,129,118,130,119,33,123,45,124,43,125,173,131},new int[]{-4,183,-70,17,-92,18,-90,32,-88,21,-85,22,-83,33,-82,39,-81,40,-74,57,-73,58,-66,59,-72,115,-71,91,-86,116,-87,117,-84,120,-89,121,-55,126,-54,127,-53,130}));
    AddState(183,new State(-3));
    AddState(184,new State(-4));
    AddState(185,new State(new int[]{59,186,127,-24}));
    AddState(186,new State(new int[]{151,189,152,383,137,385,127,-25},new int[]{-5,187,-12,185,-13,188,-14,380,-15,381,-16,382,-17,384}));
    AddState(187,new State(-26));
    AddState(188,new State(-19));
    AddState(189,new State(new int[]{141,190,169,335,136,379}));
    AddState(190,new State(new int[]{126,324,132,332,131,333,133,37,128,177,175,41},new int[]{-20,191,-18,327,-21,334,-83,330,-82,39,-81,40}));
    AddState(191,new State(new int[]{203,192}));
    AddState(192,new State(new int[]{132,36,133,37,128,38,175,41,131,35,152,72,144,73,145,74,150,75,148,76,149,77,167,78,184,79,181,92,40,24,129,118,130,119,33,123,45,124,43,125,173,131},new int[]{-19,193,-4,323,-70,17,-92,18,-90,32,-88,21,-85,22,-83,33,-82,39,-81,40,-74,57,-73,58,-66,59,-72,115,-71,91,-86,116,-87,117,-84,120,-89,121,-55,126,-54,127,-53,130}));
    AddState(193,new State(new int[]{153,195,59,-33,127,-33},new int[]{-22,194}));
    AddState(194,new State(-34));
    AddState(195,new State(new int[]{154,196}));
    AddState(196,new State(new int[]{126,312,155,313,156,314,157,315,158,316,159,317,160,318,161,319,162,320,163,321,164,322},new int[]{-32,197}));
    AddState(197,new State(new int[]{170,201,165,209,166,216,167,224,168,229,171,234,172,242,192,248,193,254,194,260,195,266,196,272,197,278,198,284,199,290,200,296,201,302,202,308,59,-154,127,-154},new int[]{-56,198,-34,199,-33,207,-38,214,-39,222,-40,227,-36,232,-37,240,-41,246,-42,252,-43,258,-44,264,-45,270,-46,276,-47,282,-48,288,-49,294,-50,300,-51,306}));
    AddState(198,new State(-156));
    AddState(199,new State(new int[]{170,201,165,209,166,216,167,224,168,229,171,234,172,242,192,248,193,254,194,260,195,266,196,272,197,278,198,284,199,290,200,296,201,302,202,308,59,-118,127,-118},new int[]{-56,200,-34,199,-33,207,-38,214,-39,222,-40,227,-36,232,-37,240,-41,246,-42,252,-43,258,-44,264,-45,270,-46,276,-47,282,-48,288,-49,294,-50,300,-51,306}));
    AddState(200,new State(-119));
    AddState(201,new State(new int[]{203,202,126,206}));
    AddState(202,new State(new int[]{144,203,145,204,126,205}));
    AddState(203,new State(-74));
    AddState(204,new State(-75));
    AddState(205,new State(-77));
    AddState(206,new State(-76));
    AddState(207,new State(new int[]{170,201,165,209,166,216,167,224,168,229,171,234,172,242,192,248,193,254,194,260,195,266,196,272,197,278,198,284,199,290,200,296,201,302,202,308,59,-120,127,-120},new int[]{-56,208,-34,199,-33,207,-38,214,-39,222,-40,227,-36,232,-37,240,-41,246,-42,252,-43,258,-44,264,-45,270,-46,276,-47,282,-48,288,-49,294,-50,300,-51,306}));
    AddState(208,new State(-121));
    AddState(209,new State(new int[]{203,210,126,213}));
    AddState(210,new State(new int[]{129,211,126,212}));
    AddState(211,new State(-71));
    AddState(212,new State(-73));
    AddState(213,new State(-72));
    AddState(214,new State(new int[]{170,201,165,209,166,216,167,224,168,229,171,234,172,242,192,248,193,254,194,260,195,266,196,272,197,278,198,284,199,290,200,296,201,302,202,308,59,-122,127,-122},new int[]{-56,215,-34,199,-33,207,-38,214,-39,222,-40,227,-36,232,-37,240,-41,246,-42,252,-43,258,-44,264,-45,270,-46,276,-47,282,-48,288,-49,294,-50,300,-51,306}));
    AddState(215,new State(-123));
    AddState(216,new State(new int[]{203,217,126,221}));
    AddState(217,new State(new int[]{144,218,145,219,126,220}));
    AddState(218,new State(-84));
    AddState(219,new State(-85));
    AddState(220,new State(-87));
    AddState(221,new State(-86));
    AddState(222,new State(new int[]{170,201,165,209,166,216,167,224,168,229,171,234,172,242,192,248,193,254,194,260,195,266,196,272,197,278,198,284,199,290,200,296,201,302,202,308,59,-124,127,-124},new int[]{-56,223,-34,199,-33,207,-38,214,-39,222,-40,227,-36,232,-37,240,-41,246,-42,252,-43,258,-44,264,-45,270,-46,276,-47,282,-48,288,-49,294,-50,300,-51,306}));
    AddState(223,new State(-125));
    AddState(224,new State(new int[]{203,225}));
    AddState(225,new State(new int[]{133,226}));
    AddState(226,new State(-88));
    AddState(227,new State(new int[]{170,201,165,209,166,216,167,224,168,229,171,234,172,242,192,248,193,254,194,260,195,266,196,272,197,278,198,284,199,290,200,296,201,302,202,308,59,-126,127,-126},new int[]{-56,228,-34,199,-33,207,-38,214,-39,222,-40,227,-36,232,-37,240,-41,246,-42,252,-43,258,-44,264,-45,270,-46,276,-47,282,-48,288,-49,294,-50,300,-51,306}));
    AddState(228,new State(-127));
    AddState(229,new State(new int[]{203,230}));
    AddState(230,new State(new int[]{133,231}));
    AddState(231,new State(-89));
    AddState(232,new State(new int[]{170,201,165,209,166,216,167,224,168,229,171,234,172,242,192,248,193,254,194,260,195,266,196,272,197,278,198,284,199,290,200,296,201,302,202,308,59,-128,127,-128},new int[]{-56,233,-34,199,-33,207,-38,214,-39,222,-40,227,-36,232,-37,240,-41,246,-42,252,-43,258,-44,264,-45,270,-46,276,-47,282,-48,288,-49,294,-50,300,-51,306}));
    AddState(233,new State(-129));
    AddState(234,new State(new int[]{203,235,126,239}));
    AddState(235,new State(new int[]{133,237,130,238},new int[]{-35,236}));
    AddState(236,new State(-80));
    AddState(237,new State(-78));
    AddState(238,new State(-79));
    AddState(239,new State(-81));
    AddState(240,new State(new int[]{170,201,165,209,166,216,167,224,168,229,171,234,172,242,192,248,193,254,194,260,195,266,196,272,197,278,198,284,199,290,200,296,201,302,202,308,59,-130,127,-130},new int[]{-56,241,-34,199,-33,207,-38,214,-39,222,-40,227,-36,232,-37,240,-41,246,-42,252,-43,258,-44,264,-45,270,-46,276,-47,282,-48,288,-49,294,-50,300,-51,306}));
    AddState(241,new State(-131));
    AddState(242,new State(new int[]{203,243,126,245}));
    AddState(243,new State(new int[]{133,244}));
    AddState(244,new State(-82));
    AddState(245,new State(-83));
    AddState(246,new State(new int[]{170,201,165,209,166,216,167,224,168,229,171,234,172,242,192,248,193,254,194,260,195,266,196,272,197,278,198,284,199,290,200,296,201,302,202,308,59,-132,127,-132},new int[]{-56,247,-34,199,-33,207,-38,214,-39,222,-40,227,-36,232,-37,240,-41,246,-42,252,-43,258,-44,264,-45,270,-46,276,-47,282,-48,288,-49,294,-50,300,-51,306}));
    AddState(247,new State(-133));
    AddState(248,new State(new int[]{203,249,126,251}));
    AddState(249,new State(new int[]{133,237,130,238},new int[]{-35,250}));
    AddState(250,new State(-90));
    AddState(251,new State(-91));
    AddState(252,new State(new int[]{170,201,165,209,166,216,167,224,168,229,171,234,172,242,192,248,193,254,194,260,195,266,196,272,197,278,198,284,199,290,200,296,201,302,202,308,59,-134,127,-134},new int[]{-56,253,-34,199,-33,207,-38,214,-39,222,-40,227,-36,232,-37,240,-41,246,-42,252,-43,258,-44,264,-45,270,-46,276,-47,282,-48,288,-49,294,-50,300,-51,306}));
    AddState(253,new State(-135));
    AddState(254,new State(new int[]{203,255,126,257}));
    AddState(255,new State(new int[]{133,237,130,238},new int[]{-35,256}));
    AddState(256,new State(-92));
    AddState(257,new State(-93));
    AddState(258,new State(new int[]{170,201,165,209,166,216,167,224,168,229,171,234,172,242,192,248,193,254,194,260,195,266,196,272,197,278,198,284,199,290,200,296,201,302,202,308,59,-136,127,-136},new int[]{-56,259,-34,199,-33,207,-38,214,-39,222,-40,227,-36,232,-37,240,-41,246,-42,252,-43,258,-44,264,-45,270,-46,276,-47,282,-48,288,-49,294,-50,300,-51,306}));
    AddState(259,new State(-137));
    AddState(260,new State(new int[]{203,261,126,263}));
    AddState(261,new State(new int[]{133,237,130,238},new int[]{-35,262}));
    AddState(262,new State(-94));
    AddState(263,new State(-95));
    AddState(264,new State(new int[]{170,201,165,209,166,216,167,224,168,229,171,234,172,242,192,248,193,254,194,260,195,266,196,272,197,278,198,284,199,290,200,296,201,302,202,308,59,-138,127,-138},new int[]{-56,265,-34,199,-33,207,-38,214,-39,222,-40,227,-36,232,-37,240,-41,246,-42,252,-43,258,-44,264,-45,270,-46,276,-47,282,-48,288,-49,294,-50,300,-51,306}));
    AddState(265,new State(-139));
    AddState(266,new State(new int[]{203,267,126,269}));
    AddState(267,new State(new int[]{132,36,133,37,128,38,175,41,131,35,152,72,144,73,145,74,150,75,148,76,149,77,167,78,184,79,181,92,40,24,129,118,130,119,33,123,45,124,43,125,173,131},new int[]{-4,268,-70,17,-92,18,-90,32,-88,21,-85,22,-83,33,-82,39,-81,40,-74,57,-73,58,-66,59,-72,115,-71,91,-86,116,-87,117,-84,120,-89,121,-55,126,-54,127,-53,130}));
    AddState(268,new State(-96));
    AddState(269,new State(-97));
    AddState(270,new State(new int[]{170,201,165,209,166,216,167,224,168,229,171,234,172,242,192,248,193,254,194,260,195,266,196,272,197,278,198,284,199,290,200,296,201,302,202,308,59,-140,127,-140},new int[]{-56,271,-34,199,-33,207,-38,214,-39,222,-40,227,-36,232,-37,240,-41,246,-42,252,-43,258,-44,264,-45,270,-46,276,-47,282,-48,288,-49,294,-50,300,-51,306}));
    AddState(271,new State(-141));
    AddState(272,new State(new int[]{203,273,126,275}));
    AddState(273,new State(new int[]{133,237,130,238},new int[]{-35,274}));
    AddState(274,new State(-98));
    AddState(275,new State(-99));
    AddState(276,new State(new int[]{170,201,165,209,166,216,167,224,168,229,171,234,172,242,192,248,193,254,194,260,195,266,196,272,197,278,198,284,199,290,200,296,201,302,202,308,59,-142,127,-142},new int[]{-56,277,-34,199,-33,207,-38,214,-39,222,-40,227,-36,232,-37,240,-41,246,-42,252,-43,258,-44,264,-45,270,-46,276,-47,282,-48,288,-49,294,-50,300,-51,306}));
    AddState(277,new State(-143));
    AddState(278,new State(new int[]{203,279,126,281}));
    AddState(279,new State(new int[]{133,237,130,238},new int[]{-35,280}));
    AddState(280,new State(-100));
    AddState(281,new State(-101));
    AddState(282,new State(new int[]{170,201,165,209,166,216,167,224,168,229,171,234,172,242,192,248,193,254,194,260,195,266,196,272,197,278,198,284,199,290,200,296,201,302,202,308,59,-144,127,-144},new int[]{-56,283,-34,199,-33,207,-38,214,-39,222,-40,227,-36,232,-37,240,-41,246,-42,252,-43,258,-44,264,-45,270,-46,276,-47,282,-48,288,-49,294,-50,300,-51,306}));
    AddState(283,new State(-145));
    AddState(284,new State(new int[]{203,285,126,287}));
    AddState(285,new State(new int[]{132,36,133,37,128,38,175,41,131,35,152,72,144,73,145,74,150,75,148,76,149,77,167,78,184,79,181,92,40,24,129,118,130,119,33,123,45,124,43,125,173,131},new int[]{-4,286,-70,17,-92,18,-90,32,-88,21,-85,22,-83,33,-82,39,-81,40,-74,57,-73,58,-66,59,-72,115,-71,91,-86,116,-87,117,-84,120,-89,121,-55,126,-54,127,-53,130}));
    AddState(286,new State(-102));
    AddState(287,new State(-103));
    AddState(288,new State(new int[]{170,201,165,209,166,216,167,224,168,229,171,234,172,242,192,248,193,254,194,260,195,266,196,272,197,278,198,284,199,290,200,296,201,302,202,308,59,-146,127,-146},new int[]{-56,289,-34,199,-33,207,-38,214,-39,222,-40,227,-36,232,-37,240,-41,246,-42,252,-43,258,-44,264,-45,270,-46,276,-47,282,-48,288,-49,294,-50,300,-51,306}));
    AddState(289,new State(-147));
    AddState(290,new State(new int[]{203,291,126,293}));
    AddState(291,new State(new int[]{133,237,130,238},new int[]{-35,292}));
    AddState(292,new State(-104));
    AddState(293,new State(-105));
    AddState(294,new State(new int[]{170,201,165,209,166,216,167,224,168,229,171,234,172,242,192,248,193,254,194,260,195,266,196,272,197,278,198,284,199,290,200,296,201,302,202,308,59,-148,127,-148},new int[]{-56,295,-34,199,-33,207,-38,214,-39,222,-40,227,-36,232,-37,240,-41,246,-42,252,-43,258,-44,264,-45,270,-46,276,-47,282,-48,288,-49,294,-50,300,-51,306}));
    AddState(295,new State(-149));
    AddState(296,new State(new int[]{203,297,126,299}));
    AddState(297,new State(new int[]{133,237,130,238},new int[]{-35,298}));
    AddState(298,new State(-106));
    AddState(299,new State(-107));
    AddState(300,new State(new int[]{170,201,165,209,166,216,167,224,168,229,171,234,172,242,192,248,193,254,194,260,195,266,196,272,197,278,198,284,199,290,200,296,201,302,202,308,59,-150,127,-150},new int[]{-56,301,-34,199,-33,207,-38,214,-39,222,-40,227,-36,232,-37,240,-41,246,-42,252,-43,258,-44,264,-45,270,-46,276,-47,282,-48,288,-49,294,-50,300,-51,306}));
    AddState(301,new State(-151));
    AddState(302,new State(new int[]{203,303,126,305}));
    AddState(303,new State(new int[]{132,36,133,37,128,38,175,41,131,35,152,72,144,73,145,74,150,75,148,76,149,77,167,78,184,79,181,92,40,24,129,118,130,119,33,123,45,124,43,125,173,131},new int[]{-4,304,-70,17,-92,18,-90,32,-88,21,-85,22,-83,33,-82,39,-81,40,-74,57,-73,58,-66,59,-72,115,-71,91,-86,116,-87,117,-84,120,-89,121,-55,126,-54,127,-53,130}));
    AddState(304,new State(-108));
    AddState(305,new State(-109));
    AddState(306,new State(new int[]{170,201,165,209,166,216,167,224,168,229,171,234,172,242,192,248,193,254,194,260,195,266,196,272,197,278,198,284,199,290,200,296,201,302,202,308,59,-152,127,-152},new int[]{-56,307,-34,199,-33,207,-38,214,-39,222,-40,227,-36,232,-37,240,-41,246,-42,252,-43,258,-44,264,-45,270,-46,276,-47,282,-48,288,-49,294,-50,300,-51,306}));
    AddState(307,new State(-153));
    AddState(308,new State(new int[]{203,309,126,311}));
    AddState(309,new State(new int[]{133,310}));
    AddState(310,new State(-110));
    AddState(311,new State(-111));
    AddState(312,new State(-155));
    AddState(313,new State(-61));
    AddState(314,new State(-62));
    AddState(315,new State(-63));
    AddState(316,new State(-64));
    AddState(317,new State(-65));
    AddState(318,new State(-66));
    AddState(319,new State(-67));
    AddState(320,new State(-68));
    AddState(321,new State(-69));
    AddState(322,new State(-70));
    AddState(323,new State(-30));
    AddState(324,new State(new int[]{203,325}));
    AddState(325,new State(new int[]{132,36,133,37,128,38,175,41,131,35,152,72,144,73,145,74,150,75,148,76,149,77,167,78,184,79,181,92,40,24,129,118,130,119,33,123,45,124,43,125,173,131},new int[]{-19,326,-4,323,-70,17,-92,18,-90,32,-88,21,-85,22,-83,33,-82,39,-81,40,-74,57,-73,58,-66,59,-72,115,-71,91,-86,116,-87,117,-84,120,-89,121,-55,126,-54,127,-53,130}));
    AddState(326,new State(-35));
    AddState(327,new State(new int[]{46,328}));
    AddState(328,new State(new int[]{132,36,133,37,128,177,175,41},new int[]{-21,329,-83,330,-82,39,-81,40}));
    AddState(329,new State(-31));
    AddState(330,new State(new int[]{131,35},new int[]{-74,331}));
    AddState(331,new State(-223));
    AddState(332,new State(new int[]{46,-28,131,-218}));
    AddState(333,new State(-29));
    AddState(334,new State(-32));
    AddState(335,new State(new int[]{132,332,131,333,133,37,128,177,175,41},new int[]{-30,336,-18,373,-31,378,-83,376,-82,39,-81,40}));
    AddState(336,new State(new int[]{185,337}));
    AddState(337,new State(new int[]{132,332,131,333,133,37,128,177,175,41},new int[]{-30,338,-18,373,-31,378,-83,376,-82,39,-81,40}));
    AddState(338,new State(new int[]{59,339,44,344},new int[]{-23,340,-24,342,-25,363,-26,365,-27,367,-28,369,-29,371}));
    AddState(339,new State(-56));
    AddState(340,new State(new int[]{59,341}));
    AddState(341,new State(-57));
    AddState(342,new State(new int[]{44,344,59,-36},new int[]{-23,343,-24,342,-25,363,-26,365,-27,367,-28,369,-29,371}));
    AddState(343,new State(-37));
    AddState(344,new State(new int[]{186,345,187,348,188,351,189,354,190,357,191,360}));
    AddState(345,new State(new int[]{203,346}));
    AddState(346,new State(new int[]{133,347}));
    AddState(347,new State(-48));
    AddState(348,new State(new int[]{203,349}));
    AddState(349,new State(new int[]{132,36,133,37,128,38,175,41,131,35,152,72,144,73,145,74,150,75,148,76,149,77,167,78,184,79,181,92,40,24,129,118,130,119,33,123,45,124,43,125,173,131},new int[]{-4,350,-70,17,-92,18,-90,32,-88,21,-85,22,-83,33,-82,39,-81,40,-74,57,-73,58,-66,59,-72,115,-71,91,-86,116,-87,117,-84,120,-89,121,-55,126,-54,127,-53,130}));
    AddState(350,new State(-49));
    AddState(351,new State(new int[]{203,352}));
    AddState(352,new State(new int[]{132,36,133,37,128,38,175,41,131,35,152,72,144,73,145,74,150,75,148,76,149,77,167,78,184,79,181,92,40,24,129,118,130,119,33,123,45,124,43,125,173,131},new int[]{-4,353,-70,17,-92,18,-90,32,-88,21,-85,22,-83,33,-82,39,-81,40,-74,57,-73,58,-66,59,-72,115,-71,91,-86,116,-87,117,-84,120,-89,121,-55,126,-54,127,-53,130}));
    AddState(353,new State(-50));
    AddState(354,new State(new int[]{203,355}));
    AddState(355,new State(new int[]{133,356}));
    AddState(356,new State(-51));
    AddState(357,new State(new int[]{203,358}));
    AddState(358,new State(new int[]{132,36,133,37,128,38,175,41,131,35,152,72,144,73,145,74,150,75,148,76,149,77,167,78,184,79,181,92,40,24,129,118,130,119,33,123,45,124,43,125,173,131},new int[]{-4,359,-70,17,-92,18,-90,32,-88,21,-85,22,-83,33,-82,39,-81,40,-74,57,-73,58,-66,59,-72,115,-71,91,-86,116,-87,117,-84,120,-89,121,-55,126,-54,127,-53,130}));
    AddState(359,new State(-52));
    AddState(360,new State(new int[]{203,361}));
    AddState(361,new State(new int[]{133,362}));
    AddState(362,new State(-53));
    AddState(363,new State(new int[]{44,344,59,-38},new int[]{-23,364,-24,342,-25,363,-26,365,-27,367,-28,369,-29,371}));
    AddState(364,new State(-39));
    AddState(365,new State(new int[]{44,344,59,-40},new int[]{-23,366,-24,342,-25,363,-26,365,-27,367,-28,369,-29,371}));
    AddState(366,new State(-41));
    AddState(367,new State(new int[]{44,344,59,-42},new int[]{-23,368,-24,342,-25,363,-26,365,-27,367,-28,369,-29,371}));
    AddState(368,new State(-43));
    AddState(369,new State(new int[]{44,344,59,-44},new int[]{-23,370,-24,342,-25,363,-26,365,-27,367,-28,369,-29,371}));
    AddState(370,new State(-45));
    AddState(371,new State(new int[]{44,344,59,-46},new int[]{-23,372,-24,342,-25,363,-26,365,-27,367,-28,369,-29,371}));
    AddState(372,new State(-47));
    AddState(373,new State(new int[]{46,374}));
    AddState(374,new State(new int[]{132,36,133,37,128,177,175,41},new int[]{-31,375,-83,376,-82,39,-81,40}));
    AddState(375,new State(-54));
    AddState(376,new State(new int[]{131,35},new int[]{-74,377}));
    AddState(377,new State(-224));
    AddState(378,new State(-55));
    AddState(379,new State(-58));
    AddState(380,new State(-20));
    AddState(381,new State(-21));
    AddState(382,new State(-22));
    AddState(383,new State(-59));
    AddState(384,new State(-23));
    AddState(385,new State(-60));
    AddState(386,new State(-5));
    AddState(387,new State(-27));

    rules=new Rule[267];
    rules[1]=new Rule(-2, new int[]{-1,127});
    rules[2]=new Rule(-1, new int[]{-3});
    rules[3]=new Rule(-1, new int[]{203,-4});
    rules[4]=new Rule(-1, new int[]{-5});
    rules[5]=new Rule(-1, new int[]{-6});
    rules[6]=new Rule(-7, new int[]{146});
    rules[7]=new Rule(-7, new int[]{147});
    rules[8]=new Rule(-8, new int[]{-4,-7,44,-8});
    rules[9]=new Rule(-8, new int[]{-4,44,-8});
    rules[10]=new Rule(-8, new int[]{-4,-7});
    rules[11]=new Rule(-8, new int[]{-4});
    rules[12]=new Rule(-9, new int[]{142,143,-8});
    rules[13]=new Rule(-3, new int[]{-10});
    rules[14]=new Rule(-3, new int[]{-3,-10});
    rules[15]=new Rule(-10, new int[]{140,-11,139,-4,-9});
    rules[16]=new Rule(-10, new int[]{140,-11,139,-4});
    rules[17]=new Rule(-10, new int[]{139,-4,-9});
    rules[18]=new Rule(-10, new int[]{139,-4});
    rules[19]=new Rule(-12, new int[]{-13});
    rules[20]=new Rule(-12, new int[]{-14});
    rules[21]=new Rule(-12, new int[]{-15});
    rules[22]=new Rule(-12, new int[]{-16});
    rules[23]=new Rule(-12, new int[]{-17});
    rules[24]=new Rule(-5, new int[]{-12});
    rules[25]=new Rule(-5, new int[]{-12,59});
    rules[26]=new Rule(-5, new int[]{-12,59,-5});
    rules[27]=new Rule(-6, new int[]{127});
    rules[28]=new Rule(-18, new int[]{132});
    rules[29]=new Rule(-18, new int[]{131});
    rules[30]=new Rule(-19, new int[]{-4});
    rules[31]=new Rule(-20, new int[]{-18,46,-21});
    rules[32]=new Rule(-20, new int[]{-21});
    rules[33]=new Rule(-13, new int[]{151,141,-20,203,-19});
    rules[34]=new Rule(-13, new int[]{151,141,-20,203,-19,-22});
    rules[35]=new Rule(-13, new int[]{151,141,126,203,-19});
    rules[36]=new Rule(-23, new int[]{-24});
    rules[37]=new Rule(-23, new int[]{-24,-23});
    rules[38]=new Rule(-23, new int[]{-25});
    rules[39]=new Rule(-23, new int[]{-25,-23});
    rules[40]=new Rule(-23, new int[]{-26});
    rules[41]=new Rule(-23, new int[]{-26,-23});
    rules[42]=new Rule(-23, new int[]{-27});
    rules[43]=new Rule(-23, new int[]{-27,-23});
    rules[44]=new Rule(-23, new int[]{-28});
    rules[45]=new Rule(-23, new int[]{-28,-23});
    rules[46]=new Rule(-23, new int[]{-29});
    rules[47]=new Rule(-23, new int[]{-29,-23});
    rules[48]=new Rule(-24, new int[]{44,186,203,133});
    rules[49]=new Rule(-25, new int[]{44,187,203,-4});
    rules[50]=new Rule(-26, new int[]{44,188,203,-4});
    rules[51]=new Rule(-27, new int[]{44,189,203,133});
    rules[52]=new Rule(-28, new int[]{44,190,203,-4});
    rules[53]=new Rule(-29, new int[]{44,191,203,133});
    rules[54]=new Rule(-30, new int[]{-18,46,-31});
    rules[55]=new Rule(-30, new int[]{-31});
    rules[56]=new Rule(-14, new int[]{151,169,-30,185,-30,59});
    rules[57]=new Rule(-14, new int[]{151,169,-30,185,-30,-23,59});
    rules[58]=new Rule(-15, new int[]{151,136});
    rules[59]=new Rule(-16, new int[]{152});
    rules[60]=new Rule(-17, new int[]{137});
    rules[61]=new Rule(-32, new int[]{155});
    rules[62]=new Rule(-32, new int[]{156});
    rules[63]=new Rule(-32, new int[]{157});
    rules[64]=new Rule(-32, new int[]{158});
    rules[65]=new Rule(-32, new int[]{159});
    rules[66]=new Rule(-32, new int[]{160});
    rules[67]=new Rule(-32, new int[]{161});
    rules[68]=new Rule(-32, new int[]{162});
    rules[69]=new Rule(-32, new int[]{163});
    rules[70]=new Rule(-32, new int[]{164});
    rules[71]=new Rule(-33, new int[]{165,203,129});
    rules[72]=new Rule(-33, new int[]{165,126});
    rules[73]=new Rule(-33, new int[]{165,203,126});
    rules[74]=new Rule(-34, new int[]{170,203,144});
    rules[75]=new Rule(-34, new int[]{170,203,145});
    rules[76]=new Rule(-34, new int[]{170,126});
    rules[77]=new Rule(-34, new int[]{170,203,126});
    rules[78]=new Rule(-35, new int[]{133});
    rules[79]=new Rule(-35, new int[]{130});
    rules[80]=new Rule(-36, new int[]{171,203,-35});
    rules[81]=new Rule(-36, new int[]{171,126});
    rules[82]=new Rule(-37, new int[]{172,203,133});
    rules[83]=new Rule(-37, new int[]{172,126});
    rules[84]=new Rule(-38, new int[]{166,203,144});
    rules[85]=new Rule(-38, new int[]{166,203,145});
    rules[86]=new Rule(-38, new int[]{166,126});
    rules[87]=new Rule(-38, new int[]{166,203,126});
    rules[88]=new Rule(-39, new int[]{167,203,133});
    rules[89]=new Rule(-40, new int[]{168,203,133});
    rules[90]=new Rule(-41, new int[]{192,203,-35});
    rules[91]=new Rule(-41, new int[]{192,126});
    rules[92]=new Rule(-42, new int[]{193,203,-35});
    rules[93]=new Rule(-42, new int[]{193,126});
    rules[94]=new Rule(-43, new int[]{194,203,-35});
    rules[95]=new Rule(-43, new int[]{194,126});
    rules[96]=new Rule(-44, new int[]{195,203,-4});
    rules[97]=new Rule(-44, new int[]{195,126});
    rules[98]=new Rule(-45, new int[]{196,203,-35});
    rules[99]=new Rule(-45, new int[]{196,126});
    rules[100]=new Rule(-46, new int[]{197,203,-35});
    rules[101]=new Rule(-46, new int[]{197,126});
    rules[102]=new Rule(-47, new int[]{198,203,-4});
    rules[103]=new Rule(-47, new int[]{198,126});
    rules[104]=new Rule(-48, new int[]{199,203,-35});
    rules[105]=new Rule(-48, new int[]{199,126});
    rules[106]=new Rule(-49, new int[]{200,203,-35});
    rules[107]=new Rule(-49, new int[]{200,126});
    rules[108]=new Rule(-50, new int[]{201,203,-4});
    rules[109]=new Rule(-50, new int[]{201,126});
    rules[110]=new Rule(-51, new int[]{202,203,133});
    rules[111]=new Rule(-51, new int[]{202,126});
    rules[112]=new Rule(-52, new int[]{132});
    rules[113]=new Rule(-53, new int[]{173,-52,203,-4});
    rules[114]=new Rule(-53, new int[]{173,126,203,-4});
    rules[115]=new Rule(-54, new int[]{-53});
    rules[116]=new Rule(-54, new int[]{-54,-53});
    rules[117]=new Rule(-55, new int[]{-54,174,-4});
    rules[118]=new Rule(-56, new int[]{-34});
    rules[119]=new Rule(-56, new int[]{-34,-56});
    rules[120]=new Rule(-56, new int[]{-33});
    rules[121]=new Rule(-56, new int[]{-33,-56});
    rules[122]=new Rule(-56, new int[]{-38});
    rules[123]=new Rule(-56, new int[]{-38,-56});
    rules[124]=new Rule(-56, new int[]{-39});
    rules[125]=new Rule(-56, new int[]{-39,-56});
    rules[126]=new Rule(-56, new int[]{-40});
    rules[127]=new Rule(-56, new int[]{-40,-56});
    rules[128]=new Rule(-56, new int[]{-36});
    rules[129]=new Rule(-56, new int[]{-36,-56});
    rules[130]=new Rule(-56, new int[]{-37});
    rules[131]=new Rule(-56, new int[]{-37,-56});
    rules[132]=new Rule(-56, new int[]{-41});
    rules[133]=new Rule(-56, new int[]{-41,-56});
    rules[134]=new Rule(-56, new int[]{-42});
    rules[135]=new Rule(-56, new int[]{-42,-56});
    rules[136]=new Rule(-56, new int[]{-43});
    rules[137]=new Rule(-56, new int[]{-43,-56});
    rules[138]=new Rule(-56, new int[]{-44});
    rules[139]=new Rule(-56, new int[]{-44,-56});
    rules[140]=new Rule(-56, new int[]{-45});
    rules[141]=new Rule(-56, new int[]{-45,-56});
    rules[142]=new Rule(-56, new int[]{-46});
    rules[143]=new Rule(-56, new int[]{-46,-56});
    rules[144]=new Rule(-56, new int[]{-47});
    rules[145]=new Rule(-56, new int[]{-47,-56});
    rules[146]=new Rule(-56, new int[]{-48});
    rules[147]=new Rule(-56, new int[]{-48,-56});
    rules[148]=new Rule(-56, new int[]{-49});
    rules[149]=new Rule(-56, new int[]{-49,-56});
    rules[150]=new Rule(-56, new int[]{-50});
    rules[151]=new Rule(-56, new int[]{-50,-56});
    rules[152]=new Rule(-56, new int[]{-51});
    rules[153]=new Rule(-56, new int[]{-51,-56});
    rules[154]=new Rule(-22, new int[]{153,154,-32});
    rules[155]=new Rule(-22, new int[]{153,154,126});
    rules[156]=new Rule(-22, new int[]{153,154,-32,-56});
    rules[157]=new Rule(-57, new int[]{-4});
    rules[158]=new Rule(-11, new int[]{141,-58,203,-57});
    rules[159]=new Rule(-11, new int[]{141,-58,203,-57,-11});
    rules[160]=new Rule(-59, new int[]{44});
    rules[161]=new Rule(-60, new int[]{-4});
    rules[162]=new Rule(-61, new int[]{-60});
    rules[163]=new Rule(-61, new int[]{-61,-59,-60});
    rules[164]=new Rule(-62, new int[]{40});
    rules[165]=new Rule(-63, new int[]{41});
    rules[166]=new Rule(-64, new int[]{-62,-63});
    rules[167]=new Rule(-64, new int[]{-62,-61,-63});
    rules[168]=new Rule(-64, new int[]{-62,-61,126});
    rules[169]=new Rule(-64, new int[]{-62,126,-63});
    rules[170]=new Rule(-65, new int[]{-64});
    rules[171]=new Rule(-66, new int[]{128});
    rules[172]=new Rule(-66, new int[]{152});
    rules[173]=new Rule(-66, new int[]{144});
    rules[174]=new Rule(-66, new int[]{145});
    rules[175]=new Rule(-66, new int[]{150});
    rules[176]=new Rule(-66, new int[]{148});
    rules[177]=new Rule(-66, new int[]{149});
    rules[178]=new Rule(-66, new int[]{167});
    rules[179]=new Rule(-66, new int[]{184});
    rules[180]=new Rule(-67, new int[]{});
    rules[181]=new Rule(-67, new int[]{182});
    rules[182]=new Rule(-67, new int[]{183});
    rules[183]=new Rule(-68, new int[]{});
    rules[184]=new Rule(-68, new int[]{129});
    rules[185]=new Rule(-68, new int[]{144});
    rules[186]=new Rule(-68, new int[]{145});
    rules[187]=new Rule(-68, new int[]{146});
    rules[188]=new Rule(-68, new int[]{147});
    rules[189]=new Rule(-69, new int[]{});
    rules[190]=new Rule(-69, new int[]{-70});
    rules[191]=new Rule(-71, new int[]{181,40,-4,44,-4,41});
    rules[192]=new Rule(-71, new int[]{181,40,-4,44,-4,44,-69,41});
    rules[193]=new Rule(-71, new int[]{181,40,-4,44,-4,44,-69,44,-68,41});
    rules[194]=new Rule(-71, new int[]{181,40,-4,44,-4,44,-69,44,-68,44,-67,41});
    rules[195]=new Rule(-72, new int[]{-71});
    rules[196]=new Rule(-73, new int[]{-66,-65});
    rules[197]=new Rule(-73, new int[]{-72});
    rules[198]=new Rule(-73, new int[]{184,-66,-65});
    rules[199]=new Rule(-73, new int[]{184,-72});
    rules[200]=new Rule(-74, new int[]{131});
    rules[201]=new Rule(-75, new int[]{});
    rules[202]=new Rule(-75, new int[]{-70});
    rules[203]=new Rule(-76, new int[]{-75});
    rules[204]=new Rule(-76, new int[]{-76,44,-75});
    rules[205]=new Rule(-77, new int[]{123,-76,125});
    rules[206]=new Rule(-77, new int[]{123,-76,125,44,-77});
    rules[207]=new Rule(-78, new int[]{176});
    rules[208]=new Rule(-78, new int[]{160});
    rules[209]=new Rule(-78, new int[]{177});
    rules[210]=new Rule(-78, new int[]{178});
    rules[211]=new Rule(-78, new int[]{179});
    rules[212]=new Rule(-78, new int[]{180});
    rules[213]=new Rule(-79, new int[]{130,44,-78});
    rules[214]=new Rule(-80, new int[]{-79});
    rules[215]=new Rule(-80, new int[]{-80,44,-79});
    rules[216]=new Rule(-81, new int[]{175,40,-80,44,123,-77,125,41});
    rules[217]=new Rule(-82, new int[]{-81});
    rules[218]=new Rule(-83, new int[]{132});
    rules[219]=new Rule(-83, new int[]{133});
    rules[220]=new Rule(-83, new int[]{128});
    rules[221]=new Rule(-83, new int[]{-82});
    rules[222]=new Rule(-84, new int[]{-83});
    rules[223]=new Rule(-21, new int[]{-83,-74});
    rules[224]=new Rule(-31, new int[]{-83,-74});
    rules[225]=new Rule(-58, new int[]{-83,-74});
    rules[226]=new Rule(-85, new int[]{-83,-74});
    rules[227]=new Rule(-85, new int[]{-74});
    rules[228]=new Rule(-86, new int[]{40,41});
    rules[229]=new Rule(-86, new int[]{40,-61,41});
    rules[230]=new Rule(-86, new int[]{40,-61,126});
    rules[231]=new Rule(-87, new int[]{-85,-86});
    rules[232]=new Rule(-88, new int[]{-85});
    rules[233]=new Rule(-88, new int[]{-73});
    rules[234]=new Rule(-88, new int[]{-86});
    rules[235]=new Rule(-88, new int[]{-87});
    rules[236]=new Rule(-88, new int[]{129});
    rules[237]=new Rule(-88, new int[]{130});
    rules[238]=new Rule(-88, new int[]{144});
    rules[239]=new Rule(-88, new int[]{145});
    rules[240]=new Rule(-88, new int[]{148});
    rules[241]=new Rule(-88, new int[]{149});
    rules[242]=new Rule(-88, new int[]{150});
    rules[243]=new Rule(-88, new int[]{-84});
    rules[244]=new Rule(-89, new int[]{33});
    rules[245]=new Rule(-89, new int[]{45});
    rules[246]=new Rule(-89, new int[]{43});
    rules[247]=new Rule(-90, new int[]{-88});
    rules[248]=new Rule(-90, new int[]{-89,-90});
    rules[249]=new Rule(-91, new int[]{43});
    rules[250]=new Rule(-91, new int[]{45});
    rules[251]=new Rule(-91, new int[]{42});
    rules[252]=new Rule(-91, new int[]{47});
    rules[253]=new Rule(-91, new int[]{210});
    rules[254]=new Rule(-91, new int[]{211});
    rules[255]=new Rule(-91, new int[]{38});
    rules[256]=new Rule(-91, new int[]{205});
    rules[257]=new Rule(-91, new int[]{206});
    rules[258]=new Rule(-91, new int[]{207});
    rules[259]=new Rule(-91, new int[]{208});
    rules[260]=new Rule(-91, new int[]{203});
    rules[261]=new Rule(-91, new int[]{204});
    rules[262]=new Rule(-92, new int[]{-90});
    rules[263]=new Rule(-92, new int[]{-92,-91,-90});
    rules[264]=new Rule(-70, new int[]{-92});
    rules[265]=new Rule(-4, new int[]{-70});
    rules[266]=new Rule(-4, new int[]{-55});

    nonTerminals = new string[] {"", "Start", "$accept", "DaxQueries", 
      "Expression", "DaxScript", "Empty", "Order", "OrderByList", "OrderBy", 
      "DaxQuery", "Definitions", "CreateExpression", "CreateMeasure", "CreateKpi", 
      "CreateMember", "Calculate", "Alter", "CubeName", "MeasureExpression", 
      "MeasureFullName", "MeasureName", "CalculationProperty", "KpiPropertyParams", 
      "KpiPropertyAssociatedMeasureGroup", "KpiPropertyGoal", "KpiPropertyStatus", 
      "KpiPropertyStatusGraphic", "KpiPropertyTrend", "KpiPropertyTrendGraphic", 
      "KpiFullName", "KpiName", "CalculationPropertyFormatType", "CalculationPropertyAccuracy", 
      "CalculationPropertyVisible", "CalculationPropertyDescriptionContent", 
      "CalculationPropertyDescription", "CalculationPropertyDisplayFolder", "CalculationPropertyThousandSeparator", 
      "CalculationPropertyFormat", "CalculationPropertyAdditionalInfo", "CalculationPropertyKpiDescription", 
      "CalculationPropertyKpiTargetFormatString", "CalculationPropertyKpiTargetDescription", 
      "CalculationPropertyKpiTargetExpression", "CalculationPropertyKpiStatusGraphic", 
      "CalculationPropertyKpiStatusDescription", "CalculationPropertyKpiStatusExpression", 
      "CalculationPropertyKpiTrendGraphic", "CalculationPropertyKpiTrendDescription", 
      "CalculationPropertyKpiTrendExpression", "CalculationPropertyKpiAnnotations", 
      "VarName", "VarDeclaration", "VarDeclarations", "VarExpression", "CalculationPropertyParams", 
      "QueryMeasureExpression", "QueryMeasureName", "ParamSeparator", "ParamExpression", 
      "Params1", "StartArg", "EndArg", "ParenthesisParameters", "FunctionArgs", 
      "FunctionName", "RankXTies", "RankXOrder", "RankXValue", "ScalarExpression", 
      "RankX", "RankXFunction", "FunctionCall", "ColumnRef", "DataTableValue", 
      "DataTableValues", "DataTableRows", "DataTableColumnType", "DataTableColumn", 
      "DataTableColumns", "DataTable", "DataTableFunction", "TableRef", "TableExpression", 
      "ColMeasureRef", "ParenthesisExpression", "CalculateShortcut", "PrimaryExpression", 
      "UnaryOperator", "UnaryExpression", "BinaryOperator", "BinaryExpression", 
      };
  }

  protected override void DoAction(int action)
  {
    switch (action)
    {
      case 30: // MeasureExpression -> Expression 
{ SpecifyMeasureExpression(location_stack.array[location_stack.top-1]); }
        break;
      case 33: // CreateMeasure -> KWCREATE KWMEASURE MeasureFullName EQ MeasureExpression 
{ SpecifyFullMeasureText(location_stack.array[location_stack.top-5], location_stack.array[location_stack.top-1]); }
        break;
      case 34: // CreateMeasure -> KWCREATE KWMEASURE MeasureFullName EQ MeasureExpression CalculationProperty 
{ SpecifyFullMeasureText(location_stack.array[location_stack.top-6], location_stack.array[location_stack.top-2]); }
        break;
      case 35: // CreateMeasure -> KWCREATE KWMEASURE error EQ MeasureExpression 
{ CallHdlr("Measure name expected", location_stack.array[location_stack.top-3]); }
        break;
      case 48: // KpiPropertyAssociatedMeasureGroup -> ',' KWASSOCIATED_MEASURE_GROUP EQ ESCAPEDTABLENAME 
{ SpecifyCalcPropAssociatedMeasureGroup(location_stack.array[location_stack.top-1]); }
        break;
      case 49: // KpiPropertyGoal -> ',' KWGOAL EQ Expression 
{ SpecifyCalcPropGoal(location_stack.array[location_stack.top-1]); }
        break;
      case 50: // KpiPropertyStatus -> ',' KWSTATUS EQ Expression 
{ SpecifyCalcPropStatus(location_stack.array[location_stack.top-1]); }
        break;
      case 51: // KpiPropertyStatusGraphic -> ',' KWSTATUS_GRAPHIC EQ ESCAPEDTABLENAME 
{ SpecifyCalcPropStatusGraphic(location_stack.array[location_stack.top-1]); }
        break;
      case 52: // KpiPropertyTrend -> ',' KWTREND EQ Expression 
{ SpecifyCalcPropTrend(location_stack.array[location_stack.top-1]); }
        break;
      case 53: // KpiPropertyTrendGraphic -> ',' KWTREND_GRAPHIC EQ ESCAPEDTABLENAME 
{ SpecifyCalcPropTrendGraphic(location_stack.array[location_stack.top-1]); }
        break;
      case 61: // CalculationPropertyFormatType -> KWGENERAL 
{ SpecifyCalculationProperty(location_stack.array[location_stack.top-1]); }
        break;
      case 62: // CalculationPropertyFormatType -> KWNUMBERDECIMAL 
{ SpecifyCalculationProperty(location_stack.array[location_stack.top-1]); }
        break;
      case 63: // CalculationPropertyFormatType -> KWNUMBERWHOLE 
{ SpecifyCalculationProperty(location_stack.array[location_stack.top-1]); }
        break;
      case 64: // CalculationPropertyFormatType -> KWPERCENTAGE 
{ SpecifyCalculationProperty(location_stack.array[location_stack.top-1]); }
        break;
      case 65: // CalculationPropertyFormatType -> KWSCIENTIFIC 
{ SpecifyCalculationProperty(location_stack.array[location_stack.top-1]); }
        break;
      case 66: // CalculationPropertyFormatType -> KWCURRENCY 
{ SpecifyCalculationProperty(location_stack.array[location_stack.top-1]); }
        break;
      case 67: // CalculationPropertyFormatType -> KWDATETIMECUSTOM 
{ SpecifyCalculationProperty(location_stack.array[location_stack.top-1]); }
        break;
      case 68: // CalculationPropertyFormatType -> KWDATETIMESHORTDATEPATTERN 
{ SpecifyCalculationProperty(location_stack.array[location_stack.top-1]); }
        break;
      case 69: // CalculationPropertyFormatType -> KWDATETIMEGENERAL 
{ SpecifyCalculationProperty(location_stack.array[location_stack.top-1]); }
        break;
      case 70: // CalculationPropertyFormatType -> KWTEXT 
{ SpecifyCalculationProperty(location_stack.array[location_stack.top-1]); }
        break;
      case 71: // CalculationPropertyAccuracy -> KWACCURACY EQ NUMBER 
{ SpecifyCalcPropAccuracy(location_stack.array[location_stack.top-1]); }
        break;
      case 72: // CalculationPropertyAccuracy -> KWACCURACY error 
{ CallHdlr("'=' is not specified", location_stack.array[location_stack.top-1]); }
        break;
      case 73: // CalculationPropertyAccuracy -> KWACCURACY EQ error 
{ CallHdlr("Value of Accuracy is not a number", location_stack.array[location_stack.top-1]); }
        break;
      case 74: // CalculationPropertyVisible -> KWVISIBLE EQ KWTRUE 
{ SpecifyCalcPropIsHidden(false); }
        break;
      case 75: // CalculationPropertyVisible -> KWVISIBLE EQ KWFALSE 
{ SpecifyCalcPropIsHidden(true); }
        break;
      case 76: // CalculationPropertyVisible -> KWVISIBLE error 
{ CallHdlr("'=' is not specified", location_stack.array[location_stack.top-1]); }
        break;
      case 77: // CalculationPropertyVisible -> KWVISIBLE EQ error 
{ CallHdlr("Visible can be either TRUE or FALSE", location_stack.array[location_stack.top-1]); }
        break;
      case 80: // CalculationPropertyDescription -> KWDESCRIPTION EQ CalculationPropertyDescriptionContent 
{ SpecifyCalcPropDescription(location_stack.array[location_stack.top-1]);  }
        break;
      case 81: // CalculationPropertyDescription -> KWDESCRIPTION error 
{ CallHdlr("'=' is not specified", location_stack.array[location_stack.top-1]); }
        break;
      case 82: // CalculationPropertyDisplayFolder -> KWDISPLAYFOLDER EQ ESCAPEDTABLENAME 
{ SpecifyCalcPropDisplayFolder(location_stack.array[location_stack.top-1]);  }
        break;
      case 83: // CalculationPropertyDisplayFolder -> KWDISPLAYFOLDER error 
{ CallHdlr("'=' is not specified", location_stack.array[location_stack.top-1]); }
        break;
      case 84: // CalculationPropertyThousandSeparator -> KWTHOUSANDSEPARATOR EQ KWTRUE 
{ SpecifyCalcPropThousandSeparator(true); }
        break;
      case 85: // CalculationPropertyThousandSeparator -> KWTHOUSANDSEPARATOR EQ KWFALSE 
{ SpecifyCalcPropThousandSeparator(false); }
        break;
      case 86: // CalculationPropertyThousandSeparator -> KWTHOUSANDSEPARATOR error 
{ CallHdlr("'=' is not specified", location_stack.array[location_stack.top-1]); }
        break;
      case 87: // CalculationPropertyThousandSeparator -> KWTHOUSANDSEPARATOR EQ error 
{ CallHdlr("ThousandSeparator can be either TRUE or FALSE", location_stack.array[location_stack.top-1]); }
        break;
      case 88: // CalculationPropertyFormat -> KWFORMAT EQ ESCAPEDTABLENAME 
{ SpecifyCalcPropFormat(location_stack.array[location_stack.top-1]); }
        break;
      case 89: // CalculationPropertyAdditionalInfo -> KWADDITIONALINFO EQ ESCAPEDTABLENAME 
{ SpecifyCalcPropAdditionalInfo(location_stack.array[location_stack.top-1]); }
        break;
      case 90: // CalculationPropertyKpiDescription -> KWKPIDESCRIPTION EQ CalculationPropertyDescriptionContent 
{ SpecifyCalcPropKpiDescription(location_stack.array[location_stack.top-1]);  }
        break;
      case 91: // CalculationPropertyKpiDescription -> KWKPIDESCRIPTION error 
{ CallHdlr("'=' is not specified", location_stack.array[location_stack.top-1]); }
        break;
      case 92: // CalculationPropertyKpiTargetFormatString -> KWKPITARGETFORMATSTRING EQ CalculationPropertyDescriptionContent 
{ SpecifyCalcPropKpiTargetFormatString(location_stack.array[location_stack.top-1]);  }
        break;
      case 93: // CalculationPropertyKpiTargetFormatString -> KWKPITARGETFORMATSTRING error 
{ CallHdlr("'=' is not specified", location_stack.array[location_stack.top-1]); }
        break;
      case 94: // CalculationPropertyKpiTargetDescription -> KWKPITARGETDESCRIPTION EQ CalculationPropertyDescriptionContent 
{ SpecifyCalcPropKpiTargetDescription(location_stack.array[location_stack.top-1]);  }
        break;
      case 95: // CalculationPropertyKpiTargetDescription -> KWKPITARGETDESCRIPTION error 
{ CallHdlr("'=' is not specified", location_stack.array[location_stack.top-1]); }
        break;
      case 96: // CalculationPropertyKpiTargetExpression -> KWKPITARGETEXPRESSION EQ Expression 
{ SpecifyCalcPropKpiTargetExpression(location_stack.array[location_stack.top-1]);  }
        break;
      case 97: // CalculationPropertyKpiTargetExpression -> KWKPITARGETEXPRESSION error 
{ CallHdlr("'=' is not specified", location_stack.array[location_stack.top-1]); }
        break;
      case 98: // CalculationPropertyKpiStatusGraphic -> KWKPISTATUSGRAPHIC EQ CalculationPropertyDescriptionContent 
{ SpecifyCalcPropKpiStatusGraphic(location_stack.array[location_stack.top-1]);  }
        break;
      case 99: // CalculationPropertyKpiStatusGraphic -> KWKPISTATUSGRAPHIC error 
{ CallHdlr("'=' is not specified", location_stack.array[location_stack.top-1]); }
        break;
      case 100: // CalculationPropertyKpiStatusDescription -> KWKPISTATUSDESCRIPTION EQ CalculationPropertyDescriptionContent 
{ SpecifyCalcPropKpiStatusDescription(location_stack.array[location_stack.top-1]);  }
        break;
      case 101: // CalculationPropertyKpiStatusDescription -> KWKPISTATUSDESCRIPTION error 
{ CallHdlr("'=' is not specified", location_stack.array[location_stack.top-1]); }
        break;
      case 102: // CalculationPropertyKpiStatusExpression -> KWKPISTATUSEXPRESSION EQ Expression 
{ SpecifyCalcPropKpiStatusExpression(location_stack.array[location_stack.top-1]);  }
        break;
      case 103: // CalculationPropertyKpiStatusExpression -> KWKPISTATUSEXPRESSION error 
{ CallHdlr("'=' is not specified", location_stack.array[location_stack.top-1]); }
        break;
      case 104: // CalculationPropertyKpiTrendGraphic -> KWKPITRENDGRAPHIC EQ CalculationPropertyDescriptionContent 
{ SpecifyCalcPropKpiTrendGraphic(location_stack.array[location_stack.top-1]);  }
        break;
      case 105: // CalculationPropertyKpiTrendGraphic -> KWKPITRENDGRAPHIC error 
{ CallHdlr("'=' is not specified", location_stack.array[location_stack.top-1]); }
        break;
      case 106: // CalculationPropertyKpiTrendDescription -> KWKPITRENDDESCRIPTION EQ CalculationPropertyDescriptionContent 
{ SpecifyCalcPropKpiTrendDescription(location_stack.array[location_stack.top-1]);  }
        break;
      case 107: // CalculationPropertyKpiTrendDescription -> KWKPITRENDDESCRIPTION error 
{ CallHdlr("'=' is not specified", location_stack.array[location_stack.top-1]); }
        break;
      case 108: // CalculationPropertyKpiTrendExpression -> KWKPITRENDEXPRESSION EQ Expression 
{ SpecifyCalcPropKpiTrendExpression(location_stack.array[location_stack.top-1]);  }
        break;
      case 109: // CalculationPropertyKpiTrendExpression -> KWKPITRENDEXPRESSION error 
{ CallHdlr("'=' is not specified", location_stack.array[location_stack.top-1]); }
        break;
      case 110: // CalculationPropertyKpiAnnotations -> KWKPIANNOTATIONS EQ ESCAPEDTABLENAME 
{ SpecifyCalcPropKpiAnnotations(location_stack.array[location_stack.top-1]);  }
        break;
      case 111: // CalculationPropertyKpiAnnotations -> KWKPIANNOTATIONS error 
{ CallHdlr("'=' is not specified", location_stack.array[location_stack.top-1]); }
        break;
      case 114: // VarDeclaration -> KWVAR error EQ Expression 
{ CallHdlr("Invalid var name", location_stack.array[location_stack.top-3]); }
        break;
      case 155: // CalculationProperty -> KWCALCULATION KWPROPERTY error 
{ CallHdlr("Wrong calculation property type.  Expected types: General, NumberDecimal, NumberWhole, Percentage, Scientific, Currency, DateTimeCustom, Visible, Description, DisplayFolder", location_stack.array[location_stack.top-2]); }
        break;
      case 160: // ParamSeparator -> ',' 
{ NextParameter(location_stack.array[location_stack.top-1]); }
        break;
      case 164: // StartArg -> '(' 
{ StartParameters(location_stack.array[location_stack.top-1]); }
        break;
      case 165: // EndArg -> ')' 
{ EndParameters(location_stack.array[location_stack.top-1]); }
        break;
      case 166: // ParenthesisParameters -> StartArg EndArg 
{ Match(location_stack.array[location_stack.top-2], location_stack.array[location_stack.top-1]); }
        break;
      case 167: // ParenthesisParameters -> StartArg Params1 EndArg 
{ Match(location_stack.array[location_stack.top-3], location_stack.array[location_stack.top-1]); }
        break;
      case 168: // ParenthesisParameters -> StartArg Params1 error 
{ CallHdlr("unmatched parentheses", location_stack.array[location_stack.top-1]); }
        break;
      case 169: // ParenthesisParameters -> StartArg error EndArg 
{ yyval = value_stack.array[value_stack.top-1];
                                            CallHdlr("error in parameters", location_stack.array[location_stack.top-2]); }
        break;
      case 171: // FunctionName -> FUNCTION 
{ StartFunction(location_stack.array[location_stack.top-1], value_stack.array[value_stack.top-1].str); }
        break;
      case 172: // FunctionName -> KWCALCULATE 
{ StartFunction(location_stack.array[location_stack.top-1], value_stack.array[value_stack.top-1].str); }
        break;
      case 173: // FunctionName -> KWTRUE 
{ StartFunction(location_stack.array[location_stack.top-1], value_stack.array[value_stack.top-1].str); }
        break;
      case 174: // FunctionName -> KWFALSE 
{ StartFunction(location_stack.array[location_stack.top-1], value_stack.array[value_stack.top-1].str); }
        break;
      case 175: // FunctionName -> KWYEAR 
{ StartFunction(location_stack.array[location_stack.top-1], value_stack.array[value_stack.top-1].str); }
        break;
      case 176: // FunctionName -> KWDAY 
{ StartFunction(location_stack.array[location_stack.top-1], value_stack.array[value_stack.top-1].str); }
        break;
      case 177: // FunctionName -> KWMONTH 
{ StartFunction(location_stack.array[location_stack.top-1], value_stack.array[value_stack.top-1].str); }
        break;
      case 178: // FunctionName -> KWFORMAT 
{ StartFunction(location_stack.array[location_stack.top-1], value_stack.array[value_stack.top-1].str); }
        break;
      case 179: // FunctionName -> KWNOT 
{ StartFunction(location_stack.array[location_stack.top-1], value_stack.array[value_stack.top-1].str); }
        break;
      case 195: // RankXFunction -> RankX 
{ StartFunction(location_stack.array[location_stack.top-1], value_stack.array[value_stack.top-1].str); }
        break;
      case 217: // DataTableFunction -> DataTable 
{ StartFunction(location_stack.array[location_stack.top-1], value_stack.array[value_stack.top-1].str); }
        break;
      case 223: // MeasureName -> TableRef ColumnRef 
{ CreateNewMeasure(location_stack.array[location_stack.top-2], location_stack.array[location_stack.top-1]); }
        break;
      case 224: // KpiName -> TableRef ColumnRef 
{ SetKpiMeasureName(location_stack.array[location_stack.top-1]); }
        break;
      case 228: // ParenthesisExpression -> '(' ')' 
{ Match(location_stack.array[location_stack.top-2], location_stack.array[location_stack.top-1]); }
        break;
      case 229: // ParenthesisExpression -> '(' Params1 ')' 
{ Match(location_stack.array[location_stack.top-3], location_stack.array[location_stack.top-1]); }
        break;
      case 230: // ParenthesisExpression -> '(' Params1 error 
{ CallHdlr("unmatched parentheses", location_stack.array[location_stack.top-1]); }
        break;
    }
  }

  protected override string TerminalToString(int terminal)
  {
    if (((Tokens)terminal).ToString() != terminal.ToString())
      return ((Tokens)terminal).ToString();
    else
      return CharToString((char)terminal);
  }


















}
}
