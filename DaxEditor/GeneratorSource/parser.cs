// This code was generated by the Managed Package Parser Generator


using System;
using System.Collections.Generic;
using System.Text;
using Babel.ParserGenerator;
using Microsoft.VisualStudio.TextManager.Interop;

namespace Babel.Parser
{
public enum Tokens {error=126,EOF=127,FUNCTION=128,
    NUMBER=129,STRING=130,COLUMNNAME=131,TABLENAME=132,ESCAPEDTABLENAME=133,PARTIALCOLUMNNAME=134,PARTIALTABLENAME=135,MDXCODE=136,
    KWALTER=137,KWEVALUATE=138,KWDEFINE=139,KWMEASURE=140,KWORDER=141,KWBY=142,KWTRUE=143,KWFALSE=144,
    KWASC=145,KWDESC=146,KWDAY=147,KWMONTH=148,KWYEAR=149,KWCREATE=150,KWCALCULATE=151,KWCALCULATION=152,
    KWPROPERTY=153,KWGENERAL=154,KWNUMBERDECIMAL=155,KWNUMBERWHOLE=156,KWPERCENTAGE=157,KWSCIENTIFIC=158,KWCURRENCY=159,KWDATETIMECUSTOM=160,
    KWDATETIMESHORTDATEPATTERN=161,KWDATETIMEGENERAL=162,KWTEXT=163,KWACCURACY=164,KWTHOUSANDSEPARATOR=165,KWFORMAT=166,KWADDITIONALINFO=167,KWKPI=168,
    KWVISIBLE=169,KWDESCRIPTION=170,KWDISPLAYFOLDER=171,KWVAR=172,KWRETURN=173,KWDATATABLE=174,KWBOOLEAN=175,KWDATETIME=176,
    KWDOUBLE=177,KWINTEGER=178,KWSTRING=179,KWRANKX=180,KWSKIP=181,KWDENSE=182,KWNOT=183,EQ=184,
    NEQ=185,GT=186,GTE=187,LT=188,LTE=189,POW=190,AMPAMP=191,BARBAR=192,
    LEFTSQUAREBRACKET=193,RIGHTSQUAREBRACKET=194,maxParseToken=195,LEX_WHITE=196,LEX_COMMENT=197,LEX_ERROR=198};

public partial struct LexValue
#line 13 "../../GeneratorSource/parser.y"
			{
    public string str;
}
// Abstract base class for MPLEX scanners
public abstract class ScanBase : AScanner<LexValue,LexLocation> {
    protected abstract int CurrentSc { get; set; }
    //
    // Override the virtual EolState property if the scanner state is more
    // complicated then a simple copy of the current start state ordinal
    //
    public virtual int EolState { get { return CurrentSc; } set { CurrentSc = value; } }
}

public partial class Parser: ShiftReduceParser<LexValue, LexLocation>
{
#line 18 "../../GeneratorSource/parser.y"

    ErrorHandler handler = null;
    public void SetHandler(ErrorHandler hdlr) { handler = hdlr; }
    internal void CallHdlr(string msg, LexLocation val)
    {
        handler.AddError(msg, val.sLin, val.sCol, val.eCol - val.sCol);
    }

    internal TextSpan MkTSpan(LexLocation s)
    {
        TextSpan ts;
        ts.iStartLine = s.sLin;
        ts.iStartIndex = s.sCol;
        ts.iEndLine = s.eLin;
        ts.iEndIndex = s.eCol;
        return ts;
    }

    internal void Match(LexLocation lh, LexLocation rh)
    {
        DefineMatch(MkTSpan(lh), MkTSpan(rh));
    }

    internal void StartFunction(LexLocation s, string token)
    {
        System.Diagnostics.Debug.WriteLine("StartName:" + token);
        Sink.StartName(MkTSpan(s), token); 
    }

    internal void StartParameters(LexLocation s)
    {
        System.Diagnostics.Debug.WriteLine("StartParameters");
        Sink.StartParameters(MkTSpan(s)); 
    }

    internal void EndParameters(LexLocation s)
    {
        System.Diagnostics.Debug.WriteLine("EndParameters");
        Sink.EndParameters(MkTSpan(s));
    }

    internal void NextParameter(LexLocation s)
    {
        System.Diagnostics.Debug.WriteLine("Next Parameter");
        Sink.NextParameter(MkTSpan(s));
    }
  protected override void Initialize()
  {
    this.errToken = (int)Tokens.error;
    this.eofToken = (int)Tokens.EOF;

    states=new State[291];
    AddState(0,new State(new int[]{139,6,138,182,184,185,150,191,151,284,137,288,127,290},new int[]{-1,1,-3,3,-7,4,-5,187,-10,188,-11,277,-12,278,-13,281,-14,285,-6,289}));
    AddState(1,new State(new int[]{127,2}));
    AddState(2,new State(-1));
    AddState(3,new State(-2));
    AddState(4,new State(new int[]{139,6,138,182,127,-6},new int[]{-3,5,-7,4}));
    AddState(5,new State(-7));
    AddState(6,new State(new int[]{140,173},new int[]{-8,7}));
    AddState(7,new State(new int[]{138,8}));
    AddState(8,new State(new int[]{128,37,151,38,143,39,144,40,149,41,147,42,148,43,166,44,183,45,180,59,132,93,133,94,174,96,131,92,40,82,129,124,130,125,33,126,45,127,43,128,172,135},new int[]{-4,9,-44,26,-45,27,-65,28,-58,89,-57,58,-40,90,-43,95,-47,123,-42,80,-41,117,-59,118,-60,119,-61,120,-63,121,-62,129,-53,130,-29,131,-28,134}));
    AddState(9,new State(new int[]{141,162,43,13,45,14,42,15,47,16,191,17,192,18,38,19,186,20,187,21,188,22,189,23,184,24,185,25,139,-9,138,-9,127,-9},new int[]{-9,10,-64,11}));
    AddState(10,new State(-8));
    AddState(11,new State(new int[]{128,37,151,38,143,39,144,40,149,41,147,42,148,43,166,44,183,45,180,59,132,93,133,94,174,96,131,92,40,82,129,124,130,125,33,126,45,127,43,128,172,135},new int[]{-4,12,-44,26,-45,27,-65,28,-58,89,-57,58,-40,90,-43,95,-47,123,-42,80,-41,117,-59,118,-60,119,-61,120,-63,121,-62,129,-53,130,-29,131,-28,134}));
    AddState(12,new State(new int[]{43,13,45,14,42,15,47,16,191,17,192,18,38,19,186,20,187,21,188,22,189,23,184,24,185,25,141,-172,139,-172,138,-172,127,-172,126,-172,41,-172,44,-172,125,-172,173,-172,172,-172,145,-172,146,-172,140,-172,152,-172,59,-172},new int[]{-64,11}));
    AddState(13,new State(-173));
    AddState(14,new State(-174));
    AddState(15,new State(-175));
    AddState(16,new State(-176));
    AddState(17,new State(-177));
    AddState(18,new State(-178));
    AddState(19,new State(-179));
    AddState(20,new State(-180));
    AddState(21,new State(-181));
    AddState(22,new State(-182));
    AddState(23,new State(-183));
    AddState(24,new State(-184));
    AddState(25,new State(-185));
    AddState(26,new State(-165));
    AddState(27,new State(-112));
    AddState(28,new State(new int[]{40,48},new int[]{-66,29,-38,30,-37,49}));
    AddState(29,new State(-190));
    AddState(30,new State(new int[]{126,160,41,159,128,37,151,38,143,39,144,40,149,41,147,42,148,43,166,44,183,45,180,59,132,93,133,94,174,96,131,92,40,82,129,124,130,125,33,126,45,127,43,128,172,135,141,-203,42,-203,47,-203,191,-203,192,-203,38,-203,186,-203,187,-203,188,-203,189,-203,184,-203,185,-203,139,-203,138,-203,127,-203,44,-203,125,-203,173,-203,145,-203,146,-203,140,-203,152,-203,59,-203},new int[]{-39,31,-35,32,-4,88,-44,26,-45,27,-65,28,-58,89,-57,58,-40,90,-43,95,-47,123,-42,80,-41,117,-59,118,-60,119,-61,120,-63,121,-62,129,-53,130,-29,131,-28,134}));
    AddState(31,new State(-99));
    AddState(32,new State(new int[]{126,34,41,159,44,87},new int[]{-39,33,-36,35}));
    AddState(33,new State(-100));
    AddState(34,new State(-101));
    AddState(35,new State(new int[]{128,37,151,38,143,39,144,40,149,41,147,42,148,43,166,44,183,45,180,59,132,93,133,94,174,96,131,92,40,82,129,124,130,125,33,126,45,127,43,128,172,135},new int[]{-4,36,-44,26,-45,27,-65,28,-58,89,-57,58,-40,90,-43,95,-47,123,-42,80,-41,117,-59,118,-60,119,-61,120,-63,121,-62,129,-53,130,-29,131,-28,134}));
    AddState(36,new State(new int[]{43,13,45,14,42,15,47,16,191,17,192,18,38,19,186,20,187,21,188,22,189,23,184,24,185,25,126,-96,41,-96,44,-96},new int[]{-64,11}));
    AddState(37,new State(new int[]{40,-194,131,-110,141,-110,43,-110,45,-110,42,-110,47,-110,191,-110,192,-110,38,-110,186,-110,187,-110,188,-110,189,-110,184,-110,185,-110,139,-110,138,-110,127,-110,126,-110,41,-110,44,-110,125,-110,173,-110,172,-110,145,-110,146,-110,140,-110,152,-110,59,-110}));
    AddState(38,new State(-195));
    AddState(39,new State(new int[]{40,-196,141,-160,43,-160,45,-160,42,-160,47,-160,191,-160,192,-160,38,-160,186,-160,187,-160,188,-160,189,-160,184,-160,185,-160,139,-160,138,-160,127,-160,126,-160,41,-160,44,-160,125,-160,173,-160,172,-160,145,-160,146,-160,140,-160,152,-160,59,-160}));
    AddState(40,new State(new int[]{40,-197,141,-161,43,-161,45,-161,42,-161,47,-161,191,-161,192,-161,38,-161,186,-161,187,-161,188,-161,189,-161,184,-161,185,-161,139,-161,138,-161,127,-161,126,-161,41,-161,44,-161,125,-161,173,-161,172,-161,145,-161,146,-161,140,-161,152,-161,59,-161}));
    AddState(41,new State(new int[]{40,-198,141,-164,43,-164,45,-164,42,-164,47,-164,191,-164,192,-164,38,-164,186,-164,187,-164,188,-164,189,-164,184,-164,185,-164,139,-164,138,-164,127,-164,126,-164,41,-164,44,-164,125,-164,173,-164,172,-164,145,-164,146,-164,140,-164,152,-164,59,-164}));
    AddState(42,new State(new int[]{40,-199,141,-162,43,-162,45,-162,42,-162,47,-162,191,-162,192,-162,38,-162,186,-162,187,-162,188,-162,189,-162,184,-162,185,-162,139,-162,138,-162,127,-162,126,-162,41,-162,44,-162,125,-162,173,-162,172,-162,145,-162,146,-162,140,-162,152,-162,59,-162}));
    AddState(43,new State(new int[]{40,-200,141,-163,43,-163,45,-163,42,-163,47,-163,191,-163,192,-163,38,-163,186,-163,187,-163,188,-163,189,-163,184,-163,185,-163,139,-163,138,-163,127,-163,126,-163,41,-163,44,-163,125,-163,173,-163,172,-163,145,-163,146,-163,140,-163,152,-163,59,-163}));
    AddState(44,new State(-201));
    AddState(45,new State(new int[]{128,51,151,38,143,52,144,53,149,54,147,55,148,56,166,44,183,57,180,59,40,-202},new int[]{-65,46,-58,50,-57,58}));
    AddState(46,new State(new int[]{40,48},new int[]{-66,47,-38,30,-37,49}));
    AddState(47,new State(-192));
    AddState(48,new State(-205));
    AddState(49,new State(-204));
    AddState(50,new State(-193));
    AddState(51,new State(-194));
    AddState(52,new State(-196));
    AddState(53,new State(-197));
    AddState(54,new State(-198));
    AddState(55,new State(-199));
    AddState(56,new State(-200));
    AddState(57,new State(-202));
    AddState(58,new State(-149));
    AddState(59,new State(new int[]{40,60}));
    AddState(60,new State(new int[]{128,37,151,38,143,52,144,53,149,54,147,55,148,56,166,44,183,45,180,59,132,93,133,94,174,96},new int[]{-44,61,-45,157,-65,28,-58,89,-57,58,-40,158,-43,95}));
    AddState(61,new State(new int[]{44,62}));
    AddState(62,new State(new int[]{132,93,133,94,128,37,174,96,131,92,151,38,143,39,144,40,149,41,147,42,148,43,166,44,183,45,180,59,40,82,129,124,130,125,33,126,45,127,43,128,172,135},new int[]{-47,63,-42,80,-40,90,-43,95,-41,117,-45,27,-65,28,-58,89,-57,58,-59,118,-60,119,-61,120,-63,121,-62,129,-4,144,-44,26,-53,130,-29,131,-28,134}));
    AddState(63,new State(new int[]{41,64,44,65,43,-166,45,-166,42,-166,47,-166,191,-166,192,-166,38,-166,186,-166,187,-166,188,-166,189,-166,184,-166,185,-166}));
    AddState(64,new State(-145));
    AddState(65,new State(new int[]{132,93,133,94,128,37,174,96,131,92,151,38,143,39,144,40,149,41,147,42,148,43,166,44,183,45,180,59,40,82,129,124,130,125,33,126,45,127,43,128,172,135,41,-143,44,-143},new int[]{-56,66,-47,79,-42,80,-40,90,-43,95,-41,117,-45,27,-65,28,-58,89,-57,58,-59,118,-60,119,-61,120,-63,121,-62,129,-4,144,-44,26,-53,130,-29,131,-28,134}));
    AddState(66,new State(new int[]{41,67,44,68}));
    AddState(67,new State(-146));
    AddState(68,new State(new int[]{129,76,143,77,144,78,41,-139,44,-139},new int[]{-55,69}));
    AddState(69,new State(new int[]{41,70,44,71}));
    AddState(70,new State(-147));
    AddState(71,new State(new int[]{181,74,182,75,41,-136},new int[]{-54,72}));
    AddState(72,new State(new int[]{41,73}));
    AddState(73,new State(-148));
    AddState(74,new State(-137));
    AddState(75,new State(-138));
    AddState(76,new State(-140));
    AddState(77,new State(-141));
    AddState(78,new State(-142));
    AddState(79,new State(new int[]{41,-144,44,-144,43,-166,45,-166,42,-166,47,-166,191,-166,192,-166,38,-166,186,-166,187,-166,188,-166,189,-166,184,-166,185,-166}));
    AddState(80,new State(new int[]{40,82,141,-152,43,-152,45,-152,42,-152,47,-152,191,-152,192,-152,38,-152,186,-152,187,-152,188,-152,189,-152,184,-152,185,-152,139,-152,138,-152,127,-152,126,-152,41,-152,44,-152,125,-152,173,-152,172,-152,145,-152,146,-152,140,-152,152,-152,59,-152},new int[]{-59,81}));
    AddState(81,new State(-186));
    AddState(82,new State(new int[]{41,83,128,37,151,38,143,39,144,40,149,41,147,42,148,43,166,44,183,45,180,59,132,93,133,94,174,96,131,92,40,82,129,124,130,125,33,126,45,127,43,128,172,135},new int[]{-35,84,-4,88,-44,26,-45,27,-65,28,-58,89,-57,58,-40,90,-43,95,-47,123,-42,80,-41,117,-59,118,-60,119,-61,120,-63,121,-62,129,-53,130,-29,131,-28,134}));
    AddState(83,new State(-187));
    AddState(84,new State(new int[]{41,85,126,86,44,87},new int[]{-36,35}));
    AddState(85,new State(-188));
    AddState(86,new State(-189));
    AddState(87,new State(-98));
    AddState(88,new State(new int[]{43,13,45,14,42,15,47,16,191,17,192,18,38,19,186,20,187,21,188,22,189,23,184,24,185,25,126,-97,41,-97,44,-97},new int[]{-64,11}));
    AddState(89,new State(-191));
    AddState(90,new State(new int[]{131,92,141,-113,43,-113,45,-113,42,-113,47,-113,191,-113,192,-113,38,-113,186,-113,187,-113,188,-113,189,-113,184,-113,185,-113,139,-113,138,-113,127,-113,126,-113,41,-113,44,-113,125,-113,173,-113,172,-113,145,-113,146,-113,140,-113,152,-113,59,-113},new int[]{-41,91}));
    AddState(91,new State(-105));
    AddState(92,new State(-107));
    AddState(93,new State(-108));
    AddState(94,new State(-109));
    AddState(95,new State(-111));
    AddState(96,new State(new int[]{40,97}));
    AddState(97,new State(new int[]{130,147},new int[]{-52,98,-51,156}));
    AddState(98,new State(new int[]{44,99}));
    AddState(99,new State(new int[]{123,100,130,147},new int[]{-51,146}));
    AddState(100,new State(new int[]{123,104},new int[]{-49,101}));
    AddState(101,new State(new int[]{125,102}));
    AddState(102,new State(new int[]{41,103}));
    AddState(103,new State(-134));
    AddState(104,new State(new int[]{143,111,144,112,129,113,130,114,128,37,151,38,149,41,147,42,148,43,166,44,183,45,180,59,132,93,133,94,174,96,131,92,40,82,33,126,45,127,43,128,172,135,125,-114,44,-114},new int[]{-48,105,-46,145,-45,115,-65,28,-58,89,-57,58,-47,116,-42,80,-40,90,-43,95,-41,117,-59,118,-60,119,-61,120,-63,121,-62,129,-4,144,-44,26,-53,130,-29,131,-28,134}));
    AddState(105,new State(new int[]{125,106,44,109}));
    AddState(106,new State(new int[]{44,107,125,-123}));
    AddState(107,new State(new int[]{123,104},new int[]{-49,108}));
    AddState(108,new State(-124));
    AddState(109,new State(new int[]{143,111,144,112,129,113,130,114,128,37,151,38,149,41,147,42,148,43,166,44,183,45,180,59,132,93,133,94,174,96,131,92,40,82,33,126,45,127,43,128,172,135,125,-114,44,-114},new int[]{-46,110,-45,115,-65,28,-58,89,-57,58,-47,116,-42,80,-40,90,-43,95,-41,117,-59,118,-60,119,-61,120,-63,121,-62,129,-4,144,-44,26,-53,130,-29,131,-28,134}));
    AddState(110,new State(-122));
    AddState(111,new State(new int[]{125,-115,44,-115,40,-196,43,-160,45,-160,42,-160,47,-160,191,-160,192,-160,38,-160,186,-160,187,-160,188,-160,189,-160,184,-160,185,-160}));
    AddState(112,new State(new int[]{125,-116,44,-116,40,-197,43,-161,45,-161,42,-161,47,-161,191,-161,192,-161,38,-161,186,-161,187,-161,188,-161,189,-161,184,-161,185,-161}));
    AddState(113,new State(new int[]{125,-117,44,-117,43,-156,45,-156,42,-156,47,-156,191,-156,192,-156,38,-156,186,-156,187,-156,188,-156,189,-156,184,-156,185,-156}));
    AddState(114,new State(new int[]{125,-118,44,-118,43,-157,45,-157,42,-157,47,-157,191,-157,192,-157,38,-157,186,-157,187,-157,188,-157,189,-157,184,-157,185,-157}));
    AddState(115,new State(new int[]{125,-119,44,-119,43,-112,45,-112,42,-112,47,-112,191,-112,192,-112,38,-112,186,-112,187,-112,188,-112,189,-112,184,-112,185,-112}));
    AddState(116,new State(new int[]{125,-120,44,-120,43,-166,45,-166,42,-166,47,-166,191,-166,192,-166,38,-166,186,-166,187,-166,188,-166,189,-166,184,-166,185,-166}));
    AddState(117,new State(-106));
    AddState(118,new State(-154));
    AddState(119,new State(-155));
    AddState(120,new State(-158));
    AddState(121,new State(new int[]{128,37,151,38,143,39,144,40,149,41,147,42,148,43,166,44,183,45,180,59,132,93,133,94,174,96,131,92,40,82,129,124,130,125,33,126,45,127,43,128,172,135},new int[]{-4,122,-44,26,-45,27,-65,28,-58,89,-57,58,-40,90,-43,95,-47,123,-42,80,-41,117,-59,118,-60,119,-61,120,-63,121,-62,129,-53,130,-29,131,-28,134}));
    AddState(122,new State(new int[]{43,13,45,14,42,15,47,16,191,17,192,18,38,19,186,20,187,21,188,22,189,23,184,24,185,25,141,-168,139,-168,138,-168,127,-168,126,-168,41,-168,44,-168,125,-168,173,-168,172,-168,145,-168,146,-168,140,-168,152,-168,59,-168},new int[]{-64,11}));
    AddState(123,new State(-166));
    AddState(124,new State(-156));
    AddState(125,new State(-157));
    AddState(126,new State(-169));
    AddState(127,new State(-170));
    AddState(128,new State(-171));
    AddState(129,new State(-159));
    AddState(130,new State(-167));
    AddState(131,new State(new int[]{173,132,172,135},new int[]{-28,143}));
    AddState(132,new State(new int[]{128,37,151,38,143,39,144,40,149,41,147,42,148,43,166,44,183,45,180,59,132,93,133,94,174,96,131,92,40,82,129,124,130,125,33,126,45,127,43,128,172,135},new int[]{-4,133,-44,26,-45,27,-65,28,-58,89,-57,58,-40,90,-43,95,-47,123,-42,80,-41,117,-59,118,-60,119,-61,120,-63,121,-62,129,-53,130,-29,131,-28,134}));
    AddState(133,new State(new int[]{43,13,45,14,42,15,47,16,191,17,192,18,38,19,186,20,187,21,188,22,189,23,184,24,185,25,141,-135,139,-135,138,-135,127,-135,126,-135,41,-135,44,-135,125,-135,173,-135,172,-135,145,-135,146,-135,140,-135,152,-135,59,-135},new int[]{-64,11}));
    AddState(134,new State(-68));
    AddState(135,new State(new int[]{126,139,132,142},new int[]{-27,136}));
    AddState(136,new State(new int[]{184,137}));
    AddState(137,new State(new int[]{128,37,151,38,143,39,144,40,149,41,147,42,148,43,166,44,183,45,180,59,132,93,133,94,174,96,131,92,40,82,129,124,130,125,33,126,45,127,43,128,172,135},new int[]{-4,138,-44,26,-45,27,-65,28,-58,89,-57,58,-40,90,-43,95,-47,123,-42,80,-41,117,-59,118,-60,119,-61,120,-63,121,-62,129,-53,130,-29,131,-28,134}));
    AddState(138,new State(new int[]{43,13,45,14,42,15,47,16,191,17,192,18,38,19,186,20,187,21,188,22,189,23,184,24,185,25,173,-66,172,-66},new int[]{-64,11}));
    AddState(139,new State(new int[]{184,140}));
    AddState(140,new State(new int[]{128,37,151,38,143,39,144,40,149,41,147,42,148,43,166,44,183,45,180,59,132,93,133,94,174,96,131,92,40,82,129,124,130,125,33,126,45,127,43,128,172,135},new int[]{-4,141,-44,26,-45,27,-65,28,-58,89,-57,58,-40,90,-43,95,-47,123,-42,80,-41,117,-59,118,-60,119,-61,120,-63,121,-62,129,-53,130,-29,131,-28,134}));
    AddState(141,new State(new int[]{43,13,45,14,42,15,47,16,191,17,192,18,38,19,186,20,187,21,188,22,189,23,184,24,185,25,173,-67,172,-67},new int[]{-64,11}));
    AddState(142,new State(-65));
    AddState(143,new State(-69));
    AddState(144,new State(new int[]{43,13,45,14,42,15,47,16,191,17,192,18,38,19,186,20,187,21,188,22,189,23,184,24,185,25},new int[]{-64,11}));
    AddState(145,new State(-121));
    AddState(146,new State(-133));
    AddState(147,new State(new int[]{44,148}));
    AddState(148,new State(new int[]{175,150,159,151,176,152,177,153,178,154,179,155},new int[]{-50,149}));
    AddState(149,new State(-131));
    AddState(150,new State(-125));
    AddState(151,new State(-126));
    AddState(152,new State(-127));
    AddState(153,new State(-128));
    AddState(154,new State(-129));
    AddState(155,new State(-130));
    AddState(156,new State(-132));
    AddState(157,new State(-112));
    AddState(158,new State(-113));
    AddState(159,new State(-206));
    AddState(160,new State(new int[]{41,159},new int[]{-39,161}));
    AddState(161,new State(-102));
    AddState(162,new State(new int[]{142,163}));
    AddState(163,new State(new int[]{128,37,151,38,143,39,144,40,149,41,147,42,148,43,166,44,183,45,180,59,132,93,133,94,174,96,131,92,40,82,129,124,130,125,33,126,45,127,43,128,172,135},new int[]{-33,164,-4,165,-44,26,-45,27,-65,28,-58,89,-57,58,-40,90,-43,95,-47,123,-42,80,-41,117,-59,118,-60,119,-61,120,-63,121,-62,129,-53,130,-29,131,-28,134}));
    AddState(164,new State(-89));
    AddState(165,new State(new int[]{44,169,145,171,146,172,43,13,45,14,42,15,47,16,191,17,192,18,38,19,186,20,187,21,188,22,189,23,184,24,185,25,139,-93,138,-93,127,-93},new int[]{-34,166,-64,11}));
    AddState(166,new State(new int[]{44,167,139,-92,138,-92,127,-92}));
    AddState(167,new State(new int[]{128,37,151,38,143,39,144,40,149,41,147,42,148,43,166,44,183,45,180,59,132,93,133,94,174,96,131,92,40,82,129,124,130,125,33,126,45,127,43,128,172,135},new int[]{-33,168,-4,165,-44,26,-45,27,-65,28,-58,89,-57,58,-40,90,-43,95,-47,123,-42,80,-41,117,-59,118,-60,119,-61,120,-63,121,-62,129,-53,130,-29,131,-28,134}));
    AddState(168,new State(-90));
    AddState(169,new State(new int[]{128,37,151,38,143,39,144,40,149,41,147,42,148,43,166,44,183,45,180,59,132,93,133,94,174,96,131,92,40,82,129,124,130,125,33,126,45,127,43,128,172,135},new int[]{-33,170,-4,165,-44,26,-45,27,-65,28,-58,89,-57,58,-40,90,-43,95,-47,123,-42,80,-41,117,-59,118,-60,119,-61,120,-63,121,-62,129,-53,130,-29,131,-28,134}));
    AddState(170,new State(-91));
    AddState(171,new State(-94));
    AddState(172,new State(-95));
    AddState(173,new State(new int[]{132,93,133,94,128,181,174,96},new int[]{-31,174,-40,179,-43,95}));
    AddState(174,new State(new int[]{184,175}));
    AddState(175,new State(new int[]{128,37,151,38,143,39,144,40,149,41,147,42,148,43,166,44,183,45,180,59,132,93,133,94,174,96,131,92,40,82,129,124,130,125,33,126,45,127,43,128,172,135},new int[]{-32,176,-4,178,-44,26,-45,27,-65,28,-58,89,-57,58,-40,90,-43,95,-47,123,-42,80,-41,117,-59,118,-60,119,-61,120,-63,121,-62,129,-53,130,-29,131,-28,134}));
    AddState(176,new State(new int[]{140,173,138,-87},new int[]{-8,177}));
    AddState(177,new State(-88));
    AddState(178,new State(new int[]{43,13,45,14,42,15,47,16,191,17,192,18,38,19,186,20,187,21,188,22,189,23,184,24,185,25,140,-151,138,-151},new int[]{-64,11}));
    AddState(179,new State(new int[]{131,92},new int[]{-41,180}));
    AddState(180,new State(-104));
    AddState(181,new State(-110));
    AddState(182,new State(new int[]{128,37,151,38,143,39,144,40,149,41,147,42,148,43,166,44,183,45,180,59,132,93,133,94,174,96,131,92,40,82,129,124,130,125,33,126,45,127,43,128,172,135},new int[]{-4,183,-44,26,-45,27,-65,28,-58,89,-57,58,-40,90,-43,95,-47,123,-42,80,-41,117,-59,118,-60,119,-61,120,-63,121,-62,129,-53,130,-29,131,-28,134}));
    AddState(183,new State(new int[]{141,162,43,13,45,14,42,15,47,16,191,17,192,18,38,19,186,20,187,21,188,22,189,23,184,24,185,25,139,-11,138,-11,127,-11},new int[]{-9,184,-64,11}));
    AddState(184,new State(-10));
    AddState(185,new State(new int[]{128,37,151,38,143,39,144,40,149,41,147,42,148,43,166,44,183,45,180,59,132,93,133,94,174,96,131,92,40,82,129,124,130,125,33,126,45,127,43,128,172,135},new int[]{-4,186,-44,26,-45,27,-65,28,-58,89,-57,58,-40,90,-43,95,-47,123,-42,80,-41,117,-59,118,-60,119,-61,120,-63,121,-62,129,-53,130,-29,131,-28,134}));
    AddState(186,new State(new int[]{43,13,45,14,42,15,47,16,191,17,192,18,38,19,186,20,187,21,188,22,189,23,184,24,185,25,127,-3},new int[]{-64,11}));
    AddState(187,new State(-4));
    AddState(188,new State(new int[]{59,189,127,-12}));
    AddState(189,new State(new int[]{150,191,151,284,137,288,127,-13},new int[]{-5,190,-10,188,-11,277,-12,278,-13,281,-14,285}));
    AddState(190,new State(-14));
    AddState(191,new State(new int[]{140,192,168,275,136,276}));
    AddState(192,new State(new int[]{126,262,132,273,131,274,133,94,128,181,174,96},new int[]{-15,193,-16,269,-40,260,-43,95}));
    AddState(193,new State(new int[]{46,194}));
    AddState(194,new State(new int[]{132,93,133,94,128,181,174,96},new int[]{-16,195,-40,260,-43,95}));
    AddState(195,new State(new int[]{184,196}));
    AddState(196,new State(new int[]{128,37,151,38,143,39,144,40,149,41,147,42,148,43,166,44,183,45,180,59,132,93,133,94,174,96,131,92,40,82,129,124,130,125,33,126,45,127,43,128,172,135},new int[]{-17,197,-4,259,-44,26,-45,27,-65,28,-58,89,-57,58,-40,90,-43,95,-47,123,-42,80,-41,117,-59,118,-60,119,-61,120,-63,121,-62,129,-53,130,-29,131,-28,134}));
    AddState(197,new State(new int[]{152,199,59,-28,127,-28},new int[]{-18,198}));
    AddState(198,new State(-29));
    AddState(199,new State(new int[]{153,200}));
    AddState(200,new State(new int[]{126,248,154,249,155,250,156,251,157,252,158,253,159,254,160,255,161,256,162,257,163,258},new int[]{-19,201}));
    AddState(201,new State(new int[]{169,205,164,213,165,220,166,228,167,233,170,238,171,244,59,-84,127,-84},new int[]{-30,202,-21,203,-20,211,-24,218,-25,226,-26,231,-22,236,-23,242}));
    AddState(202,new State(-86));
    AddState(203,new State(new int[]{169,205,164,213,165,220,166,228,167,233,170,238,171,244,59,-70,127,-70},new int[]{-30,204,-21,203,-20,211,-24,218,-25,226,-26,231,-22,236,-23,242}));
    AddState(204,new State(-71));
    AddState(205,new State(new int[]{184,206,126,210}));
    AddState(206,new State(new int[]{143,207,144,208,126,209}));
    AddState(207,new State(-51));
    AddState(208,new State(-52));
    AddState(209,new State(-54));
    AddState(210,new State(-53));
    AddState(211,new State(new int[]{169,205,164,213,165,220,166,228,167,233,170,238,171,244,59,-72,127,-72},new int[]{-30,212,-21,203,-20,211,-24,218,-25,226,-26,231,-22,236,-23,242}));
    AddState(212,new State(-73));
    AddState(213,new State(new int[]{184,214,126,217}));
    AddState(214,new State(new int[]{129,215,126,216}));
    AddState(215,new State(-48));
    AddState(216,new State(-50));
    AddState(217,new State(-49));
    AddState(218,new State(new int[]{169,205,164,213,165,220,166,228,167,233,170,238,171,244,59,-74,127,-74},new int[]{-30,219,-21,203,-20,211,-24,218,-25,226,-26,231,-22,236,-23,242}));
    AddState(219,new State(-75));
    AddState(220,new State(new int[]{184,221,126,225}));
    AddState(221,new State(new int[]{143,222,144,223,126,224}));
    AddState(222,new State(-59));
    AddState(223,new State(-60));
    AddState(224,new State(-62));
    AddState(225,new State(-61));
    AddState(226,new State(new int[]{169,205,164,213,165,220,166,228,167,233,170,238,171,244,59,-76,127,-76},new int[]{-30,227,-21,203,-20,211,-24,218,-25,226,-26,231,-22,236,-23,242}));
    AddState(227,new State(-77));
    AddState(228,new State(new int[]{184,229}));
    AddState(229,new State(new int[]{133,230}));
    AddState(230,new State(-63));
    AddState(231,new State(new int[]{169,205,164,213,165,220,166,228,167,233,170,238,171,244,59,-78,127,-78},new int[]{-30,232,-21,203,-20,211,-24,218,-25,226,-26,231,-22,236,-23,242}));
    AddState(232,new State(-79));
    AddState(233,new State(new int[]{184,234}));
    AddState(234,new State(new int[]{133,235}));
    AddState(235,new State(-64));
    AddState(236,new State(new int[]{169,205,164,213,165,220,166,228,167,233,170,238,171,244,59,-80,127,-80},new int[]{-30,237,-21,203,-20,211,-24,218,-25,226,-26,231,-22,236,-23,242}));
    AddState(237,new State(-81));
    AddState(238,new State(new int[]{184,239,126,241}));
    AddState(239,new State(new int[]{133,240}));
    AddState(240,new State(-55));
    AddState(241,new State(-56));
    AddState(242,new State(new int[]{169,205,164,213,165,220,166,228,167,233,170,238,171,244,59,-82,127,-82},new int[]{-30,243,-21,203,-20,211,-24,218,-25,226,-26,231,-22,236,-23,242}));
    AddState(243,new State(-83));
    AddState(244,new State(new int[]{184,245,126,247}));
    AddState(245,new State(new int[]{133,246}));
    AddState(246,new State(-57));
    AddState(247,new State(-58));
    AddState(248,new State(-85));
    AddState(249,new State(-38));
    AddState(250,new State(-39));
    AddState(251,new State(-40));
    AddState(252,new State(-41));
    AddState(253,new State(-42));
    AddState(254,new State(-43));
    AddState(255,new State(-44));
    AddState(256,new State(-45));
    AddState(257,new State(-46));
    AddState(258,new State(-47));
    AddState(259,new State(new int[]{43,13,45,14,42,15,47,16,191,17,192,18,38,19,186,20,187,21,188,22,189,23,184,24,185,25,152,-150,59,-150,127,-150},new int[]{-64,11}));
    AddState(260,new State(new int[]{131,92},new int[]{-41,261}));
    AddState(261,new State(-103));
    AddState(262,new State(new int[]{46,263,184,267}));
    AddState(263,new State(new int[]{132,93,133,94,128,181,174,96},new int[]{-16,264,-40,260,-43,95}));
    AddState(264,new State(new int[]{184,265}));
    AddState(265,new State(new int[]{128,37,151,38,143,39,144,40,149,41,147,42,148,43,166,44,183,45,180,59,132,93,133,94,174,96,131,92,40,82,129,124,130,125,33,126,45,127,43,128,172,135},new int[]{-17,266,-4,259,-44,26,-45,27,-65,28,-58,89,-57,58,-40,90,-43,95,-47,123,-42,80,-41,117,-59,118,-60,119,-61,120,-63,121,-62,129,-53,130,-29,131,-28,134}));
    AddState(266,new State(-30));
    AddState(267,new State(new int[]{128,37,151,38,143,39,144,40,149,41,147,42,148,43,166,44,183,45,180,59,132,93,133,94,174,96,131,92,40,82,129,124,130,125,33,126,45,127,43,128,172,135},new int[]{-17,268,-4,259,-44,26,-45,27,-65,28,-58,89,-57,58,-40,90,-43,95,-47,123,-42,80,-41,117,-59,118,-60,119,-61,120,-63,121,-62,129,-53,130,-29,131,-28,134}));
    AddState(268,new State(-33));
    AddState(269,new State(new int[]{184,270}));
    AddState(270,new State(new int[]{128,37,151,38,143,39,144,40,149,41,147,42,148,43,166,44,183,45,180,59,132,93,133,94,174,96,131,92,40,82,129,124,130,125,33,126,45,127,43,128,172,135},new int[]{-17,271,-4,259,-44,26,-45,27,-65,28,-58,89,-57,58,-40,90,-43,95,-47,123,-42,80,-41,117,-59,118,-60,119,-61,120,-63,121,-62,129,-53,130,-29,131,-28,134}));
    AddState(271,new State(new int[]{152,199,59,-31,127,-31},new int[]{-18,272}));
    AddState(272,new State(-32));
    AddState(273,new State(new int[]{46,-26,131,-108}));
    AddState(274,new State(-27));
    AddState(275,new State(-34));
    AddState(276,new State(-35));
    AddState(277,new State(-15));
    AddState(278,new State(new int[]{59,279,127,-16}));
    AddState(279,new State(new int[]{150,191,151,284,137,288,127,-17},new int[]{-5,280,-10,188,-11,277,-12,278,-13,281,-14,285}));
    AddState(280,new State(-18));
    AddState(281,new State(new int[]{59,282,127,-19}));
    AddState(282,new State(new int[]{150,191,151,284,137,288,127,-20},new int[]{-5,283,-10,188,-11,277,-12,278,-13,281,-14,285}));
    AddState(283,new State(-21));
    AddState(284,new State(-36));
    AddState(285,new State(new int[]{59,286,127,-22}));
    AddState(286,new State(new int[]{150,191,151,284,137,288,127,-23},new int[]{-5,287,-10,188,-11,277,-12,278,-13,281,-14,285}));
    AddState(287,new State(-24));
    AddState(288,new State(-37));
    AddState(289,new State(-5));
    AddState(290,new State(-25));

    rules=new Rule[207];
    rules[1]=new Rule(-2, new int[]{-1,127});
    rules[2]=new Rule(-1, new int[]{-3});
    rules[3]=new Rule(-1, new int[]{184,-4});
    rules[4]=new Rule(-1, new int[]{-5});
    rules[5]=new Rule(-1, new int[]{-6});
    rules[6]=new Rule(-3, new int[]{-7});
    rules[7]=new Rule(-3, new int[]{-7,-3});
    rules[8]=new Rule(-7, new int[]{139,-8,138,-4,-9});
    rules[9]=new Rule(-7, new int[]{139,-8,138,-4});
    rules[10]=new Rule(-7, new int[]{138,-4,-9});
    rules[11]=new Rule(-7, new int[]{138,-4});
    rules[12]=new Rule(-5, new int[]{-10});
    rules[13]=new Rule(-5, new int[]{-10,59});
    rules[14]=new Rule(-5, new int[]{-10,59,-5});
    rules[15]=new Rule(-5, new int[]{-11});
    rules[16]=new Rule(-5, new int[]{-12});
    rules[17]=new Rule(-5, new int[]{-12,59});
    rules[18]=new Rule(-5, new int[]{-12,59,-5});
    rules[19]=new Rule(-5, new int[]{-13});
    rules[20]=new Rule(-5, new int[]{-13,59});
    rules[21]=new Rule(-5, new int[]{-13,59,-5});
    rules[22]=new Rule(-5, new int[]{-14});
    rules[23]=new Rule(-5, new int[]{-14,59});
    rules[24]=new Rule(-5, new int[]{-14,59,-5});
    rules[25]=new Rule(-6, new int[]{127});
    rules[26]=new Rule(-15, new int[]{132});
    rules[27]=new Rule(-15, new int[]{131});
    rules[28]=new Rule(-10, new int[]{150,140,-15,46,-16,184,-17});
    rules[29]=new Rule(-10, new int[]{150,140,-15,46,-16,184,-17,-18});
    rules[30]=new Rule(-10, new int[]{150,140,126,46,-16,184,-17});
    rules[31]=new Rule(-10, new int[]{150,140,-16,184,-17});
    rules[32]=new Rule(-10, new int[]{150,140,-16,184,-17,-18});
    rules[33]=new Rule(-10, new int[]{150,140,126,184,-17});
    rules[34]=new Rule(-11, new int[]{150,168});
    rules[35]=new Rule(-12, new int[]{150,136});
    rules[36]=new Rule(-13, new int[]{151});
    rules[37]=new Rule(-14, new int[]{137});
    rules[38]=new Rule(-19, new int[]{154});
    rules[39]=new Rule(-19, new int[]{155});
    rules[40]=new Rule(-19, new int[]{156});
    rules[41]=new Rule(-19, new int[]{157});
    rules[42]=new Rule(-19, new int[]{158});
    rules[43]=new Rule(-19, new int[]{159});
    rules[44]=new Rule(-19, new int[]{160});
    rules[45]=new Rule(-19, new int[]{161});
    rules[46]=new Rule(-19, new int[]{162});
    rules[47]=new Rule(-19, new int[]{163});
    rules[48]=new Rule(-20, new int[]{164,184,129});
    rules[49]=new Rule(-20, new int[]{164,126});
    rules[50]=new Rule(-20, new int[]{164,184,126});
    rules[51]=new Rule(-21, new int[]{169,184,143});
    rules[52]=new Rule(-21, new int[]{169,184,144});
    rules[53]=new Rule(-21, new int[]{169,126});
    rules[54]=new Rule(-21, new int[]{169,184,126});
    rules[55]=new Rule(-22, new int[]{170,184,133});
    rules[56]=new Rule(-22, new int[]{170,126});
    rules[57]=new Rule(-23, new int[]{171,184,133});
    rules[58]=new Rule(-23, new int[]{171,126});
    rules[59]=new Rule(-24, new int[]{165,184,143});
    rules[60]=new Rule(-24, new int[]{165,184,144});
    rules[61]=new Rule(-24, new int[]{165,126});
    rules[62]=new Rule(-24, new int[]{165,184,126});
    rules[63]=new Rule(-25, new int[]{166,184,133});
    rules[64]=new Rule(-26, new int[]{167,184,133});
    rules[65]=new Rule(-27, new int[]{132});
    rules[66]=new Rule(-28, new int[]{172,-27,184,-4});
    rules[67]=new Rule(-28, new int[]{172,126,184,-4});
    rules[68]=new Rule(-29, new int[]{-28});
    rules[69]=new Rule(-29, new int[]{-29,-28});
    rules[70]=new Rule(-30, new int[]{-21});
    rules[71]=new Rule(-30, new int[]{-21,-30});
    rules[72]=new Rule(-30, new int[]{-20});
    rules[73]=new Rule(-30, new int[]{-20,-30});
    rules[74]=new Rule(-30, new int[]{-24});
    rules[75]=new Rule(-30, new int[]{-24,-30});
    rules[76]=new Rule(-30, new int[]{-25});
    rules[77]=new Rule(-30, new int[]{-25,-30});
    rules[78]=new Rule(-30, new int[]{-26});
    rules[79]=new Rule(-30, new int[]{-26,-30});
    rules[80]=new Rule(-30, new int[]{-22});
    rules[81]=new Rule(-30, new int[]{-22,-30});
    rules[82]=new Rule(-30, new int[]{-23});
    rules[83]=new Rule(-30, new int[]{-23,-30});
    rules[84]=new Rule(-18, new int[]{152,153,-19});
    rules[85]=new Rule(-18, new int[]{152,153,126});
    rules[86]=new Rule(-18, new int[]{152,153,-19,-30});
    rules[87]=new Rule(-8, new int[]{140,-31,184,-32});
    rules[88]=new Rule(-8, new int[]{140,-31,184,-32,-8});
    rules[89]=new Rule(-9, new int[]{141,142,-33});
    rules[90]=new Rule(-33, new int[]{-4,-34,44,-33});
    rules[91]=new Rule(-33, new int[]{-4,44,-33});
    rules[92]=new Rule(-33, new int[]{-4,-34});
    rules[93]=new Rule(-33, new int[]{-4});
    rules[94]=new Rule(-34, new int[]{145});
    rules[95]=new Rule(-34, new int[]{146});
    rules[96]=new Rule(-35, new int[]{-35,-36,-4});
    rules[97]=new Rule(-35, new int[]{-4});
    rules[98]=new Rule(-36, new int[]{44});
    rules[99]=new Rule(-37, new int[]{-38,-39});
    rules[100]=new Rule(-37, new int[]{-38,-35,-39});
    rules[101]=new Rule(-37, new int[]{-38,-35,126});
    rules[102]=new Rule(-37, new int[]{-38,126,-39});
    rules[103]=new Rule(-16, new int[]{-40,-41});
    rules[104]=new Rule(-31, new int[]{-40,-41});
    rules[105]=new Rule(-42, new int[]{-40,-41});
    rules[106]=new Rule(-42, new int[]{-41});
    rules[107]=new Rule(-41, new int[]{131});
    rules[108]=new Rule(-40, new int[]{132});
    rules[109]=new Rule(-40, new int[]{133});
    rules[110]=new Rule(-40, new int[]{128});
    rules[111]=new Rule(-40, new int[]{-43});
    rules[112]=new Rule(-44, new int[]{-45});
    rules[113]=new Rule(-44, new int[]{-40});
    rules[114]=new Rule(-46, new int[]{});
    rules[115]=new Rule(-46, new int[]{143});
    rules[116]=new Rule(-46, new int[]{144});
    rules[117]=new Rule(-46, new int[]{129});
    rules[118]=new Rule(-46, new int[]{130});
    rules[119]=new Rule(-46, new int[]{-45});
    rules[120]=new Rule(-46, new int[]{-47});
    rules[121]=new Rule(-48, new int[]{-46});
    rules[122]=new Rule(-48, new int[]{-48,44,-46});
    rules[123]=new Rule(-49, new int[]{123,-48,125});
    rules[124]=new Rule(-49, new int[]{123,-48,125,44,-49});
    rules[125]=new Rule(-50, new int[]{175});
    rules[126]=new Rule(-50, new int[]{159});
    rules[127]=new Rule(-50, new int[]{176});
    rules[128]=new Rule(-50, new int[]{177});
    rules[129]=new Rule(-50, new int[]{178});
    rules[130]=new Rule(-50, new int[]{179});
    rules[131]=new Rule(-51, new int[]{130,44,-50});
    rules[132]=new Rule(-52, new int[]{-51});
    rules[133]=new Rule(-52, new int[]{-52,44,-51});
    rules[134]=new Rule(-43, new int[]{174,40,-52,44,123,-49,125,41});
    rules[135]=new Rule(-53, new int[]{-29,173,-4});
    rules[136]=new Rule(-54, new int[]{});
    rules[137]=new Rule(-54, new int[]{181});
    rules[138]=new Rule(-54, new int[]{182});
    rules[139]=new Rule(-55, new int[]{});
    rules[140]=new Rule(-55, new int[]{129});
    rules[141]=new Rule(-55, new int[]{143});
    rules[142]=new Rule(-55, new int[]{144});
    rules[143]=new Rule(-56, new int[]{});
    rules[144]=new Rule(-56, new int[]{-47});
    rules[145]=new Rule(-57, new int[]{180,40,-44,44,-47,41});
    rules[146]=new Rule(-57, new int[]{180,40,-44,44,-47,44,-56,41});
    rules[147]=new Rule(-57, new int[]{180,40,-44,44,-47,44,-56,44,-55,41});
    rules[148]=new Rule(-57, new int[]{180,40,-44,44,-47,44,-56,44,-55,44,-54,41});
    rules[149]=new Rule(-58, new int[]{-57});
    rules[150]=new Rule(-17, new int[]{-4});
    rules[151]=new Rule(-32, new int[]{-4});
    rules[152]=new Rule(-47, new int[]{-42});
    rules[153]=new Rule(-47, new int[]{-45});
    rules[154]=new Rule(-47, new int[]{-59});
    rules[155]=new Rule(-47, new int[]{-60});
    rules[156]=new Rule(-47, new int[]{129});
    rules[157]=new Rule(-47, new int[]{130});
    rules[158]=new Rule(-47, new int[]{-61});
    rules[159]=new Rule(-47, new int[]{-62});
    rules[160]=new Rule(-47, new int[]{143});
    rules[161]=new Rule(-47, new int[]{144});
    rules[162]=new Rule(-47, new int[]{147});
    rules[163]=new Rule(-47, new int[]{148});
    rules[164]=new Rule(-47, new int[]{149});
    rules[165]=new Rule(-4, new int[]{-44});
    rules[166]=new Rule(-4, new int[]{-47});
    rules[167]=new Rule(-4, new int[]{-53});
    rules[168]=new Rule(-61, new int[]{-63,-4});
    rules[169]=new Rule(-63, new int[]{33});
    rules[170]=new Rule(-63, new int[]{45});
    rules[171]=new Rule(-63, new int[]{43});
    rules[172]=new Rule(-62, new int[]{-4,-64,-4});
    rules[173]=new Rule(-64, new int[]{43});
    rules[174]=new Rule(-64, new int[]{45});
    rules[175]=new Rule(-64, new int[]{42});
    rules[176]=new Rule(-64, new int[]{47});
    rules[177]=new Rule(-64, new int[]{191});
    rules[178]=new Rule(-64, new int[]{192});
    rules[179]=new Rule(-64, new int[]{38});
    rules[180]=new Rule(-64, new int[]{186});
    rules[181]=new Rule(-64, new int[]{187});
    rules[182]=new Rule(-64, new int[]{188});
    rules[183]=new Rule(-64, new int[]{189});
    rules[184]=new Rule(-64, new int[]{184});
    rules[185]=new Rule(-64, new int[]{185});
    rules[186]=new Rule(-60, new int[]{-42,-59});
    rules[187]=new Rule(-59, new int[]{40,41});
    rules[188]=new Rule(-59, new int[]{40,-35,41});
    rules[189]=new Rule(-59, new int[]{40,-35,126});
    rules[190]=new Rule(-45, new int[]{-65,-66});
    rules[191]=new Rule(-45, new int[]{-58});
    rules[192]=new Rule(-45, new int[]{183,-65,-66});
    rules[193]=new Rule(-45, new int[]{183,-58});
    rules[194]=new Rule(-65, new int[]{128});
    rules[195]=new Rule(-65, new int[]{151});
    rules[196]=new Rule(-65, new int[]{143});
    rules[197]=new Rule(-65, new int[]{144});
    rules[198]=new Rule(-65, new int[]{149});
    rules[199]=new Rule(-65, new int[]{147});
    rules[200]=new Rule(-65, new int[]{148});
    rules[201]=new Rule(-65, new int[]{166});
    rules[202]=new Rule(-65, new int[]{183});
    rules[203]=new Rule(-66, new int[]{-38});
    rules[204]=new Rule(-66, new int[]{-37});
    rules[205]=new Rule(-38, new int[]{40});
    rules[206]=new Rule(-39, new int[]{41});

    nonTerminals = new string[] {"", "Start", "$accept", "DaxQueries", 
      "Expression", "DaxScript", "Empty", "DaxQuery", "Definitions", "OrderBy", 
      "CreateMeasure", "CreateKpi", "CreateMember", "Calculate", "Alter", "CubeName", 
      "MeasureName", "MeasureExpression", "CalculationProperty", "CalculationPropertyFormatType", 
      "CalculationPropertyAccuracy", "CalculationPropertyVisible", "CalculationPropertyDescription", 
      "CalculationPropertyDisplayFolder", "CalculationPropertyThousandSeparator", 
      "CalculationPropertyFormat", "CalculationPropertyAdditionalInfo", "VarName", 
      "VarDeclaration", "VarDeclarations", "CalculationPropertyParams", "QueryMeasureName", 
      "QueryMeasureExpression", "OrderByList", "Order", "Params1", "ParamSeparator", 
      "ParenthesisParameters", "StartArg", "EndArg", "TableRef", "ColumnRef", 
      "ColMeasureRef", "DataTable", "TableExpression", "FunctionCall", "DataTableValue", 
      "ScalarExpression", "DataTableValues", "DataTableRows", "DataTableColumnType", 
      "DataTableColumn", "DataTableColumns", "VarExpression", "RankXTies", "RankXOrder", 
      "RankXValue", "RankX", "RankXFunction", "ParenthesisExpression", "CalculateShortcut", 
      "UnaryExpression", "BinaryExpression", "UnaryOperator", "BinaryOperator", 
      "FunctionName", "FunctionArgs", };
  }

  protected override void DoAction(int action)
  {
    switch (action)
    {
      case 28: // CreateMeasure -> KWCREATE KWMEASURE CubeName '.' MeasureName EQ MeasureExpression 
#line 124 "../../GeneratorSource/parser.y"
			{ SpecifyFullMeasureText(location_stack.array[location_stack.top-7], location_stack.array[location_stack.top-1]); }
        break;
      case 29: // CreateMeasure -> KWCREATE KWMEASURE CubeName '.' MeasureName EQ MeasureExpression CalculationProperty 
#line 126 "../../GeneratorSource/parser.y"
			{ SpecifyFullMeasureText(location_stack.array[location_stack.top-8], location_stack.array[location_stack.top-2]); }
        break;
      case 30: // CreateMeasure -> KWCREATE KWMEASURE error '.' MeasureName EQ MeasureExpression 
#line 127 "../../GeneratorSource/parser.y"
			{ CallHdlr("Cube name expected before '.'", location_stack.array[location_stack.top-5]); }
        break;
      case 31: // CreateMeasure -> KWCREATE KWMEASURE MeasureName EQ MeasureExpression 
#line 128 "../../GeneratorSource/parser.y"
			{ SpecifyFullMeasureText(location_stack.array[location_stack.top-5], location_stack.array[location_stack.top-1]); }
        break;
      case 32: // CreateMeasure -> KWCREATE KWMEASURE MeasureName EQ MeasureExpression CalculationProperty 
#line 130 "../../GeneratorSource/parser.y"
			{ SpecifyFullMeasureText(location_stack.array[location_stack.top-6], location_stack.array[location_stack.top-2]); }
        break;
      case 33: // CreateMeasure -> KWCREATE KWMEASURE error EQ MeasureExpression 
#line 131 "../../GeneratorSource/parser.y"
			{ CallHdlr("Measure name expected", location_stack.array[location_stack.top-3]); }
        break;
      case 34: // CreateKpi -> KWCREATE KWKPI 
#line 135 "../../GeneratorSource/parser.y"
			{ CallHdlr("KPI are not yet supported", location_stack.array[location_stack.top-1]); }
        break;
      case 38: // CalculationPropertyFormatType -> KWGENERAL 
#line 151 "../../GeneratorSource/parser.y"
			{ SpecifyCalculationProperty(location_stack.array[location_stack.top-1]); }
        break;
      case 39: // CalculationPropertyFormatType -> KWNUMBERDECIMAL 
#line 152 "../../GeneratorSource/parser.y"
			{ SpecifyCalculationProperty(location_stack.array[location_stack.top-1]); }
        break;
      case 40: // CalculationPropertyFormatType -> KWNUMBERWHOLE 
#line 153 "../../GeneratorSource/parser.y"
			{ SpecifyCalculationProperty(location_stack.array[location_stack.top-1]); }
        break;
      case 41: // CalculationPropertyFormatType -> KWPERCENTAGE 
#line 154 "../../GeneratorSource/parser.y"
			{ SpecifyCalculationProperty(location_stack.array[location_stack.top-1]); }
        break;
      case 42: // CalculationPropertyFormatType -> KWSCIENTIFIC 
#line 155 "../../GeneratorSource/parser.y"
			{ SpecifyCalculationProperty(location_stack.array[location_stack.top-1]); }
        break;
      case 43: // CalculationPropertyFormatType -> KWCURRENCY 
#line 156 "../../GeneratorSource/parser.y"
			{ SpecifyCalculationProperty(location_stack.array[location_stack.top-1]); }
        break;
      case 44: // CalculationPropertyFormatType -> KWDATETIMECUSTOM 
#line 157 "../../GeneratorSource/parser.y"
			{ SpecifyCalculationProperty(location_stack.array[location_stack.top-1]); }
        break;
      case 45: // CalculationPropertyFormatType -> KWDATETIMESHORTDATEPATTERN 
#line 158 "../../GeneratorSource/parser.y"
			{ SpecifyCalculationProperty(location_stack.array[location_stack.top-1]); }
        break;
      case 46: // CalculationPropertyFormatType -> KWDATETIMEGENERAL 
#line 159 "../../GeneratorSource/parser.y"
			{ SpecifyCalculationProperty(location_stack.array[location_stack.top-1]); }
        break;
      case 47: // CalculationPropertyFormatType -> KWTEXT 
#line 160 "../../GeneratorSource/parser.y"
			{ SpecifyCalculationProperty(location_stack.array[location_stack.top-1]); }
        break;
      case 48: // CalculationPropertyAccuracy -> KWACCURACY EQ NUMBER 
#line 164 "../../GeneratorSource/parser.y"
			{ SpecifyCalcPropAccuracy(location_stack.array[location_stack.top-1]); }
        break;
      case 49: // CalculationPropertyAccuracy -> KWACCURACY error 
#line 165 "../../GeneratorSource/parser.y"
			{ CallHdlr("'=' is not specified", location_stack.array[location_stack.top-1]); }
        break;
      case 50: // CalculationPropertyAccuracy -> KWACCURACY EQ error 
#line 166 "../../GeneratorSource/parser.y"
			{ CallHdlr("Value of Accuracy is not a number", location_stack.array[location_stack.top-1]); }
        break;
      case 51: // CalculationPropertyVisible -> KWVISIBLE EQ KWTRUE 
#line 170 "../../GeneratorSource/parser.y"
			{ SpecifyCalcPropVisible(true); }
        break;
      case 52: // CalculationPropertyVisible -> KWVISIBLE EQ KWFALSE 
#line 171 "../../GeneratorSource/parser.y"
			{ SpecifyCalcPropVisible(false); }
        break;
      case 53: // CalculationPropertyVisible -> KWVISIBLE error 
#line 172 "../../GeneratorSource/parser.y"
			{ CallHdlr("'=' is not specified", location_stack.array[location_stack.top-1]); }
        break;
      case 54: // CalculationPropertyVisible -> KWVISIBLE EQ error 
#line 173 "../../GeneratorSource/parser.y"
			{ CallHdlr("Visible can be either TRUE or FALSE", location_stack.array[location_stack.top-1]); }
        break;
      case 55: // CalculationPropertyDescription -> KWDESCRIPTION EQ ESCAPEDTABLENAME 
#line 177 "../../GeneratorSource/parser.y"
			{ SpecifyCalcPropDescription(location_stack.array[location_stack.top-1]);  }
        break;
      case 56: // CalculationPropertyDescription -> KWDESCRIPTION error 
#line 178 "../../GeneratorSource/parser.y"
			{ CallHdlr("'=' is not specified", location_stack.array[location_stack.top-1]); }
        break;
      case 57: // CalculationPropertyDisplayFolder -> KWDISPLAYFOLDER EQ ESCAPEDTABLENAME 
#line 182 "../../GeneratorSource/parser.y"
			{ SpecifyCalcPropDisplayFolder(location_stack.array[location_stack.top-1]);  }
        break;
      case 58: // CalculationPropertyDisplayFolder -> KWDISPLAYFOLDER error 
#line 183 "../../GeneratorSource/parser.y"
			{ CallHdlr("'=' is not specified", location_stack.array[location_stack.top-1]); }
        break;
      case 59: // CalculationPropertyThousandSeparator -> KWTHOUSANDSEPARATOR EQ KWTRUE 
#line 187 "../../GeneratorSource/parser.y"
			{ SpecifyCalcPropThousandSeparator(true); }
        break;
      case 60: // CalculationPropertyThousandSeparator -> KWTHOUSANDSEPARATOR EQ KWFALSE 
#line 188 "../../GeneratorSource/parser.y"
			{ SpecifyCalcPropThousandSeparator(false); }
        break;
      case 61: // CalculationPropertyThousandSeparator -> KWTHOUSANDSEPARATOR error 
#line 189 "../../GeneratorSource/parser.y"
			{ CallHdlr("'=' is not specified", location_stack.array[location_stack.top-1]); }
        break;
      case 62: // CalculationPropertyThousandSeparator -> KWTHOUSANDSEPARATOR EQ error 
#line 190 "../../GeneratorSource/parser.y"
			{ CallHdlr("ThousandSeparator can be either TRUE or FALSE", location_stack.array[location_stack.top-1]); }
        break;
      case 63: // CalculationPropertyFormat -> KWFORMAT EQ ESCAPEDTABLENAME 
#line 194 "../../GeneratorSource/parser.y"
			{ SpecifyCalcPropFormat(location_stack.array[location_stack.top-1]); }
        break;
      case 64: // CalculationPropertyAdditionalInfo -> KWADDITIONALINFO EQ ESCAPEDTABLENAME 
#line 198 "../../GeneratorSource/parser.y"
			{ SpecifyCalcPropAdditionalInfo(location_stack.array[location_stack.top-1]); }
        break;
      case 67: // VarDeclaration -> KWVAR error EQ Expression 
#line 207 "../../GeneratorSource/parser.y"
			{ CallHdlr("Var name expected", location_stack.array[location_stack.top-3]); }
        break;
      case 85: // CalculationProperty -> KWCALCULATION KWPROPERTY error 
#line 233 "../../GeneratorSource/parser.y"
			{ CallHdlr("Wrong calculation property type.  Expected types: General, NumberDecimal, NumberWhole, Percentage, Scientific, Currency, DateTimeCustom, Visible, Description, DisplayFolder", location_stack.array[location_stack.top-2]); }
        break;
      case 98: // ParamSeparator -> ',' 
#line 264 "../../GeneratorSource/parser.y"
			{ NextParameter(location_stack.array[location_stack.top-1]); }
        break;
      case 99: // ParenthesisParameters -> StartArg EndArg 
#line 268 "../../GeneratorSource/parser.y"
			{ Match(location_stack.array[location_stack.top-2], location_stack.array[location_stack.top-1]); }
        break;
      case 100: // ParenthesisParameters -> StartArg Params1 EndArg 
#line 269 "../../GeneratorSource/parser.y"
			{ Match(location_stack.array[location_stack.top-3], location_stack.array[location_stack.top-1]); }
        break;
      case 101: // ParenthesisParameters -> StartArg Params1 error 
#line 270 "../../GeneratorSource/parser.y"
			{ CallHdlr("unmatched parentheses", location_stack.array[location_stack.top-1]); }
        break;
      case 102: // ParenthesisParameters -> StartArg error EndArg 
#line 271 "../../GeneratorSource/parser.y"
			{ yyval = value_stack.array[value_stack.top-1];
                                             CallHdlr("error in parameters", location_stack.array[location_stack.top-2]); }
        break;
      case 103: // MeasureName -> TableRef ColumnRef 
#line 276 "../../GeneratorSource/parser.y"
			{ CreateNewMeasure(location_stack.array[location_stack.top-2], location_stack.array[location_stack.top-1]); }
        break;
      case 134: // DataTable -> KWDATATABLE '(' DataTableColumns ',' '{' DataTableRows '}' ')' 
#line 343 "../../GeneratorSource/parser.y"
			{ StartFunction(location_stack.array[location_stack.top-8], value_stack.array[value_stack.top-8].str); }
        break;
      case 149: // RankXFunction -> RankX 
#line 376 "../../GeneratorSource/parser.y"
			{ StartFunction(location_stack.array[location_stack.top-1], value_stack.array[value_stack.top-1].str); }
        break;
      case 150: // MeasureExpression -> Expression 
#line 380 "../../GeneratorSource/parser.y"
			{ SpecifyMeasureExpression(location_stack.array[location_stack.top-1]); }
        break;
      case 187: // ParenthesisExpression -> '(' ')' 
#line 431 "../../GeneratorSource/parser.y"
			{ Match(location_stack.array[location_stack.top-2], location_stack.array[location_stack.top-1]); }
        break;
      case 188: // ParenthesisExpression -> '(' Params1 ')' 
#line 432 "../../GeneratorSource/parser.y"
			{ Match(location_stack.array[location_stack.top-3], location_stack.array[location_stack.top-1]); }
        break;
      case 189: // ParenthesisExpression -> '(' Params1 error 
#line 433 "../../GeneratorSource/parser.y"
			{ CallHdlr("unmatched parentheses", location_stack.array[location_stack.top-1]); }
        break;
      case 194: // FunctionName -> FUNCTION 
#line 444 "../../GeneratorSource/parser.y"
			{ StartFunction(location_stack.array[location_stack.top-1], value_stack.array[value_stack.top-1].str); }
        break;
      case 195: // FunctionName -> KWCALCULATE 
#line 445 "../../GeneratorSource/parser.y"
			{ StartFunction(location_stack.array[location_stack.top-1], value_stack.array[value_stack.top-1].str); }
        break;
      case 196: // FunctionName -> KWTRUE 
#line 446 "../../GeneratorSource/parser.y"
			{ StartFunction(location_stack.array[location_stack.top-1], value_stack.array[value_stack.top-1].str); }
        break;
      case 197: // FunctionName -> KWFALSE 
#line 447 "../../GeneratorSource/parser.y"
			{ StartFunction(location_stack.array[location_stack.top-1], value_stack.array[value_stack.top-1].str); }
        break;
      case 198: // FunctionName -> KWYEAR 
#line 448 "../../GeneratorSource/parser.y"
			{ StartFunction(location_stack.array[location_stack.top-1], value_stack.array[value_stack.top-1].str); }
        break;
      case 199: // FunctionName -> KWDAY 
#line 449 "../../GeneratorSource/parser.y"
			{ StartFunction(location_stack.array[location_stack.top-1], value_stack.array[value_stack.top-1].str); }
        break;
      case 200: // FunctionName -> KWMONTH 
#line 450 "../../GeneratorSource/parser.y"
			{ StartFunction(location_stack.array[location_stack.top-1], value_stack.array[value_stack.top-1].str); }
        break;
      case 201: // FunctionName -> KWFORMAT 
#line 451 "../../GeneratorSource/parser.y"
			{ StartFunction(location_stack.array[location_stack.top-1], value_stack.array[value_stack.top-1].str); }
        break;
      case 202: // FunctionName -> KWNOT 
#line 452 "../../GeneratorSource/parser.y"
			{ StartFunction(location_stack.array[location_stack.top-1], value_stack.array[value_stack.top-1].str); }
        break;
      case 205: // StartArg -> '(' 
#line 463 "../../GeneratorSource/parser.y"
			{
        StartParameters(location_stack.array[location_stack.top-1]);
    }
        break;
      case 206: // EndArg -> ')' 
#line 470 "../../GeneratorSource/parser.y"
			{
        EndParameters(location_stack.array[location_stack.top-1]);
    }
        break;
    }
  }

  protected override string TerminalToString(int terminal)
  {
    if (((Tokens)terminal).ToString() != terminal.ToString())
      return ((Tokens)terminal).ToString();
    else
      return CharToString((char)terminal);
  }

#line 475 "../../GeneratorSource/parser.y"












}
}
