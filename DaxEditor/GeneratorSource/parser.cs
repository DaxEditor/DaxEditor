// This code was generated by the Managed Package Parser Generator


using System;
using System.Collections.Generic;
using System.Text;
using Babel.ParserGenerator;
using Microsoft.VisualStudio.TextManager.Interop;

namespace Babel.Parser
{
public enum Tokens {error=126,EOF=127,FUNCTION=128,
    NUMBER=129,STRING=130,COLUMNNAME=131,TABLENAME=132,ESCAPEDTABLENAME=133,PARTIALCOLUMNNAME=134,PARTIALTABLENAME=135,MDXCODE=136,
    KWALTER=137,KPI=138,KWEVALUATE=139,KWDEFINE=140,KWMEASURE=141,KWORDER=142,KWBY=143,KWTRUE=144,
    KWFALSE=145,KWASC=146,KWDESC=147,KWDAY=148,KWMONTH=149,KWYEAR=150,KWCREATE=151,KWCALCULATE=152,
    KWCALCULATION=153,KWPROPERTY=154,KWGENERAL=155,KWNUMBERDECIMAL=156,KWNUMBERWHOLE=157,KWPERCENTAGE=158,KWSCIENTIFIC=159,KWCURRENCY=160,
    KWDATETIMECUSTOM=161,KWDATETIMESHORTDATEPATTERN=162,KWDATETIMEGENERAL=163,KWTEXT=164,KWACCURACY=165,KWTHOUSANDSEPARATOR=166,KWFORMAT=167,KWADDITIONALINFO=168,
    KWKPI=169,KWVISIBLE=170,KWDESCRIPTION=171,KWDISPLAYFOLDER=172,KWVAR=173,KWRETURN=174,KWDATATABLE=175,KWBOOLEAN=176,
    KWDATETIME=177,KWDOUBLE=178,KWINTEGER=179,KWSTRING=180,KWRANKX=181,KWSKIP=182,KWDENSE=183,KWNOT=184,
    KWKPIDESCRIPTION=185,KWKPITARGETFORMATSTRING=186,KWKPITARGETDESCRIPTION=187,KWKPITARGETEXPRESSION=188,KWKPISTATUSGRAPHIC=189,KWKPISTATUSDESCRIPTION=190,KWKPISTATUSEXPRESSION=191,KWKPITRENDGRAPHIC=192,
    KWKPITRENDDESCRIPTION=193,KWKPITRENDEXPRESSION=194,KWKPIANNOTATIONS=195,EQ=196,NEQ=197,GT=198,GTE=199,LT=200,
    LTE=201,POW=202,AMPAMP=203,BARBAR=204,LEFTSQUAREBRACKET=205,RIGHTSQUAREBRACKET=206,maxParseToken=207,LEX_WHITE=208,
    LEX_COMMENT=209,LEX_ERROR=210};

public partial struct LexValue
{
    public string str;
}
// Abstract base class for MPLEX scanners
public abstract class ScanBase : AScanner<LexValue,LexLocation> {
    protected abstract int CurrentSc { get; set; }
    //
    // Override the virtual EolState property if the scanner state is more
    // complicated then a simple copy of the current start state ordinal
    //
    public virtual int EolState { get { return CurrentSc; } set { CurrentSc = value; } }
}

public partial class Parser: ShiftReduceParser<LexValue, LexLocation>
{

    ErrorHandler handler = null;
    public void SetHandler(ErrorHandler hdlr) { handler = hdlr; }
    internal void CallHdlr(string msg, LexLocation val)
    {
        handler.AddError(msg, val.sLin, val.sCol, val.eCol - val.sCol);
    }

    internal TextSpan MkTSpan(LexLocation s)
    {
        TextSpan ts;
        ts.iStartLine = s.sLin;
        ts.iStartIndex = s.sCol;
        ts.iEndLine = s.eLin;
        ts.iEndIndex = s.eCol;
        return ts;
    }

    internal void Match(LexLocation lh, LexLocation rh)
    {
        DefineMatch(MkTSpan(lh), MkTSpan(rh));
    }

    internal void StartFunction(LexLocation s, string token)
    {
        System.Diagnostics.Debug.WriteLine("StartName:" + token);
        Sink.StartName(MkTSpan(s), token); 
    }

    internal void StartParameters(LexLocation s)
    {
        System.Diagnostics.Debug.WriteLine("StartParameters");
        Sink.StartParameters(MkTSpan(s)); 
    }

    internal void EndParameters(LexLocation s)
    {
        System.Diagnostics.Debug.WriteLine("EndParameters");
        Sink.EndParameters(MkTSpan(s));
    }

    internal void NextParameter(LexLocation s)
    {
        System.Diagnostics.Debug.WriteLine("Next Parameter");
        Sink.NextParameter(MkTSpan(s));
    }
  protected override void Initialize()
  {
    this.errToken = (int)Tokens.error;
    this.eofToken = (int)Tokens.EOF;

    states=new State[358];
    AddState(0,new State(new int[]{140,5,139,178,196,182,151,188,152,351,137,355,127,357},new int[]{-1,1,-3,3,-10,181,-5,184,-12,185,-13,342,-14,345,-15,348,-16,352,-6,356}));
    AddState(1,new State(new int[]{127,2}));
    AddState(2,new State(-1));
    AddState(3,new State(new int[]{140,5,139,178,127,-2},new int[]{-10,4}));
    AddState(4,new State(-14));
    AddState(5,new State(new int[]{141,169},new int[]{-11,6}));
    AddState(6,new State(new int[]{139,7}));
    AddState(7,new State(new int[]{132,36,133,37,128,38,175,41,131,35,152,72,144,73,145,74,150,75,148,76,149,77,167,78,184,79,181,92,40,24,129,118,130,119,33,123,45,124,43,125,173,131},new int[]{-4,8,-59,17,-81,18,-79,32,-77,21,-74,22,-72,33,-71,39,-70,40,-63,57,-62,58,-55,59,-61,115,-60,91,-75,116,-76,117,-73,120,-78,121,-44,126,-43,127,-42,130}));
    AddState(8,new State(new int[]{142,10,140,-16,139,-16,127,-16},new int[]{-9,9}));
    AddState(9,new State(-15));
    AddState(10,new State(new int[]{143,11}));
    AddState(11,new State(new int[]{132,36,133,37,128,38,175,41,131,35,152,72,144,73,145,74,150,75,148,76,149,77,167,78,184,79,181,92,40,24,129,118,130,119,33,123,45,124,43,125,173,131},new int[]{-8,12,-4,13,-59,17,-81,18,-79,32,-77,21,-74,22,-72,33,-71,39,-70,40,-63,57,-62,58,-55,59,-61,115,-60,91,-75,116,-76,117,-73,120,-78,121,-44,126,-43,127,-42,130}));
    AddState(12,new State(-12));
    AddState(13,new State(new int[]{44,165,146,167,147,168,140,-11,139,-11,127,-11},new int[]{-7,14}));
    AddState(14,new State(new int[]{44,15,140,-10,139,-10,127,-10}));
    AddState(15,new State(new int[]{132,36,133,37,128,38,175,41,131,35,152,72,144,73,145,74,150,75,148,76,149,77,167,78,184,79,181,92,40,24,129,118,130,119,33,123,45,124,43,125,173,131},new int[]{-8,16,-4,13,-59,17,-81,18,-79,32,-77,21,-74,22,-72,33,-71,39,-70,40,-63,57,-62,58,-55,59,-61,115,-60,91,-75,116,-76,117,-73,120,-78,121,-44,126,-43,127,-42,130}));
    AddState(16,new State(-8));
    AddState(17,new State(-251));
    AddState(18,new State(new int[]{43,152,45,153,42,154,47,155,203,156,204,157,38,158,198,159,199,160,200,161,201,162,196,163,197,164,142,-250,140,-250,139,-250,127,-250,44,-250,146,-250,147,-250,41,-250,126,-250,125,-250,174,-250,173,-250,141,-250,153,-250,59,-250,170,-250,165,-250,166,-250,167,-250,168,-250,171,-250,172,-250,185,-250,186,-250,187,-250,188,-250,189,-250,190,-250,191,-250,192,-250,193,-250,194,-250,195,-250},new int[]{-80,19}));
    AddState(19,new State(new int[]{132,36,133,37,128,38,175,41,131,35,152,72,144,73,145,74,150,75,148,76,149,77,167,78,184,79,181,92,40,24,129,118,130,119,33,123,45,124,43,125},new int[]{-79,20,-77,21,-74,22,-72,33,-71,39,-70,40,-63,57,-62,58,-55,59,-61,115,-60,91,-75,116,-76,117,-73,120,-78,121}));
    AddState(20,new State(-249));
    AddState(21,new State(-233));
    AddState(22,new State(new int[]{40,24,43,-218,45,-218,42,-218,47,-218,203,-218,204,-218,38,-218,198,-218,199,-218,200,-218,201,-218,196,-218,197,-218,142,-218,140,-218,139,-218,127,-218,44,-218,146,-218,147,-218,41,-218,126,-218,125,-218,174,-218,173,-218,141,-218,153,-218,59,-218,170,-218,165,-218,166,-218,167,-218,168,-218,171,-218,172,-218,185,-218,186,-218,187,-218,188,-218,189,-218,190,-218,191,-218,192,-218,193,-218,194,-218,195,-218},new int[]{-75,23}));
    AddState(23,new State(-217));
    AddState(24,new State(new int[]{41,25,132,36,133,37,128,38,175,41,131,35,152,72,144,73,145,74,150,75,148,76,149,77,167,78,184,79,181,92,40,24,129,118,130,119,33,123,45,124,43,125,173,131},new int[]{-50,26,-49,71,-4,31,-59,17,-81,18,-79,32,-77,21,-74,22,-72,33,-71,39,-70,40,-63,57,-62,58,-55,59,-61,115,-60,91,-75,116,-76,117,-73,120,-78,121,-44,126,-43,127,-42,130}));
    AddState(25,new State(-214));
    AddState(26,new State(new int[]{41,27,126,28,44,68},new int[]{-48,29}));
    AddState(27,new State(-215));
    AddState(28,new State(-216));
    AddState(29,new State(new int[]{132,36,133,37,128,38,175,41,131,35,152,72,144,73,145,74,150,75,148,76,149,77,167,78,184,79,181,92,40,24,129,118,130,119,33,123,45,124,43,125,173,131},new int[]{-49,30,-4,31,-59,17,-81,18,-79,32,-77,21,-74,22,-72,33,-71,39,-70,40,-63,57,-62,58,-55,59,-61,115,-60,91,-75,116,-76,117,-73,120,-78,121,-44,126,-43,127,-42,130}));
    AddState(30,new State(-150));
    AddState(31,new State(-148));
    AddState(32,new State(-248));
    AddState(33,new State(new int[]{131,35,43,-209,45,-209,42,-209,47,-209,203,-209,204,-209,38,-209,198,-209,199,-209,200,-209,201,-209,196,-209,197,-209,142,-209,140,-209,139,-209,127,-209,44,-209,146,-209,147,-209,41,-209,126,-209,125,-209,174,-209,173,-209,141,-209,153,-209,59,-209,170,-209,165,-209,166,-209,167,-209,168,-209,171,-209,172,-209,185,-209,186,-209,187,-209,188,-209,189,-209,190,-209,191,-209,192,-209,193,-209,194,-209,195,-209},new int[]{-63,34}));
    AddState(34,new State(-212));
    AddState(35,new State(-187));
    AddState(36,new State(-205));
    AddState(37,new State(-206));
    AddState(38,new State(new int[]{131,-207,43,-207,45,-207,42,-207,47,-207,203,-207,204,-207,38,-207,198,-207,199,-207,200,-207,201,-207,196,-207,197,-207,142,-207,140,-207,139,-207,127,-207,44,-207,146,-207,147,-207,41,-207,126,-207,125,-207,174,-207,173,-207,141,-207,153,-207,59,-207,170,-207,165,-207,166,-207,167,-207,168,-207,171,-207,172,-207,185,-207,186,-207,187,-207,188,-207,189,-207,190,-207,191,-207,192,-207,193,-207,194,-207,195,-207,40,-158}));
    AddState(39,new State(-208));
    AddState(40,new State(-204));
    AddState(41,new State(new int[]{40,42}));
    AddState(42,new State(new int[]{130,142},new int[]{-69,43,-68,151}));
    AddState(43,new State(new int[]{44,44}));
    AddState(44,new State(new int[]{123,45,130,142},new int[]{-68,141}));
    AddState(45,new State(new int[]{123,49},new int[]{-66,46}));
    AddState(46,new State(new int[]{125,47}));
    AddState(47,new State(new int[]{41,48}));
    AddState(48,new State(-203));
    AddState(49,new State(new int[]{132,36,133,37,128,38,175,41,131,35,152,72,144,73,145,74,150,75,148,76,149,77,167,78,184,79,181,92,40,24,129,118,130,119,33,123,45,124,43,125,125,-188,44,-188},new int[]{-65,50,-64,140,-59,56,-81,18,-79,32,-77,21,-74,22,-72,33,-71,39,-70,40,-63,57,-62,58,-55,59,-61,115,-60,91,-75,116,-76,117,-73,120,-78,121}));
    AddState(50,new State(new int[]{125,51,44,54}));
    AddState(51,new State(new int[]{44,52,125,-192}));
    AddState(52,new State(new int[]{123,49},new int[]{-66,53}));
    AddState(53,new State(-193));
    AddState(54,new State(new int[]{132,36,133,37,128,38,175,41,131,35,152,72,144,73,145,74,150,75,148,76,149,77,167,78,184,79,181,92,40,24,129,118,130,119,33,123,45,124,43,125,125,-188,44,-188},new int[]{-64,55,-59,56,-81,18,-79,32,-77,21,-74,22,-72,33,-71,39,-70,40,-63,57,-62,58,-55,59,-61,115,-60,91,-75,116,-76,117,-73,120,-78,121}));
    AddState(55,new State(-191));
    AddState(56,new State(-189));
    AddState(57,new State(-213));
    AddState(58,new State(-219));
    AddState(59,new State(new int[]{40,82},new int[]{-54,60,-53,61,-51,62}));
    AddState(60,new State(-183));
    AddState(61,new State(-157));
    AddState(62,new State(new int[]{126,69,41,67,132,36,133,37,128,38,175,41,131,35,152,72,144,73,145,74,150,75,148,76,149,77,167,78,184,79,181,92,40,24,129,118,130,119,33,123,45,124,43,125,173,131},new int[]{-52,63,-50,64,-49,71,-4,31,-59,17,-81,18,-79,32,-77,21,-74,22,-72,33,-71,39,-70,40,-63,57,-62,58,-55,59,-61,115,-60,91,-75,116,-76,117,-73,120,-78,121,-44,126,-43,127,-42,130}));
    AddState(63,new State(-153));
    AddState(64,new State(new int[]{126,66,41,67,44,68},new int[]{-52,65,-48,29}));
    AddState(65,new State(-154));
    AddState(66,new State(-155));
    AddState(67,new State(-152));
    AddState(68,new State(-147));
    AddState(69,new State(new int[]{41,67},new int[]{-52,70}));
    AddState(70,new State(-156));
    AddState(71,new State(-149));
    AddState(72,new State(-159));
    AddState(73,new State(new int[]{40,-160,43,-224,45,-224,42,-224,47,-224,203,-224,204,-224,38,-224,198,-224,199,-224,200,-224,201,-224,196,-224,197,-224,142,-224,140,-224,139,-224,127,-224,44,-224,146,-224,147,-224,41,-224,126,-224,125,-224,174,-224,173,-224,141,-224,153,-224,59,-224,170,-224,165,-224,166,-224,167,-224,168,-224,171,-224,172,-224,185,-224,186,-224,187,-224,188,-224,189,-224,190,-224,191,-224,192,-224,193,-224,194,-224,195,-224}));
    AddState(74,new State(new int[]{40,-161,43,-225,45,-225,42,-225,47,-225,203,-225,204,-225,38,-225,198,-225,199,-225,200,-225,201,-225,196,-225,197,-225,142,-225,140,-225,139,-225,127,-225,44,-225,146,-225,147,-225,41,-225,126,-225,125,-225,174,-225,173,-225,141,-225,153,-225,59,-225,170,-225,165,-225,166,-225,167,-225,168,-225,171,-225,172,-225,185,-225,186,-225,187,-225,188,-225,189,-225,190,-225,191,-225,192,-225,193,-225,194,-225,195,-225}));
    AddState(75,new State(new int[]{40,-162,43,-228,45,-228,42,-228,47,-228,203,-228,204,-228,38,-228,198,-228,199,-228,200,-228,201,-228,196,-228,197,-228,142,-228,140,-228,139,-228,127,-228,44,-228,146,-228,147,-228,41,-228,126,-228,125,-228,174,-228,173,-228,141,-228,153,-228,59,-228,170,-228,165,-228,166,-228,167,-228,168,-228,171,-228,172,-228,185,-228,186,-228,187,-228,188,-228,189,-228,190,-228,191,-228,192,-228,193,-228,194,-228,195,-228}));
    AddState(76,new State(new int[]{40,-163,43,-226,45,-226,42,-226,47,-226,203,-226,204,-226,38,-226,198,-226,199,-226,200,-226,201,-226,196,-226,197,-226,142,-226,140,-226,139,-226,127,-226,44,-226,146,-226,147,-226,41,-226,126,-226,125,-226,174,-226,173,-226,141,-226,153,-226,59,-226,170,-226,165,-226,166,-226,167,-226,168,-226,171,-226,172,-226,185,-226,186,-226,187,-226,188,-226,189,-226,190,-226,191,-226,192,-226,193,-226,194,-226,195,-226}));
    AddState(77,new State(new int[]{40,-164,43,-227,45,-227,42,-227,47,-227,203,-227,204,-227,38,-227,198,-227,199,-227,200,-227,201,-227,196,-227,197,-227,142,-227,140,-227,139,-227,127,-227,44,-227,146,-227,147,-227,41,-227,126,-227,125,-227,174,-227,173,-227,141,-227,153,-227,59,-227,170,-227,165,-227,166,-227,167,-227,168,-227,171,-227,172,-227,185,-227,186,-227,187,-227,188,-227,189,-227,190,-227,191,-227,192,-227,193,-227,194,-227,195,-227}));
    AddState(78,new State(-165));
    AddState(79,new State(new int[]{128,84,152,72,144,85,145,86,150,87,148,88,149,89,167,78,184,90,181,92,40,-166},new int[]{-55,80,-61,83,-60,91}));
    AddState(80,new State(new int[]{40,82},new int[]{-54,81,-53,61,-51,62}));
    AddState(81,new State(-185));
    AddState(82,new State(-151));
    AddState(83,new State(-186));
    AddState(84,new State(-158));
    AddState(85,new State(-160));
    AddState(86,new State(-161));
    AddState(87,new State(-162));
    AddState(88,new State(-163));
    AddState(89,new State(-164));
    AddState(90,new State(-166));
    AddState(91,new State(-182));
    AddState(92,new State(new int[]{40,93}));
    AddState(93,new State(new int[]{132,36,133,37,128,38,175,41,131,35,152,72,144,73,145,74,150,75,148,76,149,77,167,78,184,79,181,92,40,24,129,118,130,119,33,123,45,124,43,125,173,131},new int[]{-4,94,-59,17,-81,18,-79,32,-77,21,-74,22,-72,33,-71,39,-70,40,-63,57,-62,58,-55,59,-61,115,-60,91,-75,116,-76,117,-73,120,-78,121,-44,126,-43,127,-42,130}));
    AddState(94,new State(new int[]{44,95}));
    AddState(95,new State(new int[]{132,36,133,37,128,38,175,41,131,35,152,72,144,73,145,74,150,75,148,76,149,77,167,78,184,79,181,92,40,24,129,118,130,119,33,123,45,124,43,125,173,131},new int[]{-4,96,-59,17,-81,18,-79,32,-77,21,-74,22,-72,33,-71,39,-70,40,-63,57,-62,58,-55,59,-61,115,-60,91,-75,116,-76,117,-73,120,-78,121,-44,126,-43,127,-42,130}));
    AddState(96,new State(new int[]{41,97,44,98}));
    AddState(97,new State(-178));
    AddState(98,new State(new int[]{132,36,133,37,128,38,175,41,131,35,152,72,144,73,145,74,150,75,148,76,149,77,167,78,184,79,181,92,40,24,129,118,130,119,33,123,45,124,43,125,41,-176,44,-176},new int[]{-58,99,-59,114,-81,18,-79,32,-77,21,-74,22,-72,33,-71,39,-70,40,-63,57,-62,58,-55,59,-61,115,-60,91,-75,116,-76,117,-73,120,-78,121}));
    AddState(99,new State(new int[]{41,100,44,101}));
    AddState(100,new State(-179));
    AddState(101,new State(new int[]{129,109,144,110,145,111,146,112,147,113,41,-170,44,-170},new int[]{-57,102}));
    AddState(102,new State(new int[]{41,103,44,104}));
    AddState(103,new State(-180));
    AddState(104,new State(new int[]{182,107,183,108,41,-167},new int[]{-56,105}));
    AddState(105,new State(new int[]{41,106}));
    AddState(106,new State(-181));
    AddState(107,new State(-168));
    AddState(108,new State(-169));
    AddState(109,new State(-171));
    AddState(110,new State(-172));
    AddState(111,new State(-173));
    AddState(112,new State(-174));
    AddState(113,new State(-175));
    AddState(114,new State(-177));
    AddState(115,new State(-184));
    AddState(116,new State(-220));
    AddState(117,new State(-221));
    AddState(118,new State(-222));
    AddState(119,new State(-223));
    AddState(120,new State(-229));
    AddState(121,new State(new int[]{132,36,133,37,128,38,175,41,131,35,152,72,144,73,145,74,150,75,148,76,149,77,167,78,184,79,181,92,40,24,129,118,130,119,33,123,45,124,43,125},new int[]{-79,122,-77,21,-74,22,-72,33,-71,39,-70,40,-63,57,-62,58,-55,59,-61,115,-60,91,-75,116,-76,117,-73,120,-78,121}));
    AddState(122,new State(-234));
    AddState(123,new State(-230));
    AddState(124,new State(-231));
    AddState(125,new State(-232));
    AddState(126,new State(-252));
    AddState(127,new State(new int[]{174,128,173,131},new int[]{-42,139}));
    AddState(128,new State(new int[]{132,36,133,37,128,38,175,41,131,35,152,72,144,73,145,74,150,75,148,76,149,77,167,78,184,79,181,92,40,24,129,118,130,119,33,123,45,124,43,125,173,131},new int[]{-4,129,-59,17,-81,18,-79,32,-77,21,-74,22,-72,33,-71,39,-70,40,-63,57,-62,58,-55,59,-61,115,-60,91,-75,116,-76,117,-73,120,-78,121,-44,126,-43,127,-42,130}));
    AddState(129,new State(-104));
    AddState(130,new State(-102));
    AddState(131,new State(new int[]{126,135,132,138},new int[]{-41,132}));
    AddState(132,new State(new int[]{196,133}));
    AddState(133,new State(new int[]{132,36,133,37,128,38,175,41,131,35,152,72,144,73,145,74,150,75,148,76,149,77,167,78,184,79,181,92,40,24,129,118,130,119,33,123,45,124,43,125,173,131},new int[]{-4,134,-59,17,-81,18,-79,32,-77,21,-74,22,-72,33,-71,39,-70,40,-63,57,-62,58,-55,59,-61,115,-60,91,-75,116,-76,117,-73,120,-78,121,-44,126,-43,127,-42,130}));
    AddState(134,new State(-100));
    AddState(135,new State(new int[]{196,136}));
    AddState(136,new State(new int[]{132,36,133,37,128,38,175,41,131,35,152,72,144,73,145,74,150,75,148,76,149,77,167,78,184,79,181,92,40,24,129,118,130,119,33,123,45,124,43,125,173,131},new int[]{-4,137,-59,17,-81,18,-79,32,-77,21,-74,22,-72,33,-71,39,-70,40,-63,57,-62,58,-55,59,-61,115,-60,91,-75,116,-76,117,-73,120,-78,121,-44,126,-43,127,-42,130}));
    AddState(137,new State(-101));
    AddState(138,new State(-99));
    AddState(139,new State(-103));
    AddState(140,new State(-190));
    AddState(141,new State(-202));
    AddState(142,new State(new int[]{44,143}));
    AddState(143,new State(new int[]{176,145,160,146,177,147,178,148,179,149,180,150},new int[]{-67,144}));
    AddState(144,new State(-200));
    AddState(145,new State(-194));
    AddState(146,new State(-195));
    AddState(147,new State(-196));
    AddState(148,new State(-197));
    AddState(149,new State(-198));
    AddState(150,new State(-199));
    AddState(151,new State(-201));
    AddState(152,new State(-235));
    AddState(153,new State(-236));
    AddState(154,new State(-237));
    AddState(155,new State(-238));
    AddState(156,new State(-239));
    AddState(157,new State(-240));
    AddState(158,new State(-241));
    AddState(159,new State(-242));
    AddState(160,new State(-243));
    AddState(161,new State(-244));
    AddState(162,new State(-245));
    AddState(163,new State(-246));
    AddState(164,new State(-247));
    AddState(165,new State(new int[]{132,36,133,37,128,38,175,41,131,35,152,72,144,73,145,74,150,75,148,76,149,77,167,78,184,79,181,92,40,24,129,118,130,119,33,123,45,124,43,125,173,131},new int[]{-8,166,-4,13,-59,17,-81,18,-79,32,-77,21,-74,22,-72,33,-71,39,-70,40,-63,57,-62,58,-55,59,-61,115,-60,91,-75,116,-76,117,-73,120,-78,121,-44,126,-43,127,-42,130}));
    AddState(166,new State(-9));
    AddState(167,new State(-6));
    AddState(168,new State(-7));
    AddState(169,new State(new int[]{132,36,133,37,128,177,175,41},new int[]{-47,170,-72,175,-71,39,-70,40}));
    AddState(170,new State(new int[]{196,171}));
    AddState(171,new State(new int[]{132,36,133,37,128,38,175,41,131,35,152,72,144,73,145,74,150,75,148,76,149,77,167,78,184,79,181,92,40,24,129,118,130,119,33,123,45,124,43,125,173,131},new int[]{-46,172,-4,174,-59,17,-81,18,-79,32,-77,21,-74,22,-72,33,-71,39,-70,40,-63,57,-62,58,-55,59,-61,115,-60,91,-75,116,-76,117,-73,120,-78,121,-44,126,-43,127,-42,130}));
    AddState(172,new State(new int[]{141,169,139,-145},new int[]{-11,173}));
    AddState(173,new State(-146));
    AddState(174,new State(-144));
    AddState(175,new State(new int[]{131,35},new int[]{-63,176}));
    AddState(176,new State(-211));
    AddState(177,new State(-207));
    AddState(178,new State(new int[]{132,36,133,37,128,38,175,41,131,35,152,72,144,73,145,74,150,75,148,76,149,77,167,78,184,79,181,92,40,24,129,118,130,119,33,123,45,124,43,125,173,131},new int[]{-4,179,-59,17,-81,18,-79,32,-77,21,-74,22,-72,33,-71,39,-70,40,-63,57,-62,58,-55,59,-61,115,-60,91,-75,116,-76,117,-73,120,-78,121,-44,126,-43,127,-42,130}));
    AddState(179,new State(new int[]{142,10,140,-18,139,-18,127,-18},new int[]{-9,180}));
    AddState(180,new State(-17));
    AddState(181,new State(-13));
    AddState(182,new State(new int[]{132,36,133,37,128,38,175,41,131,35,152,72,144,73,145,74,150,75,148,76,149,77,167,78,184,79,181,92,40,24,129,118,130,119,33,123,45,124,43,125,173,131},new int[]{-4,183,-59,17,-81,18,-79,32,-77,21,-74,22,-72,33,-71,39,-70,40,-63,57,-62,58,-55,59,-61,115,-60,91,-75,116,-76,117,-73,120,-78,121,-44,126,-43,127,-42,130}));
    AddState(183,new State(-3));
    AddState(184,new State(-4));
    AddState(185,new State(new int[]{59,186,127,-19}));
    AddState(186,new State(new int[]{151,188,152,351,137,355,127,-20},new int[]{-5,187,-12,185,-13,342,-14,345,-15,348,-16,352}));
    AddState(187,new State(-21));
    AddState(188,new State(new int[]{141,189,169,340,136,341}));
    AddState(189,new State(new int[]{126,327,132,338,131,339,133,37,128,177,175,41},new int[]{-17,190,-19,334,-72,325,-71,39,-70,40}));
    AddState(190,new State(new int[]{46,191}));
    AddState(191,new State(new int[]{132,36,133,37,128,177,175,41},new int[]{-19,192,-72,325,-71,39,-70,40}));
    AddState(192,new State(new int[]{196,193}));
    AddState(193,new State(new int[]{132,36,133,37,128,38,175,41,131,35,152,72,144,73,145,74,150,75,148,76,149,77,167,78,184,79,181,92,40,24,129,118,130,119,33,123,45,124,43,125,173,131},new int[]{-18,194,-4,324,-59,17,-81,18,-79,32,-77,21,-74,22,-72,33,-71,39,-70,40,-63,57,-62,58,-55,59,-61,115,-60,91,-75,116,-76,117,-73,120,-78,121,-44,126,-43,127,-42,130}));
    AddState(194,new State(new int[]{153,196,59,-38,127,-38},new int[]{-20,195}));
    AddState(195,new State(-39));
    AddState(196,new State(new int[]{154,197}));
    AddState(197,new State(new int[]{126,313,155,314,156,315,157,316,158,317,159,318,160,319,161,320,162,321,163,322,164,323},new int[]{-21,198}));
    AddState(198,new State(new int[]{170,202,165,210,166,217,167,225,168,230,171,235,172,243,185,249,186,255,187,261,188,267,189,273,190,279,191,285,192,291,193,297,194,303,195,309,59,-141,127,-141},new int[]{-45,199,-23,200,-22,208,-27,215,-28,223,-29,228,-25,233,-26,241,-30,247,-31,253,-32,259,-33,265,-34,271,-35,277,-36,283,-37,289,-38,295,-39,301,-40,307}));
    AddState(199,new State(-143));
    AddState(200,new State(new int[]{170,202,165,210,166,217,167,225,168,230,171,235,172,243,185,249,186,255,187,261,188,267,189,273,190,279,191,285,192,291,193,297,194,303,195,309,59,-105,127,-105},new int[]{-45,201,-23,200,-22,208,-27,215,-28,223,-29,228,-25,233,-26,241,-30,247,-31,253,-32,259,-33,265,-34,271,-35,277,-36,283,-37,289,-38,295,-39,301,-40,307}));
    AddState(201,new State(-106));
    AddState(202,new State(new int[]{196,203,126,207}));
    AddState(203,new State(new int[]{144,204,145,205,126,206}));
    AddState(204,new State(-61));
    AddState(205,new State(-62));
    AddState(206,new State(-64));
    AddState(207,new State(-63));
    AddState(208,new State(new int[]{170,202,165,210,166,217,167,225,168,230,171,235,172,243,185,249,186,255,187,261,188,267,189,273,190,279,191,285,192,291,193,297,194,303,195,309,59,-107,127,-107},new int[]{-45,209,-23,200,-22,208,-27,215,-28,223,-29,228,-25,233,-26,241,-30,247,-31,253,-32,259,-33,265,-34,271,-35,277,-36,283,-37,289,-38,295,-39,301,-40,307}));
    AddState(209,new State(-108));
    AddState(210,new State(new int[]{196,211,126,214}));
    AddState(211,new State(new int[]{129,212,126,213}));
    AddState(212,new State(-58));
    AddState(213,new State(-60));
    AddState(214,new State(-59));
    AddState(215,new State(new int[]{170,202,165,210,166,217,167,225,168,230,171,235,172,243,185,249,186,255,187,261,188,267,189,273,190,279,191,285,192,291,193,297,194,303,195,309,59,-109,127,-109},new int[]{-45,216,-23,200,-22,208,-27,215,-28,223,-29,228,-25,233,-26,241,-30,247,-31,253,-32,259,-33,265,-34,271,-35,277,-36,283,-37,289,-38,295,-39,301,-40,307}));
    AddState(216,new State(-110));
    AddState(217,new State(new int[]{196,218,126,222}));
    AddState(218,new State(new int[]{144,219,145,220,126,221}));
    AddState(219,new State(-71));
    AddState(220,new State(-72));
    AddState(221,new State(-74));
    AddState(222,new State(-73));
    AddState(223,new State(new int[]{170,202,165,210,166,217,167,225,168,230,171,235,172,243,185,249,186,255,187,261,188,267,189,273,190,279,191,285,192,291,193,297,194,303,195,309,59,-111,127,-111},new int[]{-45,224,-23,200,-22,208,-27,215,-28,223,-29,228,-25,233,-26,241,-30,247,-31,253,-32,259,-33,265,-34,271,-35,277,-36,283,-37,289,-38,295,-39,301,-40,307}));
    AddState(224,new State(-112));
    AddState(225,new State(new int[]{196,226}));
    AddState(226,new State(new int[]{133,227}));
    AddState(227,new State(-75));
    AddState(228,new State(new int[]{170,202,165,210,166,217,167,225,168,230,171,235,172,243,185,249,186,255,187,261,188,267,189,273,190,279,191,285,192,291,193,297,194,303,195,309,59,-113,127,-113},new int[]{-45,229,-23,200,-22,208,-27,215,-28,223,-29,228,-25,233,-26,241,-30,247,-31,253,-32,259,-33,265,-34,271,-35,277,-36,283,-37,289,-38,295,-39,301,-40,307}));
    AddState(229,new State(-114));
    AddState(230,new State(new int[]{196,231}));
    AddState(231,new State(new int[]{133,232}));
    AddState(232,new State(-76));
    AddState(233,new State(new int[]{170,202,165,210,166,217,167,225,168,230,171,235,172,243,185,249,186,255,187,261,188,267,189,273,190,279,191,285,192,291,193,297,194,303,195,309,59,-115,127,-115},new int[]{-45,234,-23,200,-22,208,-27,215,-28,223,-29,228,-25,233,-26,241,-30,247,-31,253,-32,259,-33,265,-34,271,-35,277,-36,283,-37,289,-38,295,-39,301,-40,307}));
    AddState(234,new State(-116));
    AddState(235,new State(new int[]{196,236,126,240}));
    AddState(236,new State(new int[]{133,238,130,239},new int[]{-24,237}));
    AddState(237,new State(-67));
    AddState(238,new State(-65));
    AddState(239,new State(-66));
    AddState(240,new State(-68));
    AddState(241,new State(new int[]{170,202,165,210,166,217,167,225,168,230,171,235,172,243,185,249,186,255,187,261,188,267,189,273,190,279,191,285,192,291,193,297,194,303,195,309,59,-117,127,-117},new int[]{-45,242,-23,200,-22,208,-27,215,-28,223,-29,228,-25,233,-26,241,-30,247,-31,253,-32,259,-33,265,-34,271,-35,277,-36,283,-37,289,-38,295,-39,301,-40,307}));
    AddState(242,new State(-118));
    AddState(243,new State(new int[]{196,244,126,246}));
    AddState(244,new State(new int[]{133,245}));
    AddState(245,new State(-69));
    AddState(246,new State(-70));
    AddState(247,new State(new int[]{170,202,165,210,166,217,167,225,168,230,171,235,172,243,185,249,186,255,187,261,188,267,189,273,190,279,191,285,192,291,193,297,194,303,195,309,59,-119,127,-119},new int[]{-45,248,-23,200,-22,208,-27,215,-28,223,-29,228,-25,233,-26,241,-30,247,-31,253,-32,259,-33,265,-34,271,-35,277,-36,283,-37,289,-38,295,-39,301,-40,307}));
    AddState(248,new State(-120));
    AddState(249,new State(new int[]{196,250,126,252}));
    AddState(250,new State(new int[]{133,238,130,239},new int[]{-24,251}));
    AddState(251,new State(-77));
    AddState(252,new State(-78));
    AddState(253,new State(new int[]{170,202,165,210,166,217,167,225,168,230,171,235,172,243,185,249,186,255,187,261,188,267,189,273,190,279,191,285,192,291,193,297,194,303,195,309,59,-121,127,-121},new int[]{-45,254,-23,200,-22,208,-27,215,-28,223,-29,228,-25,233,-26,241,-30,247,-31,253,-32,259,-33,265,-34,271,-35,277,-36,283,-37,289,-38,295,-39,301,-40,307}));
    AddState(254,new State(-122));
    AddState(255,new State(new int[]{196,256,126,258}));
    AddState(256,new State(new int[]{133,238,130,239},new int[]{-24,257}));
    AddState(257,new State(-79));
    AddState(258,new State(-80));
    AddState(259,new State(new int[]{170,202,165,210,166,217,167,225,168,230,171,235,172,243,185,249,186,255,187,261,188,267,189,273,190,279,191,285,192,291,193,297,194,303,195,309,59,-123,127,-123},new int[]{-45,260,-23,200,-22,208,-27,215,-28,223,-29,228,-25,233,-26,241,-30,247,-31,253,-32,259,-33,265,-34,271,-35,277,-36,283,-37,289,-38,295,-39,301,-40,307}));
    AddState(260,new State(-124));
    AddState(261,new State(new int[]{196,262,126,264}));
    AddState(262,new State(new int[]{133,238,130,239},new int[]{-24,263}));
    AddState(263,new State(-81));
    AddState(264,new State(-82));
    AddState(265,new State(new int[]{170,202,165,210,166,217,167,225,168,230,171,235,172,243,185,249,186,255,187,261,188,267,189,273,190,279,191,285,192,291,193,297,194,303,195,309,59,-125,127,-125},new int[]{-45,266,-23,200,-22,208,-27,215,-28,223,-29,228,-25,233,-26,241,-30,247,-31,253,-32,259,-33,265,-34,271,-35,277,-36,283,-37,289,-38,295,-39,301,-40,307}));
    AddState(266,new State(-126));
    AddState(267,new State(new int[]{196,268,126,270}));
    AddState(268,new State(new int[]{132,36,133,37,128,38,175,41,131,35,152,72,144,73,145,74,150,75,148,76,149,77,167,78,184,79,181,92,40,24,129,118,130,119,33,123,45,124,43,125,173,131},new int[]{-4,269,-59,17,-81,18,-79,32,-77,21,-74,22,-72,33,-71,39,-70,40,-63,57,-62,58,-55,59,-61,115,-60,91,-75,116,-76,117,-73,120,-78,121,-44,126,-43,127,-42,130}));
    AddState(269,new State(-83));
    AddState(270,new State(-84));
    AddState(271,new State(new int[]{170,202,165,210,166,217,167,225,168,230,171,235,172,243,185,249,186,255,187,261,188,267,189,273,190,279,191,285,192,291,193,297,194,303,195,309,59,-127,127,-127},new int[]{-45,272,-23,200,-22,208,-27,215,-28,223,-29,228,-25,233,-26,241,-30,247,-31,253,-32,259,-33,265,-34,271,-35,277,-36,283,-37,289,-38,295,-39,301,-40,307}));
    AddState(272,new State(-128));
    AddState(273,new State(new int[]{196,274,126,276}));
    AddState(274,new State(new int[]{133,238,130,239},new int[]{-24,275}));
    AddState(275,new State(-85));
    AddState(276,new State(-86));
    AddState(277,new State(new int[]{170,202,165,210,166,217,167,225,168,230,171,235,172,243,185,249,186,255,187,261,188,267,189,273,190,279,191,285,192,291,193,297,194,303,195,309,59,-129,127,-129},new int[]{-45,278,-23,200,-22,208,-27,215,-28,223,-29,228,-25,233,-26,241,-30,247,-31,253,-32,259,-33,265,-34,271,-35,277,-36,283,-37,289,-38,295,-39,301,-40,307}));
    AddState(278,new State(-130));
    AddState(279,new State(new int[]{196,280,126,282}));
    AddState(280,new State(new int[]{133,238,130,239},new int[]{-24,281}));
    AddState(281,new State(-87));
    AddState(282,new State(-88));
    AddState(283,new State(new int[]{170,202,165,210,166,217,167,225,168,230,171,235,172,243,185,249,186,255,187,261,188,267,189,273,190,279,191,285,192,291,193,297,194,303,195,309,59,-131,127,-131},new int[]{-45,284,-23,200,-22,208,-27,215,-28,223,-29,228,-25,233,-26,241,-30,247,-31,253,-32,259,-33,265,-34,271,-35,277,-36,283,-37,289,-38,295,-39,301,-40,307}));
    AddState(284,new State(-132));
    AddState(285,new State(new int[]{196,286,126,288}));
    AddState(286,new State(new int[]{132,36,133,37,128,38,175,41,131,35,152,72,144,73,145,74,150,75,148,76,149,77,167,78,184,79,181,92,40,24,129,118,130,119,33,123,45,124,43,125,173,131},new int[]{-4,287,-59,17,-81,18,-79,32,-77,21,-74,22,-72,33,-71,39,-70,40,-63,57,-62,58,-55,59,-61,115,-60,91,-75,116,-76,117,-73,120,-78,121,-44,126,-43,127,-42,130}));
    AddState(287,new State(-89));
    AddState(288,new State(-90));
    AddState(289,new State(new int[]{170,202,165,210,166,217,167,225,168,230,171,235,172,243,185,249,186,255,187,261,188,267,189,273,190,279,191,285,192,291,193,297,194,303,195,309,59,-133,127,-133},new int[]{-45,290,-23,200,-22,208,-27,215,-28,223,-29,228,-25,233,-26,241,-30,247,-31,253,-32,259,-33,265,-34,271,-35,277,-36,283,-37,289,-38,295,-39,301,-40,307}));
    AddState(290,new State(-134));
    AddState(291,new State(new int[]{196,292,126,294}));
    AddState(292,new State(new int[]{133,238,130,239},new int[]{-24,293}));
    AddState(293,new State(-91));
    AddState(294,new State(-92));
    AddState(295,new State(new int[]{170,202,165,210,166,217,167,225,168,230,171,235,172,243,185,249,186,255,187,261,188,267,189,273,190,279,191,285,192,291,193,297,194,303,195,309,59,-135,127,-135},new int[]{-45,296,-23,200,-22,208,-27,215,-28,223,-29,228,-25,233,-26,241,-30,247,-31,253,-32,259,-33,265,-34,271,-35,277,-36,283,-37,289,-38,295,-39,301,-40,307}));
    AddState(296,new State(-136));
    AddState(297,new State(new int[]{196,298,126,300}));
    AddState(298,new State(new int[]{133,238,130,239},new int[]{-24,299}));
    AddState(299,new State(-93));
    AddState(300,new State(-94));
    AddState(301,new State(new int[]{170,202,165,210,166,217,167,225,168,230,171,235,172,243,185,249,186,255,187,261,188,267,189,273,190,279,191,285,192,291,193,297,194,303,195,309,59,-137,127,-137},new int[]{-45,302,-23,200,-22,208,-27,215,-28,223,-29,228,-25,233,-26,241,-30,247,-31,253,-32,259,-33,265,-34,271,-35,277,-36,283,-37,289,-38,295,-39,301,-40,307}));
    AddState(302,new State(-138));
    AddState(303,new State(new int[]{196,304,126,306}));
    AddState(304,new State(new int[]{132,36,133,37,128,38,175,41,131,35,152,72,144,73,145,74,150,75,148,76,149,77,167,78,184,79,181,92,40,24,129,118,130,119,33,123,45,124,43,125,173,131},new int[]{-4,305,-59,17,-81,18,-79,32,-77,21,-74,22,-72,33,-71,39,-70,40,-63,57,-62,58,-55,59,-61,115,-60,91,-75,116,-76,117,-73,120,-78,121,-44,126,-43,127,-42,130}));
    AddState(305,new State(-95));
    AddState(306,new State(-96));
    AddState(307,new State(new int[]{170,202,165,210,166,217,167,225,168,230,171,235,172,243,185,249,186,255,187,261,188,267,189,273,190,279,191,285,192,291,193,297,194,303,195,309,59,-139,127,-139},new int[]{-45,308,-23,200,-22,208,-27,215,-28,223,-29,228,-25,233,-26,241,-30,247,-31,253,-32,259,-33,265,-34,271,-35,277,-36,283,-37,289,-38,295,-39,301,-40,307}));
    AddState(308,new State(-140));
    AddState(309,new State(new int[]{196,310,126,312}));
    AddState(310,new State(new int[]{133,311}));
    AddState(311,new State(-97));
    AddState(312,new State(-98));
    AddState(313,new State(-142));
    AddState(314,new State(-48));
    AddState(315,new State(-49));
    AddState(316,new State(-50));
    AddState(317,new State(-51));
    AddState(318,new State(-52));
    AddState(319,new State(-53));
    AddState(320,new State(-54));
    AddState(321,new State(-55));
    AddState(322,new State(-56));
    AddState(323,new State(-57));
    AddState(324,new State(-37));
    AddState(325,new State(new int[]{131,35},new int[]{-63,326}));
    AddState(326,new State(-210));
    AddState(327,new State(new int[]{46,328,196,332}));
    AddState(328,new State(new int[]{132,36,133,37,128,177,175,41},new int[]{-19,329,-72,325,-71,39,-70,40}));
    AddState(329,new State(new int[]{196,330}));
    AddState(330,new State(new int[]{132,36,133,37,128,38,175,41,131,35,152,72,144,73,145,74,150,75,148,76,149,77,167,78,184,79,181,92,40,24,129,118,130,119,33,123,45,124,43,125,173,131},new int[]{-18,331,-4,324,-59,17,-81,18,-79,32,-77,21,-74,22,-72,33,-71,39,-70,40,-63,57,-62,58,-55,59,-61,115,-60,91,-75,116,-76,117,-73,120,-78,121,-44,126,-43,127,-42,130}));
    AddState(331,new State(-40));
    AddState(332,new State(new int[]{132,36,133,37,128,38,175,41,131,35,152,72,144,73,145,74,150,75,148,76,149,77,167,78,184,79,181,92,40,24,129,118,130,119,33,123,45,124,43,125,173,131},new int[]{-18,333,-4,324,-59,17,-81,18,-79,32,-77,21,-74,22,-72,33,-71,39,-70,40,-63,57,-62,58,-55,59,-61,115,-60,91,-75,116,-76,117,-73,120,-78,121,-44,126,-43,127,-42,130}));
    AddState(333,new State(-43));
    AddState(334,new State(new int[]{196,335}));
    AddState(335,new State(new int[]{132,36,133,37,128,38,175,41,131,35,152,72,144,73,145,74,150,75,148,76,149,77,167,78,184,79,181,92,40,24,129,118,130,119,33,123,45,124,43,125,173,131},new int[]{-18,336,-4,324,-59,17,-81,18,-79,32,-77,21,-74,22,-72,33,-71,39,-70,40,-63,57,-62,58,-55,59,-61,115,-60,91,-75,116,-76,117,-73,120,-78,121,-44,126,-43,127,-42,130}));
    AddState(336,new State(new int[]{153,196,59,-41,127,-41},new int[]{-20,337}));
    AddState(337,new State(-42));
    AddState(338,new State(new int[]{46,-35,131,-205}));
    AddState(339,new State(-36));
    AddState(340,new State(-44));
    AddState(341,new State(-45));
    AddState(342,new State(new int[]{59,343,127,-22}));
    AddState(343,new State(new int[]{151,188,152,351,137,355,127,-23},new int[]{-5,344,-12,185,-13,342,-14,345,-15,348,-16,352}));
    AddState(344,new State(-24));
    AddState(345,new State(new int[]{59,346,127,-25}));
    AddState(346,new State(new int[]{151,188,152,351,137,355,127,-26},new int[]{-5,347,-12,185,-13,342,-14,345,-15,348,-16,352}));
    AddState(347,new State(-27));
    AddState(348,new State(new int[]{59,349,127,-28}));
    AddState(349,new State(new int[]{151,188,152,351,137,355,127,-29},new int[]{-5,350,-12,185,-13,342,-14,345,-15,348,-16,352}));
    AddState(350,new State(-30));
    AddState(351,new State(-46));
    AddState(352,new State(new int[]{59,353,127,-31}));
    AddState(353,new State(new int[]{151,188,152,351,137,355,127,-32},new int[]{-5,354,-12,185,-13,342,-14,345,-15,348,-16,352}));
    AddState(354,new State(-33));
    AddState(355,new State(-47));
    AddState(356,new State(-5));
    AddState(357,new State(-34));

    rules=new Rule[253];
    rules[1]=new Rule(-2, new int[]{-1,127});
    rules[2]=new Rule(-1, new int[]{-3});
    rules[3]=new Rule(-1, new int[]{196,-4});
    rules[4]=new Rule(-1, new int[]{-5});
    rules[5]=new Rule(-1, new int[]{-6});
    rules[6]=new Rule(-7, new int[]{146});
    rules[7]=new Rule(-7, new int[]{147});
    rules[8]=new Rule(-8, new int[]{-4,-7,44,-8});
    rules[9]=new Rule(-8, new int[]{-4,44,-8});
    rules[10]=new Rule(-8, new int[]{-4,-7});
    rules[11]=new Rule(-8, new int[]{-4});
    rules[12]=new Rule(-9, new int[]{142,143,-8});
    rules[13]=new Rule(-3, new int[]{-10});
    rules[14]=new Rule(-3, new int[]{-3,-10});
    rules[15]=new Rule(-10, new int[]{140,-11,139,-4,-9});
    rules[16]=new Rule(-10, new int[]{140,-11,139,-4});
    rules[17]=new Rule(-10, new int[]{139,-4,-9});
    rules[18]=new Rule(-10, new int[]{139,-4});
    rules[19]=new Rule(-5, new int[]{-12});
    rules[20]=new Rule(-5, new int[]{-12,59});
    rules[21]=new Rule(-5, new int[]{-12,59,-5});
    rules[22]=new Rule(-5, new int[]{-13});
    rules[23]=new Rule(-5, new int[]{-13,59});
    rules[24]=new Rule(-5, new int[]{-13,59,-5});
    rules[25]=new Rule(-5, new int[]{-14});
    rules[26]=new Rule(-5, new int[]{-14,59});
    rules[27]=new Rule(-5, new int[]{-14,59,-5});
    rules[28]=new Rule(-5, new int[]{-15});
    rules[29]=new Rule(-5, new int[]{-15,59});
    rules[30]=new Rule(-5, new int[]{-15,59,-5});
    rules[31]=new Rule(-5, new int[]{-16});
    rules[32]=new Rule(-5, new int[]{-16,59});
    rules[33]=new Rule(-5, new int[]{-16,59,-5});
    rules[34]=new Rule(-6, new int[]{127});
    rules[35]=new Rule(-17, new int[]{132});
    rules[36]=new Rule(-17, new int[]{131});
    rules[37]=new Rule(-18, new int[]{-4});
    rules[38]=new Rule(-12, new int[]{151,141,-17,46,-19,196,-18});
    rules[39]=new Rule(-12, new int[]{151,141,-17,46,-19,196,-18,-20});
    rules[40]=new Rule(-12, new int[]{151,141,126,46,-19,196,-18});
    rules[41]=new Rule(-12, new int[]{151,141,-19,196,-18});
    rules[42]=new Rule(-12, new int[]{151,141,-19,196,-18,-20});
    rules[43]=new Rule(-12, new int[]{151,141,126,196,-18});
    rules[44]=new Rule(-13, new int[]{151,169});
    rules[45]=new Rule(-14, new int[]{151,136});
    rules[46]=new Rule(-15, new int[]{152});
    rules[47]=new Rule(-16, new int[]{137});
    rules[48]=new Rule(-21, new int[]{155});
    rules[49]=new Rule(-21, new int[]{156});
    rules[50]=new Rule(-21, new int[]{157});
    rules[51]=new Rule(-21, new int[]{158});
    rules[52]=new Rule(-21, new int[]{159});
    rules[53]=new Rule(-21, new int[]{160});
    rules[54]=new Rule(-21, new int[]{161});
    rules[55]=new Rule(-21, new int[]{162});
    rules[56]=new Rule(-21, new int[]{163});
    rules[57]=new Rule(-21, new int[]{164});
    rules[58]=new Rule(-22, new int[]{165,196,129});
    rules[59]=new Rule(-22, new int[]{165,126});
    rules[60]=new Rule(-22, new int[]{165,196,126});
    rules[61]=new Rule(-23, new int[]{170,196,144});
    rules[62]=new Rule(-23, new int[]{170,196,145});
    rules[63]=new Rule(-23, new int[]{170,126});
    rules[64]=new Rule(-23, new int[]{170,196,126});
    rules[65]=new Rule(-24, new int[]{133});
    rules[66]=new Rule(-24, new int[]{130});
    rules[67]=new Rule(-25, new int[]{171,196,-24});
    rules[68]=new Rule(-25, new int[]{171,126});
    rules[69]=new Rule(-26, new int[]{172,196,133});
    rules[70]=new Rule(-26, new int[]{172,126});
    rules[71]=new Rule(-27, new int[]{166,196,144});
    rules[72]=new Rule(-27, new int[]{166,196,145});
    rules[73]=new Rule(-27, new int[]{166,126});
    rules[74]=new Rule(-27, new int[]{166,196,126});
    rules[75]=new Rule(-28, new int[]{167,196,133});
    rules[76]=new Rule(-29, new int[]{168,196,133});
    rules[77]=new Rule(-30, new int[]{185,196,-24});
    rules[78]=new Rule(-30, new int[]{185,126});
    rules[79]=new Rule(-31, new int[]{186,196,-24});
    rules[80]=new Rule(-31, new int[]{186,126});
    rules[81]=new Rule(-32, new int[]{187,196,-24});
    rules[82]=new Rule(-32, new int[]{187,126});
    rules[83]=new Rule(-33, new int[]{188,196,-4});
    rules[84]=new Rule(-33, new int[]{188,126});
    rules[85]=new Rule(-34, new int[]{189,196,-24});
    rules[86]=new Rule(-34, new int[]{189,126});
    rules[87]=new Rule(-35, new int[]{190,196,-24});
    rules[88]=new Rule(-35, new int[]{190,126});
    rules[89]=new Rule(-36, new int[]{191,196,-4});
    rules[90]=new Rule(-36, new int[]{191,126});
    rules[91]=new Rule(-37, new int[]{192,196,-24});
    rules[92]=new Rule(-37, new int[]{192,126});
    rules[93]=new Rule(-38, new int[]{193,196,-24});
    rules[94]=new Rule(-38, new int[]{193,126});
    rules[95]=new Rule(-39, new int[]{194,196,-4});
    rules[96]=new Rule(-39, new int[]{194,126});
    rules[97]=new Rule(-40, new int[]{195,196,133});
    rules[98]=new Rule(-40, new int[]{195,126});
    rules[99]=new Rule(-41, new int[]{132});
    rules[100]=new Rule(-42, new int[]{173,-41,196,-4});
    rules[101]=new Rule(-42, new int[]{173,126,196,-4});
    rules[102]=new Rule(-43, new int[]{-42});
    rules[103]=new Rule(-43, new int[]{-43,-42});
    rules[104]=new Rule(-44, new int[]{-43,174,-4});
    rules[105]=new Rule(-45, new int[]{-23});
    rules[106]=new Rule(-45, new int[]{-23,-45});
    rules[107]=new Rule(-45, new int[]{-22});
    rules[108]=new Rule(-45, new int[]{-22,-45});
    rules[109]=new Rule(-45, new int[]{-27});
    rules[110]=new Rule(-45, new int[]{-27,-45});
    rules[111]=new Rule(-45, new int[]{-28});
    rules[112]=new Rule(-45, new int[]{-28,-45});
    rules[113]=new Rule(-45, new int[]{-29});
    rules[114]=new Rule(-45, new int[]{-29,-45});
    rules[115]=new Rule(-45, new int[]{-25});
    rules[116]=new Rule(-45, new int[]{-25,-45});
    rules[117]=new Rule(-45, new int[]{-26});
    rules[118]=new Rule(-45, new int[]{-26,-45});
    rules[119]=new Rule(-45, new int[]{-30});
    rules[120]=new Rule(-45, new int[]{-30,-45});
    rules[121]=new Rule(-45, new int[]{-31});
    rules[122]=new Rule(-45, new int[]{-31,-45});
    rules[123]=new Rule(-45, new int[]{-32});
    rules[124]=new Rule(-45, new int[]{-32,-45});
    rules[125]=new Rule(-45, new int[]{-33});
    rules[126]=new Rule(-45, new int[]{-33,-45});
    rules[127]=new Rule(-45, new int[]{-34});
    rules[128]=new Rule(-45, new int[]{-34,-45});
    rules[129]=new Rule(-45, new int[]{-35});
    rules[130]=new Rule(-45, new int[]{-35,-45});
    rules[131]=new Rule(-45, new int[]{-36});
    rules[132]=new Rule(-45, new int[]{-36,-45});
    rules[133]=new Rule(-45, new int[]{-37});
    rules[134]=new Rule(-45, new int[]{-37,-45});
    rules[135]=new Rule(-45, new int[]{-38});
    rules[136]=new Rule(-45, new int[]{-38,-45});
    rules[137]=new Rule(-45, new int[]{-39});
    rules[138]=new Rule(-45, new int[]{-39,-45});
    rules[139]=new Rule(-45, new int[]{-40});
    rules[140]=new Rule(-45, new int[]{-40,-45});
    rules[141]=new Rule(-20, new int[]{153,154,-21});
    rules[142]=new Rule(-20, new int[]{153,154,126});
    rules[143]=new Rule(-20, new int[]{153,154,-21,-45});
    rules[144]=new Rule(-46, new int[]{-4});
    rules[145]=new Rule(-11, new int[]{141,-47,196,-46});
    rules[146]=new Rule(-11, new int[]{141,-47,196,-46,-11});
    rules[147]=new Rule(-48, new int[]{44});
    rules[148]=new Rule(-49, new int[]{-4});
    rules[149]=new Rule(-50, new int[]{-49});
    rules[150]=new Rule(-50, new int[]{-50,-48,-49});
    rules[151]=new Rule(-51, new int[]{40});
    rules[152]=new Rule(-52, new int[]{41});
    rules[153]=new Rule(-53, new int[]{-51,-52});
    rules[154]=new Rule(-53, new int[]{-51,-50,-52});
    rules[155]=new Rule(-53, new int[]{-51,-50,126});
    rules[156]=new Rule(-53, new int[]{-51,126,-52});
    rules[157]=new Rule(-54, new int[]{-53});
    rules[158]=new Rule(-55, new int[]{128});
    rules[159]=new Rule(-55, new int[]{152});
    rules[160]=new Rule(-55, new int[]{144});
    rules[161]=new Rule(-55, new int[]{145});
    rules[162]=new Rule(-55, new int[]{150});
    rules[163]=new Rule(-55, new int[]{148});
    rules[164]=new Rule(-55, new int[]{149});
    rules[165]=new Rule(-55, new int[]{167});
    rules[166]=new Rule(-55, new int[]{184});
    rules[167]=new Rule(-56, new int[]{});
    rules[168]=new Rule(-56, new int[]{182});
    rules[169]=new Rule(-56, new int[]{183});
    rules[170]=new Rule(-57, new int[]{});
    rules[171]=new Rule(-57, new int[]{129});
    rules[172]=new Rule(-57, new int[]{144});
    rules[173]=new Rule(-57, new int[]{145});
    rules[174]=new Rule(-57, new int[]{146});
    rules[175]=new Rule(-57, new int[]{147});
    rules[176]=new Rule(-58, new int[]{});
    rules[177]=new Rule(-58, new int[]{-59});
    rules[178]=new Rule(-60, new int[]{181,40,-4,44,-4,41});
    rules[179]=new Rule(-60, new int[]{181,40,-4,44,-4,44,-58,41});
    rules[180]=new Rule(-60, new int[]{181,40,-4,44,-4,44,-58,44,-57,41});
    rules[181]=new Rule(-60, new int[]{181,40,-4,44,-4,44,-58,44,-57,44,-56,41});
    rules[182]=new Rule(-61, new int[]{-60});
    rules[183]=new Rule(-62, new int[]{-55,-54});
    rules[184]=new Rule(-62, new int[]{-61});
    rules[185]=new Rule(-62, new int[]{184,-55,-54});
    rules[186]=new Rule(-62, new int[]{184,-61});
    rules[187]=new Rule(-63, new int[]{131});
    rules[188]=new Rule(-64, new int[]{});
    rules[189]=new Rule(-64, new int[]{-59});
    rules[190]=new Rule(-65, new int[]{-64});
    rules[191]=new Rule(-65, new int[]{-65,44,-64});
    rules[192]=new Rule(-66, new int[]{123,-65,125});
    rules[193]=new Rule(-66, new int[]{123,-65,125,44,-66});
    rules[194]=new Rule(-67, new int[]{176});
    rules[195]=new Rule(-67, new int[]{160});
    rules[196]=new Rule(-67, new int[]{177});
    rules[197]=new Rule(-67, new int[]{178});
    rules[198]=new Rule(-67, new int[]{179});
    rules[199]=new Rule(-67, new int[]{180});
    rules[200]=new Rule(-68, new int[]{130,44,-67});
    rules[201]=new Rule(-69, new int[]{-68});
    rules[202]=new Rule(-69, new int[]{-69,44,-68});
    rules[203]=new Rule(-70, new int[]{175,40,-69,44,123,-66,125,41});
    rules[204]=new Rule(-71, new int[]{-70});
    rules[205]=new Rule(-72, new int[]{132});
    rules[206]=new Rule(-72, new int[]{133});
    rules[207]=new Rule(-72, new int[]{128});
    rules[208]=new Rule(-72, new int[]{-71});
    rules[209]=new Rule(-73, new int[]{-72});
    rules[210]=new Rule(-19, new int[]{-72,-63});
    rules[211]=new Rule(-47, new int[]{-72,-63});
    rules[212]=new Rule(-74, new int[]{-72,-63});
    rules[213]=new Rule(-74, new int[]{-63});
    rules[214]=new Rule(-75, new int[]{40,41});
    rules[215]=new Rule(-75, new int[]{40,-50,41});
    rules[216]=new Rule(-75, new int[]{40,-50,126});
    rules[217]=new Rule(-76, new int[]{-74,-75});
    rules[218]=new Rule(-77, new int[]{-74});
    rules[219]=new Rule(-77, new int[]{-62});
    rules[220]=new Rule(-77, new int[]{-75});
    rules[221]=new Rule(-77, new int[]{-76});
    rules[222]=new Rule(-77, new int[]{129});
    rules[223]=new Rule(-77, new int[]{130});
    rules[224]=new Rule(-77, new int[]{144});
    rules[225]=new Rule(-77, new int[]{145});
    rules[226]=new Rule(-77, new int[]{148});
    rules[227]=new Rule(-77, new int[]{149});
    rules[228]=new Rule(-77, new int[]{150});
    rules[229]=new Rule(-77, new int[]{-73});
    rules[230]=new Rule(-78, new int[]{33});
    rules[231]=new Rule(-78, new int[]{45});
    rules[232]=new Rule(-78, new int[]{43});
    rules[233]=new Rule(-79, new int[]{-77});
    rules[234]=new Rule(-79, new int[]{-78,-79});
    rules[235]=new Rule(-80, new int[]{43});
    rules[236]=new Rule(-80, new int[]{45});
    rules[237]=new Rule(-80, new int[]{42});
    rules[238]=new Rule(-80, new int[]{47});
    rules[239]=new Rule(-80, new int[]{203});
    rules[240]=new Rule(-80, new int[]{204});
    rules[241]=new Rule(-80, new int[]{38});
    rules[242]=new Rule(-80, new int[]{198});
    rules[243]=new Rule(-80, new int[]{199});
    rules[244]=new Rule(-80, new int[]{200});
    rules[245]=new Rule(-80, new int[]{201});
    rules[246]=new Rule(-80, new int[]{196});
    rules[247]=new Rule(-80, new int[]{197});
    rules[248]=new Rule(-81, new int[]{-79});
    rules[249]=new Rule(-81, new int[]{-81,-80,-79});
    rules[250]=new Rule(-59, new int[]{-81});
    rules[251]=new Rule(-4, new int[]{-59});
    rules[252]=new Rule(-4, new int[]{-44});

    nonTerminals = new string[] {"", "Start", "$accept", "DaxQueries", 
      "Expression", "DaxScript", "Empty", "Order", "OrderByList", "OrderBy", 
      "DaxQuery", "Definitions", "CreateMeasure", "CreateKpi", "CreateMember", 
      "Calculate", "Alter", "CubeName", "MeasureExpression", "MeasureName", "CalculationProperty", 
      "CalculationPropertyFormatType", "CalculationPropertyAccuracy", "CalculationPropertyVisible", 
      "CalculationPropertyDescriptionContent", "CalculationPropertyDescription", 
      "CalculationPropertyDisplayFolder", "CalculationPropertyThousandSeparator", 
      "CalculationPropertyFormat", "CalculationPropertyAdditionalInfo", "CalculationPropertyKpiDescription", 
      "CalculationPropertyKpiTargetFormatString", "CalculationPropertyKpiTargetDescription", 
      "CalculationPropertyKpiTargetExpression", "CalculationPropertyKpiStatusGraphic", 
      "CalculationPropertyKpiStatusDescription", "CalculationPropertyKpiStatusExpression", 
      "CalculationPropertyKpiTrendGraphic", "CalculationPropertyKpiTrendDescription", 
      "CalculationPropertyKpiTrendExpression", "CalculationPropertyKpiAnnotations", 
      "VarName", "VarDeclaration", "VarDeclarations", "VarExpression", "CalculationPropertyParams", 
      "QueryMeasureExpression", "QueryMeasureName", "ParamSeparator", "ParamExpression", 
      "Params1", "StartArg", "EndArg", "ParenthesisParameters", "FunctionArgs", 
      "FunctionName", "RankXTies", "RankXOrder", "RankXValue", "ScalarExpression", 
      "RankX", "RankXFunction", "FunctionCall", "ColumnRef", "DataTableValue", 
      "DataTableValues", "DataTableRows", "DataTableColumnType", "DataTableColumn", 
      "DataTableColumns", "DataTable", "DataTableFunction", "TableRef", "TableExpression", 
      "ColMeasureRef", "ParenthesisExpression", "CalculateShortcut", "PrimaryExpression", 
      "UnaryOperator", "UnaryExpression", "BinaryOperator", "BinaryExpression", 
      };
  }

  protected override void DoAction(int action)
  {
    switch (action)
    {
      case 37: // MeasureExpression -> Expression 
{ SpecifyMeasureExpression(location_stack.array[location_stack.top-1]); }
        break;
      case 38: // CreateMeasure -> KWCREATE KWMEASURE CubeName '.' MeasureName EQ MeasureExpression 
{ SpecifyFullMeasureText(location_stack.array[location_stack.top-7], location_stack.array[location_stack.top-1]); }
        break;
      case 39: // CreateMeasure -> KWCREATE KWMEASURE CubeName '.' MeasureName EQ MeasureExpression CalculationProperty 
{ SpecifyFullMeasureText(location_stack.array[location_stack.top-8], location_stack.array[location_stack.top-2]); }
        break;
      case 40: // CreateMeasure -> KWCREATE KWMEASURE error '.' MeasureName EQ MeasureExpression 
{ CallHdlr("Cube name expected before '.'", location_stack.array[location_stack.top-5]); }
        break;
      case 41: // CreateMeasure -> KWCREATE KWMEASURE MeasureName EQ MeasureExpression 
{ SpecifyFullMeasureText(location_stack.array[location_stack.top-5], location_stack.array[location_stack.top-1]); }
        break;
      case 42: // CreateMeasure -> KWCREATE KWMEASURE MeasureName EQ MeasureExpression CalculationProperty 
{ SpecifyFullMeasureText(location_stack.array[location_stack.top-6], location_stack.array[location_stack.top-2]); }
        break;
      case 43: // CreateMeasure -> KWCREATE KWMEASURE error EQ MeasureExpression 
{ CallHdlr("Measure name expected", location_stack.array[location_stack.top-3]); }
        break;
      case 48: // CalculationPropertyFormatType -> KWGENERAL 
{ SpecifyCalculationProperty(location_stack.array[location_stack.top-1]); }
        break;
      case 49: // CalculationPropertyFormatType -> KWNUMBERDECIMAL 
{ SpecifyCalculationProperty(location_stack.array[location_stack.top-1]); }
        break;
      case 50: // CalculationPropertyFormatType -> KWNUMBERWHOLE 
{ SpecifyCalculationProperty(location_stack.array[location_stack.top-1]); }
        break;
      case 51: // CalculationPropertyFormatType -> KWPERCENTAGE 
{ SpecifyCalculationProperty(location_stack.array[location_stack.top-1]); }
        break;
      case 52: // CalculationPropertyFormatType -> KWSCIENTIFIC 
{ SpecifyCalculationProperty(location_stack.array[location_stack.top-1]); }
        break;
      case 53: // CalculationPropertyFormatType -> KWCURRENCY 
{ SpecifyCalculationProperty(location_stack.array[location_stack.top-1]); }
        break;
      case 54: // CalculationPropertyFormatType -> KWDATETIMECUSTOM 
{ SpecifyCalculationProperty(location_stack.array[location_stack.top-1]); }
        break;
      case 55: // CalculationPropertyFormatType -> KWDATETIMESHORTDATEPATTERN 
{ SpecifyCalculationProperty(location_stack.array[location_stack.top-1]); }
        break;
      case 56: // CalculationPropertyFormatType -> KWDATETIMEGENERAL 
{ SpecifyCalculationProperty(location_stack.array[location_stack.top-1]); }
        break;
      case 57: // CalculationPropertyFormatType -> KWTEXT 
{ SpecifyCalculationProperty(location_stack.array[location_stack.top-1]); }
        break;
      case 58: // CalculationPropertyAccuracy -> KWACCURACY EQ NUMBER 
{ SpecifyCalcPropAccuracy(location_stack.array[location_stack.top-1]); }
        break;
      case 59: // CalculationPropertyAccuracy -> KWACCURACY error 
{ CallHdlr("'=' is not specified", location_stack.array[location_stack.top-1]); }
        break;
      case 60: // CalculationPropertyAccuracy -> KWACCURACY EQ error 
{ CallHdlr("Value of Accuracy is not a number", location_stack.array[location_stack.top-1]); }
        break;
      case 61: // CalculationPropertyVisible -> KWVISIBLE EQ KWTRUE 
{ SpecifyCalcPropIsHidden(false); }
        break;
      case 62: // CalculationPropertyVisible -> KWVISIBLE EQ KWFALSE 
{ SpecifyCalcPropIsHidden(true); }
        break;
      case 63: // CalculationPropertyVisible -> KWVISIBLE error 
{ CallHdlr("'=' is not specified", location_stack.array[location_stack.top-1]); }
        break;
      case 64: // CalculationPropertyVisible -> KWVISIBLE EQ error 
{ CallHdlr("Visible can be either TRUE or FALSE", location_stack.array[location_stack.top-1]); }
        break;
      case 67: // CalculationPropertyDescription -> KWDESCRIPTION EQ CalculationPropertyDescriptionContent 
{ SpecifyCalcPropDescription(location_stack.array[location_stack.top-1]);  }
        break;
      case 68: // CalculationPropertyDescription -> KWDESCRIPTION error 
{ CallHdlr("'=' is not specified", location_stack.array[location_stack.top-1]); }
        break;
      case 69: // CalculationPropertyDisplayFolder -> KWDISPLAYFOLDER EQ ESCAPEDTABLENAME 
{ SpecifyCalcPropDisplayFolder(location_stack.array[location_stack.top-1]);  }
        break;
      case 70: // CalculationPropertyDisplayFolder -> KWDISPLAYFOLDER error 
{ CallHdlr("'=' is not specified", location_stack.array[location_stack.top-1]); }
        break;
      case 71: // CalculationPropertyThousandSeparator -> KWTHOUSANDSEPARATOR EQ KWTRUE 
{ SpecifyCalcPropThousandSeparator(true); }
        break;
      case 72: // CalculationPropertyThousandSeparator -> KWTHOUSANDSEPARATOR EQ KWFALSE 
{ SpecifyCalcPropThousandSeparator(false); }
        break;
      case 73: // CalculationPropertyThousandSeparator -> KWTHOUSANDSEPARATOR error 
{ CallHdlr("'=' is not specified", location_stack.array[location_stack.top-1]); }
        break;
      case 74: // CalculationPropertyThousandSeparator -> KWTHOUSANDSEPARATOR EQ error 
{ CallHdlr("ThousandSeparator can be either TRUE or FALSE", location_stack.array[location_stack.top-1]); }
        break;
      case 75: // CalculationPropertyFormat -> KWFORMAT EQ ESCAPEDTABLENAME 
{ SpecifyCalcPropFormat(location_stack.array[location_stack.top-1]); }
        break;
      case 76: // CalculationPropertyAdditionalInfo -> KWADDITIONALINFO EQ ESCAPEDTABLENAME 
{ SpecifyCalcPropAdditionalInfo(location_stack.array[location_stack.top-1]); }
        break;
      case 77: // CalculationPropertyKpiDescription -> KWKPIDESCRIPTION EQ CalculationPropertyDescriptionContent 
{ SpecifyCalcPropKpiDescription(location_stack.array[location_stack.top-1]);  }
        break;
      case 78: // CalculationPropertyKpiDescription -> KWKPIDESCRIPTION error 
{ CallHdlr("'=' is not specified", location_stack.array[location_stack.top-1]); }
        break;
      case 79: // CalculationPropertyKpiTargetFormatString -> KWKPITARGETFORMATSTRING EQ CalculationPropertyDescriptionContent 
{ SpecifyCalcPropKpiTargetFormatString(location_stack.array[location_stack.top-1]);  }
        break;
      case 80: // CalculationPropertyKpiTargetFormatString -> KWKPITARGETFORMATSTRING error 
{ CallHdlr("'=' is not specified", location_stack.array[location_stack.top-1]); }
        break;
      case 81: // CalculationPropertyKpiTargetDescription -> KWKPITARGETDESCRIPTION EQ CalculationPropertyDescriptionContent 
{ SpecifyCalcPropKpiTargetDescription(location_stack.array[location_stack.top-1]);  }
        break;
      case 82: // CalculationPropertyKpiTargetDescription -> KWKPITARGETDESCRIPTION error 
{ CallHdlr("'=' is not specified", location_stack.array[location_stack.top-1]); }
        break;
      case 83: // CalculationPropertyKpiTargetExpression -> KWKPITARGETEXPRESSION EQ Expression 
{ SpecifyCalcPropKpiTargetExpression(location_stack.array[location_stack.top-1]);  }
        break;
      case 84: // CalculationPropertyKpiTargetExpression -> KWKPITARGETEXPRESSION error 
{ CallHdlr("'=' is not specified", location_stack.array[location_stack.top-1]); }
        break;
      case 85: // CalculationPropertyKpiStatusGraphic -> KWKPISTATUSGRAPHIC EQ CalculationPropertyDescriptionContent 
{ SpecifyCalcPropKpiStatusGraphic(location_stack.array[location_stack.top-1]);  }
        break;
      case 86: // CalculationPropertyKpiStatusGraphic -> KWKPISTATUSGRAPHIC error 
{ CallHdlr("'=' is not specified", location_stack.array[location_stack.top-1]); }
        break;
      case 87: // CalculationPropertyKpiStatusDescription -> KWKPISTATUSDESCRIPTION EQ CalculationPropertyDescriptionContent 
{ SpecifyCalcPropKpiStatusDescription(location_stack.array[location_stack.top-1]);  }
        break;
      case 88: // CalculationPropertyKpiStatusDescription -> KWKPISTATUSDESCRIPTION error 
{ CallHdlr("'=' is not specified", location_stack.array[location_stack.top-1]); }
        break;
      case 89: // CalculationPropertyKpiStatusExpression -> KWKPISTATUSEXPRESSION EQ Expression 
{ SpecifyCalcPropKpiStatusExpression(location_stack.array[location_stack.top-1]);  }
        break;
      case 90: // CalculationPropertyKpiStatusExpression -> KWKPISTATUSEXPRESSION error 
{ CallHdlr("'=' is not specified", location_stack.array[location_stack.top-1]); }
        break;
      case 91: // CalculationPropertyKpiTrendGraphic -> KWKPITRENDGRAPHIC EQ CalculationPropertyDescriptionContent 
{ SpecifyCalcPropKpiTrendGraphic(location_stack.array[location_stack.top-1]);  }
        break;
      case 92: // CalculationPropertyKpiTrendGraphic -> KWKPITRENDGRAPHIC error 
{ CallHdlr("'=' is not specified", location_stack.array[location_stack.top-1]); }
        break;
      case 93: // CalculationPropertyKpiTrendDescription -> KWKPITRENDDESCRIPTION EQ CalculationPropertyDescriptionContent 
{ SpecifyCalcPropKpiTrendDescription(location_stack.array[location_stack.top-1]);  }
        break;
      case 94: // CalculationPropertyKpiTrendDescription -> KWKPITRENDDESCRIPTION error 
{ CallHdlr("'=' is not specified", location_stack.array[location_stack.top-1]); }
        break;
      case 95: // CalculationPropertyKpiTrendExpression -> KWKPITRENDEXPRESSION EQ Expression 
{ SpecifyCalcPropKpiTrendExpression(location_stack.array[location_stack.top-1]);  }
        break;
      case 96: // CalculationPropertyKpiTrendExpression -> KWKPITRENDEXPRESSION error 
{ CallHdlr("'=' is not specified", location_stack.array[location_stack.top-1]); }
        break;
      case 97: // CalculationPropertyKpiAnnotations -> KWKPIANNOTATIONS EQ ESCAPEDTABLENAME 
{ SpecifyCalcPropKpiAnnotations(location_stack.array[location_stack.top-1]);  }
        break;
      case 98: // CalculationPropertyKpiAnnotations -> KWKPIANNOTATIONS error 
{ CallHdlr("'=' is not specified", location_stack.array[location_stack.top-1]); }
        break;
      case 101: // VarDeclaration -> KWVAR error EQ Expression 
{ CallHdlr("Invalid var name", location_stack.array[location_stack.top-3]); }
        break;
      case 142: // CalculationProperty -> KWCALCULATION KWPROPERTY error 
{ CallHdlr("Wrong calculation property type.  Expected types: General, NumberDecimal, NumberWhole, Percentage, Scientific, Currency, DateTimeCustom, Visible, Description, DisplayFolder", location_stack.array[location_stack.top-2]); }
        break;
      case 147: // ParamSeparator -> ',' 
{ NextParameter(location_stack.array[location_stack.top-1]); }
        break;
      case 151: // StartArg -> '(' 
{ StartParameters(location_stack.array[location_stack.top-1]); }
        break;
      case 152: // EndArg -> ')' 
{ EndParameters(location_stack.array[location_stack.top-1]); }
        break;
      case 153: // ParenthesisParameters -> StartArg EndArg 
{ Match(location_stack.array[location_stack.top-2], location_stack.array[location_stack.top-1]); }
        break;
      case 154: // ParenthesisParameters -> StartArg Params1 EndArg 
{ Match(location_stack.array[location_stack.top-3], location_stack.array[location_stack.top-1]); }
        break;
      case 155: // ParenthesisParameters -> StartArg Params1 error 
{ CallHdlr("unmatched parentheses", location_stack.array[location_stack.top-1]); }
        break;
      case 156: // ParenthesisParameters -> StartArg error EndArg 
{ yyval = value_stack.array[value_stack.top-1];
                                            CallHdlr("error in parameters", location_stack.array[location_stack.top-2]); }
        break;
      case 158: // FunctionName -> FUNCTION 
{ StartFunction(location_stack.array[location_stack.top-1], value_stack.array[value_stack.top-1].str); }
        break;
      case 159: // FunctionName -> KWCALCULATE 
{ StartFunction(location_stack.array[location_stack.top-1], value_stack.array[value_stack.top-1].str); }
        break;
      case 160: // FunctionName -> KWTRUE 
{ StartFunction(location_stack.array[location_stack.top-1], value_stack.array[value_stack.top-1].str); }
        break;
      case 161: // FunctionName -> KWFALSE 
{ StartFunction(location_stack.array[location_stack.top-1], value_stack.array[value_stack.top-1].str); }
        break;
      case 162: // FunctionName -> KWYEAR 
{ StartFunction(location_stack.array[location_stack.top-1], value_stack.array[value_stack.top-1].str); }
        break;
      case 163: // FunctionName -> KWDAY 
{ StartFunction(location_stack.array[location_stack.top-1], value_stack.array[value_stack.top-1].str); }
        break;
      case 164: // FunctionName -> KWMONTH 
{ StartFunction(location_stack.array[location_stack.top-1], value_stack.array[value_stack.top-1].str); }
        break;
      case 165: // FunctionName -> KWFORMAT 
{ StartFunction(location_stack.array[location_stack.top-1], value_stack.array[value_stack.top-1].str); }
        break;
      case 166: // FunctionName -> KWNOT 
{ StartFunction(location_stack.array[location_stack.top-1], value_stack.array[value_stack.top-1].str); }
        break;
      case 182: // RankXFunction -> RankX 
{ StartFunction(location_stack.array[location_stack.top-1], value_stack.array[value_stack.top-1].str); }
        break;
      case 204: // DataTableFunction -> DataTable 
{ StartFunction(location_stack.array[location_stack.top-1], value_stack.array[value_stack.top-1].str); }
        break;
      case 210: // MeasureName -> TableRef ColumnRef 
{ CreateNewMeasure(location_stack.array[location_stack.top-2], location_stack.array[location_stack.top-1]); }
        break;
      case 214: // ParenthesisExpression -> '(' ')' 
{ Match(location_stack.array[location_stack.top-2], location_stack.array[location_stack.top-1]); }
        break;
      case 215: // ParenthesisExpression -> '(' Params1 ')' 
{ Match(location_stack.array[location_stack.top-3], location_stack.array[location_stack.top-1]); }
        break;
      case 216: // ParenthesisExpression -> '(' Params1 error 
{ CallHdlr("unmatched parentheses", location_stack.array[location_stack.top-1]); }
        break;
    }
  }

  protected override string TerminalToString(int terminal)
  {
    if (((Tokens)terminal).ToString() != terminal.ToString())
      return ((Tokens)terminal).ToString();
    else
      return CharToString((char)terminal);
  }














}
}
