// This code was generated by the Managed Package Parser Generator


using System;
using System.Collections.Generic;
using System.Text;
using Babel.ParserGenerator;
using Microsoft.VisualStudio.TextManager.Interop;

namespace Babel.Parser
{
public enum Tokens {error=126,EOF=127,FUNCTION=128,
    NUMBER=129,STRING=130,COLUMNNAME=131,TABLENAME=132,ESCAPEDTABLENAME=133,PARTIALCOLUMNNAME=134,PARTIALTABLENAME=135,MDXCODE=136,
    KWALTER=137,KPI=138,KWEVALUATE=139,KWDEFINE=140,KWMEASURE=141,KWORDER=142,KWBY=143,KWTRUE=144,
    KWFALSE=145,KWASC=146,KWDESC=147,KWDAY=148,KWMONTH=149,KWYEAR=150,KWCREATE=151,KWCALCULATE=152,
    KWCALCULATION=153,KWPROPERTY=154,KWGENERAL=155,KWNUMBERDECIMAL=156,KWNUMBERWHOLE=157,KWPERCENTAGE=158,KWSCIENTIFIC=159,KWCURRENCY=160,
    KWDATETIMECUSTOM=161,KWDATETIMESHORTDATEPATTERN=162,KWDATETIMEGENERAL=163,KWTEXT=164,KWACCURACY=165,KWTHOUSANDSEPARATOR=166,KWFORMAT=167,KWADDITIONALINFO=168,
    KWKPI=169,KWVISIBLE=170,KWDESCRIPTION=171,KWDISPLAYFOLDER=172,KWVAR=173,KWRETURN=174,KWDATATABLE=175,KWBOOLEAN=176,
    KWDATETIME=177,KWDOUBLE=178,KWINTEGER=179,KWSTRING=180,KWRANKX=181,KWSKIP=182,KWDENSE=183,KWNOT=184,
    KWKPIDESCRIPTION=185,KWKPITARGETFORMATSTRING=186,KWKPITARGETDESCRIPTION=187,KWKPITARGETEXPRESSION=188,KWKPISTATUSGRAPHIC=189,KWKPISTATUSDESCRIPTION=190,KWKPISTATUSEXPRESSION=191,KWKPITRENDGRAPHIC=192,
    KWKPITRENDDESCRIPTION=193,KWKPITRENDEXPRESSION=194,KWKPIANNOTATIONS=195,EQ=196,NEQ=197,GT=198,GTE=199,LT=200,
    LTE=201,POW=202,AMPAMP=203,BARBAR=204,LEFTSQUAREBRACKET=205,RIGHTSQUAREBRACKET=206,maxParseToken=207,LEX_WHITE=208,
    LEX_COMMENT=209,LEX_ERROR=210};

public partial struct LexValue
#line 13 "../../GeneratorSource/parser.y"
			{
    public string str;
}
// Abstract base class for MPLEX scanners
public abstract class ScanBase : AScanner<LexValue,LexLocation> {
    protected abstract int CurrentSc { get; set; }
    //
    // Override the virtual EolState property if the scanner state is more
    // complicated then a simple copy of the current start state ordinal
    //
    public virtual int EolState { get { return CurrentSc; } set { CurrentSc = value; } }
}

public partial class Parser: ShiftReduceParser<LexValue, LexLocation>
{
#line 18 "../../GeneratorSource/parser.y"

    ErrorHandler handler = null;
    public void SetHandler(ErrorHandler hdlr) { handler = hdlr; }
    internal void CallHdlr(string msg, LexLocation val)
    {
        handler.AddError(msg, val.sLin, val.sCol, val.eCol - val.sCol);
    }

    internal TextSpan MkTSpan(LexLocation s)
    {
        TextSpan ts;
        ts.iStartLine = s.sLin;
        ts.iStartIndex = s.sCol;
        ts.iEndLine = s.eLin;
        ts.iEndIndex = s.eCol;
        return ts;
    }

    internal void Match(LexLocation lh, LexLocation rh)
    {
        DefineMatch(MkTSpan(lh), MkTSpan(rh));
    }

    internal void StartFunction(LexLocation s, string token)
    {
        System.Diagnostics.Debug.WriteLine("StartName:" + token);
        Sink.StartName(MkTSpan(s), token); 
    }

    internal void StartParameters(LexLocation s)
    {
        System.Diagnostics.Debug.WriteLine("StartParameters");
        Sink.StartParameters(MkTSpan(s)); 
    }

    internal void EndParameters(LexLocation s)
    {
        System.Diagnostics.Debug.WriteLine("EndParameters");
        Sink.EndParameters(MkTSpan(s));
    }

    internal void NextParameter(LexLocation s)
    {
        System.Diagnostics.Debug.WriteLine("Next Parameter");
        Sink.NextParameter(MkTSpan(s));
    }
  protected override void Initialize()
  {
    this.errToken = (int)Tokens.error;
    this.eofToken = (int)Tokens.EOF;

    states=new State[360];
    AddState(0,new State(new int[]{140,5,139,180,196,184,151,190,152,353,137,357,127,359},new int[]{-1,1,-3,3,-10,183,-5,186,-12,187,-13,344,-14,347,-15,350,-16,354,-6,358}));
    AddState(1,new State(new int[]{127,2}));
    AddState(2,new State(-1));
    AddState(3,new State(new int[]{140,5,139,180,127,-2},new int[]{-10,4}));
    AddState(4,new State(-14));
    AddState(5,new State(new int[]{141,171},new int[]{-11,6}));
    AddState(6,new State(new int[]{139,7}));
    AddState(7,new State(new int[]{128,36,152,37,144,38,145,39,150,40,148,41,149,42,167,43,184,44,181,58,132,94,133,95,175,98,131,93,40,83,129,118,130,119,33,124,45,125,43,126,173,133},new int[]{-4,8,-57,25,-58,26,-78,27,-71,90,-70,57,-53,91,-56,96,-66,97,-60,123,-55,81,-54,115,-72,116,-73,117,-74,120,-76,121,-75,127,-44,128,-43,129,-42,132}));
    AddState(8,new State(new int[]{142,160,43,12,45,13,42,14,47,15,203,16,204,17,38,18,198,19,199,20,200,21,201,22,196,23,197,24,140,-16,139,-16,127,-16},new int[]{-9,9,-77,10}));
    AddState(9,new State(-15));
    AddState(10,new State(new int[]{128,36,152,37,144,38,145,39,150,40,148,41,149,42,167,43,184,44,181,58,132,94,133,95,175,98,131,93,40,83,129,118,130,119,33,124,45,125,43,126,173,133},new int[]{-4,11,-57,25,-58,26,-78,27,-71,90,-70,57,-53,91,-56,96,-66,97,-60,123,-55,81,-54,115,-72,116,-73,117,-74,120,-76,121,-75,127,-44,128,-43,129,-42,132}));
    AddState(11,new State(new int[]{43,12,45,13,42,14,47,15,203,16,204,17,38,18,198,19,199,20,200,21,201,22,196,23,197,24,142,-219,140,-219,139,-219,127,-219,126,-219,41,-219,44,-219,125,-219,174,-219,173,-219,146,-219,147,-219,141,-219,153,-219,59,-219,170,-219,165,-219,166,-219,167,-219,168,-219,171,-219,172,-219,185,-219,186,-219,187,-219,188,-219,189,-219,190,-219,191,-219,192,-219,193,-219,194,-219,195,-219},new int[]{-77,10}));
    AddState(12,new State(-220));
    AddState(13,new State(-221));
    AddState(14,new State(-222));
    AddState(15,new State(-223));
    AddState(16,new State(-224));
    AddState(17,new State(-225));
    AddState(18,new State(-226));
    AddState(19,new State(-227));
    AddState(20,new State(-228));
    AddState(21,new State(-229));
    AddState(22,new State(-230));
    AddState(23,new State(-231));
    AddState(24,new State(-232));
    AddState(25,new State(-212));
    AddState(26,new State(-161));
    AddState(27,new State(new int[]{40,47},new int[]{-79,28,-51,29,-50,48}));
    AddState(28,new State(-237));
    AddState(29,new State(new int[]{126,158,41,157,128,36,152,37,144,38,145,39,150,40,148,41,149,42,167,43,184,44,181,58,132,94,133,95,175,98,131,93,40,83,129,118,130,119,33,124,45,125,43,126,173,133,142,-250,42,-250,47,-250,203,-250,204,-250,38,-250,198,-250,199,-250,200,-250,201,-250,196,-250,197,-250,140,-250,139,-250,127,-250,44,-250,125,-250,174,-250,146,-250,147,-250,141,-250,153,-250,59,-250,170,-250,165,-250,166,-250,168,-250,171,-250,172,-250,185,-250,186,-250,187,-250,188,-250,189,-250,190,-250,191,-250,192,-250,193,-250,194,-250,195,-250},new int[]{-52,30,-48,31,-4,89,-57,25,-58,26,-78,27,-71,90,-70,57,-53,91,-56,96,-66,97,-60,123,-55,81,-54,115,-72,116,-73,117,-74,120,-76,121,-75,127,-44,128,-43,129,-42,132}));
    AddState(30,new State(-148));
    AddState(31,new State(new int[]{126,33,41,157,44,88},new int[]{-52,32,-49,34}));
    AddState(32,new State(-149));
    AddState(33,new State(-150));
    AddState(34,new State(new int[]{128,36,152,37,144,38,145,39,150,40,148,41,149,42,167,43,184,44,181,58,132,94,133,95,175,98,131,93,40,83,129,118,130,119,33,124,45,125,43,126,173,133},new int[]{-4,35,-57,25,-58,26,-78,27,-71,90,-70,57,-53,91,-56,96,-66,97,-60,123,-55,81,-54,115,-72,116,-73,117,-74,120,-76,121,-75,127,-44,128,-43,129,-42,132}));
    AddState(35,new State(new int[]{43,12,45,13,42,14,47,15,203,16,204,17,38,18,198,19,199,20,200,21,201,22,196,23,197,24,126,-145,41,-145,44,-145},new int[]{-77,10}));
    AddState(36,new State(new int[]{40,-241,131,-159,142,-159,43,-159,45,-159,42,-159,47,-159,203,-159,204,-159,38,-159,198,-159,199,-159,200,-159,201,-159,196,-159,197,-159,140,-159,139,-159,127,-159,126,-159,41,-159,44,-159,125,-159,174,-159,173,-159,146,-159,147,-159,141,-159,153,-159,59,-159,170,-159,165,-159,166,-159,167,-159,168,-159,171,-159,172,-159,185,-159,186,-159,187,-159,188,-159,189,-159,190,-159,191,-159,192,-159,193,-159,194,-159,195,-159}));
    AddState(37,new State(-242));
    AddState(38,new State(new int[]{40,-243,142,-207,43,-207,45,-207,42,-207,47,-207,203,-207,204,-207,38,-207,198,-207,199,-207,200,-207,201,-207,196,-207,197,-207,140,-207,139,-207,127,-207,126,-207,41,-207,44,-207,125,-207,174,-207,173,-207,146,-207,147,-207,141,-207,153,-207,59,-207,170,-207,165,-207,166,-207,167,-207,168,-207,171,-207,172,-207,185,-207,186,-207,187,-207,188,-207,189,-207,190,-207,191,-207,192,-207,193,-207,194,-207,195,-207}));
    AddState(39,new State(new int[]{40,-244,142,-208,43,-208,45,-208,42,-208,47,-208,203,-208,204,-208,38,-208,198,-208,199,-208,200,-208,201,-208,196,-208,197,-208,140,-208,139,-208,127,-208,126,-208,41,-208,44,-208,125,-208,174,-208,173,-208,146,-208,147,-208,141,-208,153,-208,59,-208,170,-208,165,-208,166,-208,167,-208,168,-208,171,-208,172,-208,185,-208,186,-208,187,-208,188,-208,189,-208,190,-208,191,-208,192,-208,193,-208,194,-208,195,-208}));
    AddState(40,new State(new int[]{40,-245,142,-211,43,-211,45,-211,42,-211,47,-211,203,-211,204,-211,38,-211,198,-211,199,-211,200,-211,201,-211,196,-211,197,-211,140,-211,139,-211,127,-211,126,-211,41,-211,44,-211,125,-211,174,-211,173,-211,146,-211,147,-211,141,-211,153,-211,59,-211,170,-211,165,-211,166,-211,167,-211,168,-211,171,-211,172,-211,185,-211,186,-211,187,-211,188,-211,189,-211,190,-211,191,-211,192,-211,193,-211,194,-211,195,-211}));
    AddState(41,new State(new int[]{40,-246,142,-209,43,-209,45,-209,42,-209,47,-209,203,-209,204,-209,38,-209,198,-209,199,-209,200,-209,201,-209,196,-209,197,-209,140,-209,139,-209,127,-209,126,-209,41,-209,44,-209,125,-209,174,-209,173,-209,146,-209,147,-209,141,-209,153,-209,59,-209,170,-209,165,-209,166,-209,167,-209,168,-209,171,-209,172,-209,185,-209,186,-209,187,-209,188,-209,189,-209,190,-209,191,-209,192,-209,193,-209,194,-209,195,-209}));
    AddState(42,new State(new int[]{40,-247,142,-210,43,-210,45,-210,42,-210,47,-210,203,-210,204,-210,38,-210,198,-210,199,-210,200,-210,201,-210,196,-210,197,-210,140,-210,139,-210,127,-210,126,-210,41,-210,44,-210,125,-210,174,-210,173,-210,146,-210,147,-210,141,-210,153,-210,59,-210,170,-210,165,-210,166,-210,167,-210,168,-210,171,-210,172,-210,185,-210,186,-210,187,-210,188,-210,189,-210,190,-210,191,-210,192,-210,193,-210,194,-210,195,-210}));
    AddState(43,new State(-248));
    AddState(44,new State(new int[]{128,50,152,37,144,51,145,52,150,53,148,54,149,55,167,43,184,56,181,58,40,-249},new int[]{-78,45,-71,49,-70,57}));
    AddState(45,new State(new int[]{40,47},new int[]{-79,46,-51,29,-50,48}));
    AddState(46,new State(-239));
    AddState(47,new State(-252));
    AddState(48,new State(-251));
    AddState(49,new State(-240));
    AddState(50,new State(-241));
    AddState(51,new State(-243));
    AddState(52,new State(-244));
    AddState(53,new State(-245));
    AddState(54,new State(-246));
    AddState(55,new State(-247));
    AddState(56,new State(-249));
    AddState(57,new State(-196));
    AddState(58,new State(new int[]{40,59}));
    AddState(59,new State(new int[]{128,36,152,37,144,51,145,52,150,53,148,54,149,55,167,43,184,44,181,58,132,94,133,95,175,98},new int[]{-57,60,-58,155,-78,27,-71,90,-70,57,-53,156,-56,96,-66,97}));
    AddState(60,new State(new int[]{44,61}));
    AddState(61,new State(new int[]{128,36,152,37,144,38,145,39,150,40,148,41,149,42,167,43,184,44,181,58,132,94,133,95,175,98,131,93,40,83,129,118,130,119,33,124,45,125,43,126,173,133},new int[]{-4,62,-57,25,-58,26,-78,27,-71,90,-70,57,-53,91,-56,96,-66,97,-60,123,-55,81,-54,115,-72,116,-73,117,-74,120,-76,121,-75,127,-44,128,-43,129,-42,132}));
    AddState(62,new State(new int[]{41,63,44,64,43,12,45,13,42,14,47,15,203,16,204,17,38,18,198,19,199,20,200,21,201,22,196,23,197,24},new int[]{-77,10}));
    AddState(63,new State(-192));
    AddState(64,new State(new int[]{132,94,133,95,128,36,175,98,131,93,152,37,144,38,145,39,150,40,148,41,149,42,167,43,184,44,181,58,40,83,129,118,130,119,33,124,45,125,43,126,173,133,41,-190,44,-190},new int[]{-69,65,-60,80,-55,81,-53,91,-56,96,-66,97,-54,115,-58,26,-78,27,-71,90,-70,57,-72,116,-73,117,-74,120,-76,121,-75,127,-4,142,-57,25,-44,128,-43,129,-42,132}));
    AddState(65,new State(new int[]{41,66,44,67}));
    AddState(66,new State(-193));
    AddState(67,new State(new int[]{129,75,144,76,145,77,146,78,147,79,41,-184,44,-184},new int[]{-68,68}));
    AddState(68,new State(new int[]{41,69,44,70}));
    AddState(69,new State(-194));
    AddState(70,new State(new int[]{182,73,183,74,41,-181},new int[]{-67,71}));
    AddState(71,new State(new int[]{41,72}));
    AddState(72,new State(-195));
    AddState(73,new State(-182));
    AddState(74,new State(-183));
    AddState(75,new State(-185));
    AddState(76,new State(-186));
    AddState(77,new State(-187));
    AddState(78,new State(-188));
    AddState(79,new State(-189));
    AddState(80,new State(new int[]{41,-191,44,-191,43,-213,45,-213,42,-213,47,-213,203,-213,204,-213,38,-213,198,-213,199,-213,200,-213,201,-213,196,-213,197,-213}));
    AddState(81,new State(new int[]{40,83,142,-199,43,-199,45,-199,42,-199,47,-199,203,-199,204,-199,38,-199,198,-199,199,-199,200,-199,201,-199,196,-199,197,-199,140,-199,139,-199,127,-199,126,-199,41,-199,44,-199,125,-199,174,-199,173,-199,146,-199,147,-199,141,-199,153,-199,59,-199,170,-199,165,-199,166,-199,167,-199,168,-199,171,-199,172,-199,185,-199,186,-199,187,-199,188,-199,189,-199,190,-199,191,-199,192,-199,193,-199,194,-199,195,-199},new int[]{-72,82}));
    AddState(82,new State(-233));
    AddState(83,new State(new int[]{41,84,128,36,152,37,144,38,145,39,150,40,148,41,149,42,167,43,184,44,181,58,132,94,133,95,175,98,131,93,40,83,129,118,130,119,33,124,45,125,43,126,173,133},new int[]{-48,85,-4,89,-57,25,-58,26,-78,27,-71,90,-70,57,-53,91,-56,96,-66,97,-60,123,-55,81,-54,115,-72,116,-73,117,-74,120,-76,121,-75,127,-44,128,-43,129,-42,132}));
    AddState(84,new State(-234));
    AddState(85,new State(new int[]{41,86,126,87,44,88},new int[]{-49,34}));
    AddState(86,new State(-235));
    AddState(87,new State(-236));
    AddState(88,new State(-147));
    AddState(89,new State(new int[]{43,12,45,13,42,14,47,15,203,16,204,17,38,18,198,19,199,20,200,21,201,22,196,23,197,24,126,-146,41,-146,44,-146},new int[]{-77,10}));
    AddState(90,new State(-238));
    AddState(91,new State(new int[]{131,93,142,-162,43,-162,45,-162,42,-162,47,-162,203,-162,204,-162,38,-162,198,-162,199,-162,200,-162,201,-162,196,-162,197,-162,140,-162,139,-162,127,-162,126,-162,41,-162,44,-162,125,-162,174,-162,173,-162,146,-162,147,-162,141,-162,153,-162,59,-162,170,-162,165,-162,166,-162,167,-162,168,-162,171,-162,172,-162,185,-162,186,-162,187,-162,188,-162,189,-162,190,-162,191,-162,192,-162,193,-162,194,-162,195,-162},new int[]{-54,92}));
    AddState(92,new State(-154));
    AddState(93,new State(-156));
    AddState(94,new State(-157));
    AddState(95,new State(-158));
    AddState(96,new State(-160));
    AddState(97,new State(-180));
    AddState(98,new State(new int[]{40,99}));
    AddState(99,new State(new int[]{130,145},new int[]{-65,100,-64,154}));
    AddState(100,new State(new int[]{44,101}));
    AddState(101,new State(new int[]{123,102,130,145},new int[]{-64,144}));
    AddState(102,new State(new int[]{123,106},new int[]{-62,103}));
    AddState(103,new State(new int[]{125,104}));
    AddState(104,new State(new int[]{41,105}));
    AddState(105,new State(-179));
    AddState(106,new State(new int[]{128,36,152,37,144,38,145,39,150,40,148,41,149,42,167,43,184,44,181,58,132,94,133,95,175,98,131,93,40,83,129,118,130,119,33,124,45,125,43,126,173,133,125,-163,44,-163},new int[]{-61,107,-59,143,-58,113,-78,27,-71,90,-70,57,-60,114,-55,81,-53,91,-56,96,-66,97,-54,115,-72,116,-73,117,-74,120,-76,121,-75,127,-4,142,-57,25,-44,128,-43,129,-42,132}));
    AddState(107,new State(new int[]{125,108,44,111}));
    AddState(108,new State(new int[]{44,109,125,-168}));
    AddState(109,new State(new int[]{123,106},new int[]{-62,110}));
    AddState(110,new State(-169));
    AddState(111,new State(new int[]{128,36,152,37,144,38,145,39,150,40,148,41,149,42,167,43,184,44,181,58,132,94,133,95,175,98,131,93,40,83,129,118,130,119,33,124,45,125,43,126,173,133,125,-163,44,-163},new int[]{-59,112,-58,113,-78,27,-71,90,-70,57,-60,114,-55,81,-53,91,-56,96,-66,97,-54,115,-72,116,-73,117,-74,120,-76,121,-75,127,-4,142,-57,25,-44,128,-43,129,-42,132}));
    AddState(112,new State(-167));
    AddState(113,new State(new int[]{125,-164,44,-164,43,-161,45,-161,42,-161,47,-161,203,-161,204,-161,38,-161,198,-161,199,-161,200,-161,201,-161,196,-161,197,-161}));
    AddState(114,new State(new int[]{125,-165,44,-165,43,-213,45,-213,42,-213,47,-213,203,-213,204,-213,38,-213,198,-213,199,-213,200,-213,201,-213,196,-213,197,-213}));
    AddState(115,new State(-155));
    AddState(116,new State(-201));
    AddState(117,new State(-202));
    AddState(118,new State(-203));
    AddState(119,new State(-204));
    AddState(120,new State(-205));
    AddState(121,new State(new int[]{128,36,152,37,144,38,145,39,150,40,148,41,149,42,167,43,184,44,181,58,132,94,133,95,175,98,131,93,40,83,129,118,130,119,33,124,45,125,43,126,173,133},new int[]{-4,122,-57,25,-58,26,-78,27,-71,90,-70,57,-53,91,-56,96,-66,97,-60,123,-55,81,-54,115,-72,116,-73,117,-74,120,-76,121,-75,127,-44,128,-43,129,-42,132}));
    AddState(122,new State(new int[]{43,12,45,13,42,14,47,15,203,16,204,17,38,18,198,19,199,20,200,21,201,22,196,23,197,24,142,-215,140,-215,139,-215,127,-215,126,-215,41,-215,44,-215,125,-215,174,-215,173,-215,146,-215,147,-215,141,-215,153,-215,59,-215,170,-215,165,-215,166,-215,167,-215,168,-215,171,-215,172,-215,185,-215,186,-215,187,-215,188,-215,189,-215,190,-215,191,-215,192,-215,193,-215,194,-215,195,-215},new int[]{-77,10}));
    AddState(123,new State(-213));
    AddState(124,new State(-216));
    AddState(125,new State(-217));
    AddState(126,new State(-218));
    AddState(127,new State(-206));
    AddState(128,new State(-214));
    AddState(129,new State(new int[]{174,130,173,133},new int[]{-42,141}));
    AddState(130,new State(new int[]{128,36,152,37,144,38,145,39,150,40,148,41,149,42,167,43,184,44,181,58,132,94,133,95,175,98,131,93,40,83,129,118,130,119,33,124,45,125,43,126,173,133},new int[]{-4,131,-57,25,-58,26,-78,27,-71,90,-70,57,-53,91,-56,96,-66,97,-60,123,-55,81,-54,115,-72,116,-73,117,-74,120,-76,121,-75,127,-44,128,-43,129,-42,132}));
    AddState(131,new State(new int[]{43,12,45,13,42,14,47,15,203,16,204,17,38,18,198,19,199,20,200,21,201,22,196,23,197,24,142,-103,140,-103,139,-103,127,-103,126,-103,41,-103,44,-103,125,-103,174,-103,173,-103,146,-103,147,-103,141,-103,153,-103,59,-103,170,-103,165,-103,166,-103,167,-103,168,-103,171,-103,172,-103,185,-103,186,-103,187,-103,188,-103,189,-103,190,-103,191,-103,192,-103,193,-103,194,-103,195,-103},new int[]{-77,10}));
    AddState(132,new State(-101));
    AddState(133,new State(new int[]{126,137,132,140},new int[]{-41,134}));
    AddState(134,new State(new int[]{196,135}));
    AddState(135,new State(new int[]{128,36,152,37,144,38,145,39,150,40,148,41,149,42,167,43,184,44,181,58,132,94,133,95,175,98,131,93,40,83,129,118,130,119,33,124,45,125,43,126,173,133},new int[]{-4,136,-57,25,-58,26,-78,27,-71,90,-70,57,-53,91,-56,96,-66,97,-60,123,-55,81,-54,115,-72,116,-73,117,-74,120,-76,121,-75,127,-44,128,-43,129,-42,132}));
    AddState(136,new State(new int[]{43,12,45,13,42,14,47,15,203,16,204,17,38,18,198,19,199,20,200,21,201,22,196,23,197,24,174,-99,173,-99},new int[]{-77,10}));
    AddState(137,new State(new int[]{196,138}));
    AddState(138,new State(new int[]{128,36,152,37,144,38,145,39,150,40,148,41,149,42,167,43,184,44,181,58,132,94,133,95,175,98,131,93,40,83,129,118,130,119,33,124,45,125,43,126,173,133},new int[]{-4,139,-57,25,-58,26,-78,27,-71,90,-70,57,-53,91,-56,96,-66,97,-60,123,-55,81,-54,115,-72,116,-73,117,-74,120,-76,121,-75,127,-44,128,-43,129,-42,132}));
    AddState(139,new State(new int[]{43,12,45,13,42,14,47,15,203,16,204,17,38,18,198,19,199,20,200,21,201,22,196,23,197,24,174,-100,173,-100},new int[]{-77,10}));
    AddState(140,new State(-98));
    AddState(141,new State(-102));
    AddState(142,new State(new int[]{43,12,45,13,42,14,47,15,203,16,204,17,38,18,198,19,199,20,200,21,201,22,196,23,197,24},new int[]{-77,10}));
    AddState(143,new State(-166));
    AddState(144,new State(-178));
    AddState(145,new State(new int[]{44,146}));
    AddState(146,new State(new int[]{176,148,160,149,177,150,178,151,179,152,180,153},new int[]{-63,147}));
    AddState(147,new State(-176));
    AddState(148,new State(-170));
    AddState(149,new State(-171));
    AddState(150,new State(-172));
    AddState(151,new State(-173));
    AddState(152,new State(-174));
    AddState(153,new State(-175));
    AddState(154,new State(-177));
    AddState(155,new State(-161));
    AddState(156,new State(-162));
    AddState(157,new State(-253));
    AddState(158,new State(new int[]{41,157},new int[]{-52,159}));
    AddState(159,new State(-151));
    AddState(160,new State(new int[]{143,161}));
    AddState(161,new State(new int[]{128,36,152,37,144,38,145,39,150,40,148,41,149,42,167,43,184,44,181,58,132,94,133,95,175,98,131,93,40,83,129,118,130,119,33,124,45,125,43,126,173,133},new int[]{-8,162,-4,163,-57,25,-58,26,-78,27,-71,90,-70,57,-53,91,-56,96,-66,97,-60,123,-55,81,-54,115,-72,116,-73,117,-74,120,-76,121,-75,127,-44,128,-43,129,-42,132}));
    AddState(162,new State(-12));
    AddState(163,new State(new int[]{44,167,146,169,147,170,43,12,45,13,42,14,47,15,203,16,204,17,38,18,198,19,199,20,200,21,201,22,196,23,197,24,140,-11,139,-11,127,-11},new int[]{-7,164,-77,10}));
    AddState(164,new State(new int[]{44,165,140,-10,139,-10,127,-10}));
    AddState(165,new State(new int[]{128,36,152,37,144,38,145,39,150,40,148,41,149,42,167,43,184,44,181,58,132,94,133,95,175,98,131,93,40,83,129,118,130,119,33,124,45,125,43,126,173,133},new int[]{-8,166,-4,163,-57,25,-58,26,-78,27,-71,90,-70,57,-53,91,-56,96,-66,97,-60,123,-55,81,-54,115,-72,116,-73,117,-74,120,-76,121,-75,127,-44,128,-43,129,-42,132}));
    AddState(166,new State(-8));
    AddState(167,new State(new int[]{128,36,152,37,144,38,145,39,150,40,148,41,149,42,167,43,184,44,181,58,132,94,133,95,175,98,131,93,40,83,129,118,130,119,33,124,45,125,43,126,173,133},new int[]{-8,168,-4,163,-57,25,-58,26,-78,27,-71,90,-70,57,-53,91,-56,96,-66,97,-60,123,-55,81,-54,115,-72,116,-73,117,-74,120,-76,121,-75,127,-44,128,-43,129,-42,132}));
    AddState(168,new State(-9));
    AddState(169,new State(-6));
    AddState(170,new State(-7));
    AddState(171,new State(new int[]{132,94,133,95,128,179,175,98},new int[]{-46,172,-53,177,-56,96,-66,97}));
    AddState(172,new State(new int[]{196,173}));
    AddState(173,new State(new int[]{128,36,152,37,144,38,145,39,150,40,148,41,149,42,167,43,184,44,181,58,132,94,133,95,175,98,131,93,40,83,129,118,130,119,33,124,45,125,43,126,173,133},new int[]{-47,174,-4,176,-57,25,-58,26,-78,27,-71,90,-70,57,-53,91,-56,96,-66,97,-60,123,-55,81,-54,115,-72,116,-73,117,-74,120,-76,121,-75,127,-44,128,-43,129,-42,132}));
    AddState(174,new State(new int[]{141,171,139,-143},new int[]{-11,175}));
    AddState(175,new State(-144));
    AddState(176,new State(new int[]{43,12,45,13,42,14,47,15,203,16,204,17,38,18,198,19,199,20,200,21,201,22,196,23,197,24,141,-198,139,-198},new int[]{-77,10}));
    AddState(177,new State(new int[]{131,93},new int[]{-54,178}));
    AddState(178,new State(-153));
    AddState(179,new State(-159));
    AddState(180,new State(new int[]{128,36,152,37,144,38,145,39,150,40,148,41,149,42,167,43,184,44,181,58,132,94,133,95,175,98,131,93,40,83,129,118,130,119,33,124,45,125,43,126,173,133},new int[]{-4,181,-57,25,-58,26,-78,27,-71,90,-70,57,-53,91,-56,96,-66,97,-60,123,-55,81,-54,115,-72,116,-73,117,-74,120,-76,121,-75,127,-44,128,-43,129,-42,132}));
    AddState(181,new State(new int[]{142,160,43,12,45,13,42,14,47,15,203,16,204,17,38,18,198,19,199,20,200,21,201,22,196,23,197,24,140,-18,139,-18,127,-18},new int[]{-9,182,-77,10}));
    AddState(182,new State(-17));
    AddState(183,new State(-13));
    AddState(184,new State(new int[]{128,36,152,37,144,38,145,39,150,40,148,41,149,42,167,43,184,44,181,58,132,94,133,95,175,98,131,93,40,83,129,118,130,119,33,124,45,125,43,126,173,133},new int[]{-4,185,-57,25,-58,26,-78,27,-71,90,-70,57,-53,91,-56,96,-66,97,-60,123,-55,81,-54,115,-72,116,-73,117,-74,120,-76,121,-75,127,-44,128,-43,129,-42,132}));
    AddState(185,new State(new int[]{43,12,45,13,42,14,47,15,203,16,204,17,38,18,198,19,199,20,200,21,201,22,196,23,197,24,127,-3},new int[]{-77,10}));
    AddState(186,new State(-4));
    AddState(187,new State(new int[]{59,188,127,-19}));
    AddState(188,new State(new int[]{151,190,152,353,137,357,127,-20},new int[]{-5,189,-12,187,-13,344,-14,347,-15,350,-16,354}));
    AddState(189,new State(-21));
    AddState(190,new State(new int[]{141,191,169,342,136,343}));
    AddState(191,new State(new int[]{126,329,132,340,131,341,133,95,128,179,175,98},new int[]{-17,192,-18,336,-53,327,-56,96,-66,97}));
    AddState(192,new State(new int[]{46,193}));
    AddState(193,new State(new int[]{132,94,133,95,128,179,175,98},new int[]{-18,194,-53,327,-56,96,-66,97}));
    AddState(194,new State(new int[]{196,195}));
    AddState(195,new State(new int[]{128,36,152,37,144,38,145,39,150,40,148,41,149,42,167,43,184,44,181,58,132,94,133,95,175,98,131,93,40,83,129,118,130,119,33,124,45,125,43,126,173,133},new int[]{-19,196,-4,326,-57,25,-58,26,-78,27,-71,90,-70,57,-53,91,-56,96,-66,97,-60,123,-55,81,-54,115,-72,116,-73,117,-74,120,-76,121,-75,127,-44,128,-43,129,-42,132}));
    AddState(196,new State(new int[]{153,198,59,-37,127,-37},new int[]{-20,197}));
    AddState(197,new State(-38));
    AddState(198,new State(new int[]{154,199}));
    AddState(199,new State(new int[]{126,315,155,316,156,317,157,318,158,319,159,320,160,321,161,322,162,323,163,324,164,325},new int[]{-21,200}));
    AddState(200,new State(new int[]{170,204,165,212,166,219,167,227,168,232,171,237,172,245,185,251,186,257,187,263,188,269,189,275,190,281,191,287,192,293,193,299,194,305,195,311,59,-140,127,-140},new int[]{-45,201,-23,202,-22,210,-27,217,-28,225,-29,230,-25,235,-26,243,-30,249,-31,255,-32,261,-33,267,-34,273,-35,279,-36,285,-37,291,-38,297,-39,303,-40,309}));
    AddState(201,new State(-142));
    AddState(202,new State(new int[]{170,204,165,212,166,219,167,227,168,232,171,237,172,245,185,251,186,257,187,263,188,269,189,275,190,281,191,287,192,293,193,299,194,305,195,311,59,-104,127,-104},new int[]{-45,203,-23,202,-22,210,-27,217,-28,225,-29,230,-25,235,-26,243,-30,249,-31,255,-32,261,-33,267,-34,273,-35,279,-36,285,-37,291,-38,297,-39,303,-40,309}));
    AddState(203,new State(-105));
    AddState(204,new State(new int[]{196,205,126,209}));
    AddState(205,new State(new int[]{144,206,145,207,126,208}));
    AddState(206,new State(-60));
    AddState(207,new State(-61));
    AddState(208,new State(-63));
    AddState(209,new State(-62));
    AddState(210,new State(new int[]{170,204,165,212,166,219,167,227,168,232,171,237,172,245,185,251,186,257,187,263,188,269,189,275,190,281,191,287,192,293,193,299,194,305,195,311,59,-106,127,-106},new int[]{-45,211,-23,202,-22,210,-27,217,-28,225,-29,230,-25,235,-26,243,-30,249,-31,255,-32,261,-33,267,-34,273,-35,279,-36,285,-37,291,-38,297,-39,303,-40,309}));
    AddState(211,new State(-107));
    AddState(212,new State(new int[]{196,213,126,216}));
    AddState(213,new State(new int[]{129,214,126,215}));
    AddState(214,new State(-57));
    AddState(215,new State(-59));
    AddState(216,new State(-58));
    AddState(217,new State(new int[]{170,204,165,212,166,219,167,227,168,232,171,237,172,245,185,251,186,257,187,263,188,269,189,275,190,281,191,287,192,293,193,299,194,305,195,311,59,-108,127,-108},new int[]{-45,218,-23,202,-22,210,-27,217,-28,225,-29,230,-25,235,-26,243,-30,249,-31,255,-32,261,-33,267,-34,273,-35,279,-36,285,-37,291,-38,297,-39,303,-40,309}));
    AddState(218,new State(-109));
    AddState(219,new State(new int[]{196,220,126,224}));
    AddState(220,new State(new int[]{144,221,145,222,126,223}));
    AddState(221,new State(-70));
    AddState(222,new State(-71));
    AddState(223,new State(-73));
    AddState(224,new State(-72));
    AddState(225,new State(new int[]{170,204,165,212,166,219,167,227,168,232,171,237,172,245,185,251,186,257,187,263,188,269,189,275,190,281,191,287,192,293,193,299,194,305,195,311,59,-110,127,-110},new int[]{-45,226,-23,202,-22,210,-27,217,-28,225,-29,230,-25,235,-26,243,-30,249,-31,255,-32,261,-33,267,-34,273,-35,279,-36,285,-37,291,-38,297,-39,303,-40,309}));
    AddState(226,new State(-111));
    AddState(227,new State(new int[]{196,228}));
    AddState(228,new State(new int[]{133,229}));
    AddState(229,new State(-74));
    AddState(230,new State(new int[]{170,204,165,212,166,219,167,227,168,232,171,237,172,245,185,251,186,257,187,263,188,269,189,275,190,281,191,287,192,293,193,299,194,305,195,311,59,-112,127,-112},new int[]{-45,231,-23,202,-22,210,-27,217,-28,225,-29,230,-25,235,-26,243,-30,249,-31,255,-32,261,-33,267,-34,273,-35,279,-36,285,-37,291,-38,297,-39,303,-40,309}));
    AddState(231,new State(-113));
    AddState(232,new State(new int[]{196,233}));
    AddState(233,new State(new int[]{133,234}));
    AddState(234,new State(-75));
    AddState(235,new State(new int[]{170,204,165,212,166,219,167,227,168,232,171,237,172,245,185,251,186,257,187,263,188,269,189,275,190,281,191,287,192,293,193,299,194,305,195,311,59,-114,127,-114},new int[]{-45,236,-23,202,-22,210,-27,217,-28,225,-29,230,-25,235,-26,243,-30,249,-31,255,-32,261,-33,267,-34,273,-35,279,-36,285,-37,291,-38,297,-39,303,-40,309}));
    AddState(236,new State(-115));
    AddState(237,new State(new int[]{196,238,126,242}));
    AddState(238,new State(new int[]{133,240,130,241},new int[]{-24,239}));
    AddState(239,new State(-66));
    AddState(240,new State(-64));
    AddState(241,new State(-65));
    AddState(242,new State(-67));
    AddState(243,new State(new int[]{170,204,165,212,166,219,167,227,168,232,171,237,172,245,185,251,186,257,187,263,188,269,189,275,190,281,191,287,192,293,193,299,194,305,195,311,59,-116,127,-116},new int[]{-45,244,-23,202,-22,210,-27,217,-28,225,-29,230,-25,235,-26,243,-30,249,-31,255,-32,261,-33,267,-34,273,-35,279,-36,285,-37,291,-38,297,-39,303,-40,309}));
    AddState(244,new State(-117));
    AddState(245,new State(new int[]{196,246,126,248}));
    AddState(246,new State(new int[]{133,247}));
    AddState(247,new State(-68));
    AddState(248,new State(-69));
    AddState(249,new State(new int[]{170,204,165,212,166,219,167,227,168,232,171,237,172,245,185,251,186,257,187,263,188,269,189,275,190,281,191,287,192,293,193,299,194,305,195,311,59,-118,127,-118},new int[]{-45,250,-23,202,-22,210,-27,217,-28,225,-29,230,-25,235,-26,243,-30,249,-31,255,-32,261,-33,267,-34,273,-35,279,-36,285,-37,291,-38,297,-39,303,-40,309}));
    AddState(250,new State(-119));
    AddState(251,new State(new int[]{196,252,126,254}));
    AddState(252,new State(new int[]{133,240,130,241},new int[]{-24,253}));
    AddState(253,new State(-76));
    AddState(254,new State(-77));
    AddState(255,new State(new int[]{170,204,165,212,166,219,167,227,168,232,171,237,172,245,185,251,186,257,187,263,188,269,189,275,190,281,191,287,192,293,193,299,194,305,195,311,59,-120,127,-120},new int[]{-45,256,-23,202,-22,210,-27,217,-28,225,-29,230,-25,235,-26,243,-30,249,-31,255,-32,261,-33,267,-34,273,-35,279,-36,285,-37,291,-38,297,-39,303,-40,309}));
    AddState(256,new State(-121));
    AddState(257,new State(new int[]{196,258,126,260}));
    AddState(258,new State(new int[]{133,240,130,241},new int[]{-24,259}));
    AddState(259,new State(-78));
    AddState(260,new State(-79));
    AddState(261,new State(new int[]{170,204,165,212,166,219,167,227,168,232,171,237,172,245,185,251,186,257,187,263,188,269,189,275,190,281,191,287,192,293,193,299,194,305,195,311,59,-122,127,-122},new int[]{-45,262,-23,202,-22,210,-27,217,-28,225,-29,230,-25,235,-26,243,-30,249,-31,255,-32,261,-33,267,-34,273,-35,279,-36,285,-37,291,-38,297,-39,303,-40,309}));
    AddState(262,new State(-123));
    AddState(263,new State(new int[]{196,264,126,266}));
    AddState(264,new State(new int[]{133,240,130,241},new int[]{-24,265}));
    AddState(265,new State(-80));
    AddState(266,new State(-81));
    AddState(267,new State(new int[]{170,204,165,212,166,219,167,227,168,232,171,237,172,245,185,251,186,257,187,263,188,269,189,275,190,281,191,287,192,293,193,299,194,305,195,311,59,-124,127,-124},new int[]{-45,268,-23,202,-22,210,-27,217,-28,225,-29,230,-25,235,-26,243,-30,249,-31,255,-32,261,-33,267,-34,273,-35,279,-36,285,-37,291,-38,297,-39,303,-40,309}));
    AddState(268,new State(-125));
    AddState(269,new State(new int[]{196,270,126,272}));
    AddState(270,new State(new int[]{128,36,152,37,144,38,145,39,150,40,148,41,149,42,167,43,184,44,181,58,132,94,133,95,175,98,131,93,40,83,129,118,130,119,33,124,45,125,43,126,173,133},new int[]{-4,271,-57,25,-58,26,-78,27,-71,90,-70,57,-53,91,-56,96,-66,97,-60,123,-55,81,-54,115,-72,116,-73,117,-74,120,-76,121,-75,127,-44,128,-43,129,-42,132}));
    AddState(271,new State(new int[]{43,12,45,13,42,14,47,15,203,16,204,17,38,18,198,19,199,20,200,21,201,22,196,23,197,24,170,-82,165,-82,166,-82,167,-82,168,-82,171,-82,172,-82,185,-82,186,-82,187,-82,188,-82,189,-82,190,-82,191,-82,192,-82,193,-82,194,-82,195,-82,59,-82,127,-82},new int[]{-77,10}));
    AddState(272,new State(-83));
    AddState(273,new State(new int[]{170,204,165,212,166,219,167,227,168,232,171,237,172,245,185,251,186,257,187,263,188,269,189,275,190,281,191,287,192,293,193,299,194,305,195,311,59,-126,127,-126},new int[]{-45,274,-23,202,-22,210,-27,217,-28,225,-29,230,-25,235,-26,243,-30,249,-31,255,-32,261,-33,267,-34,273,-35,279,-36,285,-37,291,-38,297,-39,303,-40,309}));
    AddState(274,new State(-127));
    AddState(275,new State(new int[]{196,276,126,278}));
    AddState(276,new State(new int[]{133,240,130,241},new int[]{-24,277}));
    AddState(277,new State(-84));
    AddState(278,new State(-85));
    AddState(279,new State(new int[]{170,204,165,212,166,219,167,227,168,232,171,237,172,245,185,251,186,257,187,263,188,269,189,275,190,281,191,287,192,293,193,299,194,305,195,311,59,-128,127,-128},new int[]{-45,280,-23,202,-22,210,-27,217,-28,225,-29,230,-25,235,-26,243,-30,249,-31,255,-32,261,-33,267,-34,273,-35,279,-36,285,-37,291,-38,297,-39,303,-40,309}));
    AddState(280,new State(-129));
    AddState(281,new State(new int[]{196,282,126,284}));
    AddState(282,new State(new int[]{133,240,130,241},new int[]{-24,283}));
    AddState(283,new State(-86));
    AddState(284,new State(-87));
    AddState(285,new State(new int[]{170,204,165,212,166,219,167,227,168,232,171,237,172,245,185,251,186,257,187,263,188,269,189,275,190,281,191,287,192,293,193,299,194,305,195,311,59,-130,127,-130},new int[]{-45,286,-23,202,-22,210,-27,217,-28,225,-29,230,-25,235,-26,243,-30,249,-31,255,-32,261,-33,267,-34,273,-35,279,-36,285,-37,291,-38,297,-39,303,-40,309}));
    AddState(286,new State(-131));
    AddState(287,new State(new int[]{196,288,126,290}));
    AddState(288,new State(new int[]{128,36,152,37,144,38,145,39,150,40,148,41,149,42,167,43,184,44,181,58,132,94,133,95,175,98,131,93,40,83,129,118,130,119,33,124,45,125,43,126,173,133},new int[]{-4,289,-57,25,-58,26,-78,27,-71,90,-70,57,-53,91,-56,96,-66,97,-60,123,-55,81,-54,115,-72,116,-73,117,-74,120,-76,121,-75,127,-44,128,-43,129,-42,132}));
    AddState(289,new State(new int[]{43,12,45,13,42,14,47,15,203,16,204,17,38,18,198,19,199,20,200,21,201,22,196,23,197,24,170,-88,165,-88,166,-88,167,-88,168,-88,171,-88,172,-88,185,-88,186,-88,187,-88,188,-88,189,-88,190,-88,191,-88,192,-88,193,-88,194,-88,195,-88,59,-88,127,-88},new int[]{-77,10}));
    AddState(290,new State(-89));
    AddState(291,new State(new int[]{170,204,165,212,166,219,167,227,168,232,171,237,172,245,185,251,186,257,187,263,188,269,189,275,190,281,191,287,192,293,193,299,194,305,195,311,59,-132,127,-132},new int[]{-45,292,-23,202,-22,210,-27,217,-28,225,-29,230,-25,235,-26,243,-30,249,-31,255,-32,261,-33,267,-34,273,-35,279,-36,285,-37,291,-38,297,-39,303,-40,309}));
    AddState(292,new State(-133));
    AddState(293,new State(new int[]{196,294,126,296}));
    AddState(294,new State(new int[]{133,240,130,241},new int[]{-24,295}));
    AddState(295,new State(-90));
    AddState(296,new State(-91));
    AddState(297,new State(new int[]{170,204,165,212,166,219,167,227,168,232,171,237,172,245,185,251,186,257,187,263,188,269,189,275,190,281,191,287,192,293,193,299,194,305,195,311,59,-134,127,-134},new int[]{-45,298,-23,202,-22,210,-27,217,-28,225,-29,230,-25,235,-26,243,-30,249,-31,255,-32,261,-33,267,-34,273,-35,279,-36,285,-37,291,-38,297,-39,303,-40,309}));
    AddState(298,new State(-135));
    AddState(299,new State(new int[]{196,300,126,302}));
    AddState(300,new State(new int[]{133,240,130,241},new int[]{-24,301}));
    AddState(301,new State(-92));
    AddState(302,new State(-93));
    AddState(303,new State(new int[]{170,204,165,212,166,219,167,227,168,232,171,237,172,245,185,251,186,257,187,263,188,269,189,275,190,281,191,287,192,293,193,299,194,305,195,311,59,-136,127,-136},new int[]{-45,304,-23,202,-22,210,-27,217,-28,225,-29,230,-25,235,-26,243,-30,249,-31,255,-32,261,-33,267,-34,273,-35,279,-36,285,-37,291,-38,297,-39,303,-40,309}));
    AddState(304,new State(-137));
    AddState(305,new State(new int[]{196,306,126,308}));
    AddState(306,new State(new int[]{128,36,152,37,144,38,145,39,150,40,148,41,149,42,167,43,184,44,181,58,132,94,133,95,175,98,131,93,40,83,129,118,130,119,33,124,45,125,43,126,173,133},new int[]{-4,307,-57,25,-58,26,-78,27,-71,90,-70,57,-53,91,-56,96,-66,97,-60,123,-55,81,-54,115,-72,116,-73,117,-74,120,-76,121,-75,127,-44,128,-43,129,-42,132}));
    AddState(307,new State(new int[]{43,12,45,13,42,14,47,15,203,16,204,17,38,18,198,19,199,20,200,21,201,22,196,23,197,24,170,-94,165,-94,166,-94,167,-94,168,-94,171,-94,172,-94,185,-94,186,-94,187,-94,188,-94,189,-94,190,-94,191,-94,192,-94,193,-94,194,-94,195,-94,59,-94,127,-94},new int[]{-77,10}));
    AddState(308,new State(-95));
    AddState(309,new State(new int[]{170,204,165,212,166,219,167,227,168,232,171,237,172,245,185,251,186,257,187,263,188,269,189,275,190,281,191,287,192,293,193,299,194,305,195,311,59,-138,127,-138},new int[]{-45,310,-23,202,-22,210,-27,217,-28,225,-29,230,-25,235,-26,243,-30,249,-31,255,-32,261,-33,267,-34,273,-35,279,-36,285,-37,291,-38,297,-39,303,-40,309}));
    AddState(310,new State(-139));
    AddState(311,new State(new int[]{196,312,126,314}));
    AddState(312,new State(new int[]{133,313}));
    AddState(313,new State(-96));
    AddState(314,new State(-97));
    AddState(315,new State(-141));
    AddState(316,new State(-47));
    AddState(317,new State(-48));
    AddState(318,new State(-49));
    AddState(319,new State(-50));
    AddState(320,new State(-51));
    AddState(321,new State(-52));
    AddState(322,new State(-53));
    AddState(323,new State(-54));
    AddState(324,new State(-55));
    AddState(325,new State(-56));
    AddState(326,new State(new int[]{43,12,45,13,42,14,47,15,203,16,204,17,38,18,198,19,199,20,200,21,201,22,196,23,197,24,153,-197,59,-197,127,-197},new int[]{-77,10}));
    AddState(327,new State(new int[]{131,93},new int[]{-54,328}));
    AddState(328,new State(-152));
    AddState(329,new State(new int[]{46,330,196,334}));
    AddState(330,new State(new int[]{132,94,133,95,128,179,175,98},new int[]{-18,331,-53,327,-56,96,-66,97}));
    AddState(331,new State(new int[]{196,332}));
    AddState(332,new State(new int[]{128,36,152,37,144,38,145,39,150,40,148,41,149,42,167,43,184,44,181,58,132,94,133,95,175,98,131,93,40,83,129,118,130,119,33,124,45,125,43,126,173,133},new int[]{-19,333,-4,326,-57,25,-58,26,-78,27,-71,90,-70,57,-53,91,-56,96,-66,97,-60,123,-55,81,-54,115,-72,116,-73,117,-74,120,-76,121,-75,127,-44,128,-43,129,-42,132}));
    AddState(333,new State(-39));
    AddState(334,new State(new int[]{128,36,152,37,144,38,145,39,150,40,148,41,149,42,167,43,184,44,181,58,132,94,133,95,175,98,131,93,40,83,129,118,130,119,33,124,45,125,43,126,173,133},new int[]{-19,335,-4,326,-57,25,-58,26,-78,27,-71,90,-70,57,-53,91,-56,96,-66,97,-60,123,-55,81,-54,115,-72,116,-73,117,-74,120,-76,121,-75,127,-44,128,-43,129,-42,132}));
    AddState(335,new State(-42));
    AddState(336,new State(new int[]{196,337}));
    AddState(337,new State(new int[]{128,36,152,37,144,38,145,39,150,40,148,41,149,42,167,43,184,44,181,58,132,94,133,95,175,98,131,93,40,83,129,118,130,119,33,124,45,125,43,126,173,133},new int[]{-19,338,-4,326,-57,25,-58,26,-78,27,-71,90,-70,57,-53,91,-56,96,-66,97,-60,123,-55,81,-54,115,-72,116,-73,117,-74,120,-76,121,-75,127,-44,128,-43,129,-42,132}));
    AddState(338,new State(new int[]{153,198,59,-40,127,-40},new int[]{-20,339}));
    AddState(339,new State(-41));
    AddState(340,new State(new int[]{46,-35,131,-157}));
    AddState(341,new State(-36));
    AddState(342,new State(-43));
    AddState(343,new State(-44));
    AddState(344,new State(new int[]{59,345,127,-22}));
    AddState(345,new State(new int[]{151,190,152,353,137,357,127,-23},new int[]{-5,346,-12,187,-13,344,-14,347,-15,350,-16,354}));
    AddState(346,new State(-24));
    AddState(347,new State(new int[]{59,348,127,-25}));
    AddState(348,new State(new int[]{151,190,152,353,137,357,127,-26},new int[]{-5,349,-12,187,-13,344,-14,347,-15,350,-16,354}));
    AddState(349,new State(-27));
    AddState(350,new State(new int[]{59,351,127,-28}));
    AddState(351,new State(new int[]{151,190,152,353,137,357,127,-29},new int[]{-5,352,-12,187,-13,344,-14,347,-15,350,-16,354}));
    AddState(352,new State(-30));
    AddState(353,new State(-45));
    AddState(354,new State(new int[]{59,355,127,-31}));
    AddState(355,new State(new int[]{151,190,152,353,137,357,127,-32},new int[]{-5,356,-12,187,-13,344,-14,347,-15,350,-16,354}));
    AddState(356,new State(-33));
    AddState(357,new State(-46));
    AddState(358,new State(-5));
    AddState(359,new State(-34));

    rules=new Rule[254];
    rules[1]=new Rule(-2, new int[]{-1,127});
    rules[2]=new Rule(-1, new int[]{-3});
    rules[3]=new Rule(-1, new int[]{196,-4});
    rules[4]=new Rule(-1, new int[]{-5});
    rules[5]=new Rule(-1, new int[]{-6});
    rules[6]=new Rule(-7, new int[]{146});
    rules[7]=new Rule(-7, new int[]{147});
    rules[8]=new Rule(-8, new int[]{-4,-7,44,-8});
    rules[9]=new Rule(-8, new int[]{-4,44,-8});
    rules[10]=new Rule(-8, new int[]{-4,-7});
    rules[11]=new Rule(-8, new int[]{-4});
    rules[12]=new Rule(-9, new int[]{142,143,-8});
    rules[13]=new Rule(-3, new int[]{-10});
    rules[14]=new Rule(-3, new int[]{-3,-10});
    rules[15]=new Rule(-10, new int[]{140,-11,139,-4,-9});
    rules[16]=new Rule(-10, new int[]{140,-11,139,-4});
    rules[17]=new Rule(-10, new int[]{139,-4,-9});
    rules[18]=new Rule(-10, new int[]{139,-4});
    rules[19]=new Rule(-5, new int[]{-12});
    rules[20]=new Rule(-5, new int[]{-12,59});
    rules[21]=new Rule(-5, new int[]{-12,59,-5});
    rules[22]=new Rule(-5, new int[]{-13});
    rules[23]=new Rule(-5, new int[]{-13,59});
    rules[24]=new Rule(-5, new int[]{-13,59,-5});
    rules[25]=new Rule(-5, new int[]{-14});
    rules[26]=new Rule(-5, new int[]{-14,59});
    rules[27]=new Rule(-5, new int[]{-14,59,-5});
    rules[28]=new Rule(-5, new int[]{-15});
    rules[29]=new Rule(-5, new int[]{-15,59});
    rules[30]=new Rule(-5, new int[]{-15,59,-5});
    rules[31]=new Rule(-5, new int[]{-16});
    rules[32]=new Rule(-5, new int[]{-16,59});
    rules[33]=new Rule(-5, new int[]{-16,59,-5});
    rules[34]=new Rule(-6, new int[]{127});
    rules[35]=new Rule(-17, new int[]{132});
    rules[36]=new Rule(-17, new int[]{131});
    rules[37]=new Rule(-12, new int[]{151,141,-17,46,-18,196,-19});
    rules[38]=new Rule(-12, new int[]{151,141,-17,46,-18,196,-19,-20});
    rules[39]=new Rule(-12, new int[]{151,141,126,46,-18,196,-19});
    rules[40]=new Rule(-12, new int[]{151,141,-18,196,-19});
    rules[41]=new Rule(-12, new int[]{151,141,-18,196,-19,-20});
    rules[42]=new Rule(-12, new int[]{151,141,126,196,-19});
    rules[43]=new Rule(-13, new int[]{151,169});
    rules[44]=new Rule(-14, new int[]{151,136});
    rules[45]=new Rule(-15, new int[]{152});
    rules[46]=new Rule(-16, new int[]{137});
    rules[47]=new Rule(-21, new int[]{155});
    rules[48]=new Rule(-21, new int[]{156});
    rules[49]=new Rule(-21, new int[]{157});
    rules[50]=new Rule(-21, new int[]{158});
    rules[51]=new Rule(-21, new int[]{159});
    rules[52]=new Rule(-21, new int[]{160});
    rules[53]=new Rule(-21, new int[]{161});
    rules[54]=new Rule(-21, new int[]{162});
    rules[55]=new Rule(-21, new int[]{163});
    rules[56]=new Rule(-21, new int[]{164});
    rules[57]=new Rule(-22, new int[]{165,196,129});
    rules[58]=new Rule(-22, new int[]{165,126});
    rules[59]=new Rule(-22, new int[]{165,196,126});
    rules[60]=new Rule(-23, new int[]{170,196,144});
    rules[61]=new Rule(-23, new int[]{170,196,145});
    rules[62]=new Rule(-23, new int[]{170,126});
    rules[63]=new Rule(-23, new int[]{170,196,126});
    rules[64]=new Rule(-24, new int[]{133});
    rules[65]=new Rule(-24, new int[]{130});
    rules[66]=new Rule(-25, new int[]{171,196,-24});
    rules[67]=new Rule(-25, new int[]{171,126});
    rules[68]=new Rule(-26, new int[]{172,196,133});
    rules[69]=new Rule(-26, new int[]{172,126});
    rules[70]=new Rule(-27, new int[]{166,196,144});
    rules[71]=new Rule(-27, new int[]{166,196,145});
    rules[72]=new Rule(-27, new int[]{166,126});
    rules[73]=new Rule(-27, new int[]{166,196,126});
    rules[74]=new Rule(-28, new int[]{167,196,133});
    rules[75]=new Rule(-29, new int[]{168,196,133});
    rules[76]=new Rule(-30, new int[]{185,196,-24});
    rules[77]=new Rule(-30, new int[]{185,126});
    rules[78]=new Rule(-31, new int[]{186,196,-24});
    rules[79]=new Rule(-31, new int[]{186,126});
    rules[80]=new Rule(-32, new int[]{187,196,-24});
    rules[81]=new Rule(-32, new int[]{187,126});
    rules[82]=new Rule(-33, new int[]{188,196,-4});
    rules[83]=new Rule(-33, new int[]{188,126});
    rules[84]=new Rule(-34, new int[]{189,196,-24});
    rules[85]=new Rule(-34, new int[]{189,126});
    rules[86]=new Rule(-35, new int[]{190,196,-24});
    rules[87]=new Rule(-35, new int[]{190,126});
    rules[88]=new Rule(-36, new int[]{191,196,-4});
    rules[89]=new Rule(-36, new int[]{191,126});
    rules[90]=new Rule(-37, new int[]{192,196,-24});
    rules[91]=new Rule(-37, new int[]{192,126});
    rules[92]=new Rule(-38, new int[]{193,196,-24});
    rules[93]=new Rule(-38, new int[]{193,126});
    rules[94]=new Rule(-39, new int[]{194,196,-4});
    rules[95]=new Rule(-39, new int[]{194,126});
    rules[96]=new Rule(-40, new int[]{195,196,133});
    rules[97]=new Rule(-40, new int[]{195,126});
    rules[98]=new Rule(-41, new int[]{132});
    rules[99]=new Rule(-42, new int[]{173,-41,196,-4});
    rules[100]=new Rule(-42, new int[]{173,126,196,-4});
    rules[101]=new Rule(-43, new int[]{-42});
    rules[102]=new Rule(-43, new int[]{-43,-42});
    rules[103]=new Rule(-44, new int[]{-43,174,-4});
    rules[104]=new Rule(-45, new int[]{-23});
    rules[105]=new Rule(-45, new int[]{-23,-45});
    rules[106]=new Rule(-45, new int[]{-22});
    rules[107]=new Rule(-45, new int[]{-22,-45});
    rules[108]=new Rule(-45, new int[]{-27});
    rules[109]=new Rule(-45, new int[]{-27,-45});
    rules[110]=new Rule(-45, new int[]{-28});
    rules[111]=new Rule(-45, new int[]{-28,-45});
    rules[112]=new Rule(-45, new int[]{-29});
    rules[113]=new Rule(-45, new int[]{-29,-45});
    rules[114]=new Rule(-45, new int[]{-25});
    rules[115]=new Rule(-45, new int[]{-25,-45});
    rules[116]=new Rule(-45, new int[]{-26});
    rules[117]=new Rule(-45, new int[]{-26,-45});
    rules[118]=new Rule(-45, new int[]{-30});
    rules[119]=new Rule(-45, new int[]{-30,-45});
    rules[120]=new Rule(-45, new int[]{-31});
    rules[121]=new Rule(-45, new int[]{-31,-45});
    rules[122]=new Rule(-45, new int[]{-32});
    rules[123]=new Rule(-45, new int[]{-32,-45});
    rules[124]=new Rule(-45, new int[]{-33});
    rules[125]=new Rule(-45, new int[]{-33,-45});
    rules[126]=new Rule(-45, new int[]{-34});
    rules[127]=new Rule(-45, new int[]{-34,-45});
    rules[128]=new Rule(-45, new int[]{-35});
    rules[129]=new Rule(-45, new int[]{-35,-45});
    rules[130]=new Rule(-45, new int[]{-36});
    rules[131]=new Rule(-45, new int[]{-36,-45});
    rules[132]=new Rule(-45, new int[]{-37});
    rules[133]=new Rule(-45, new int[]{-37,-45});
    rules[134]=new Rule(-45, new int[]{-38});
    rules[135]=new Rule(-45, new int[]{-38,-45});
    rules[136]=new Rule(-45, new int[]{-39});
    rules[137]=new Rule(-45, new int[]{-39,-45});
    rules[138]=new Rule(-45, new int[]{-40});
    rules[139]=new Rule(-45, new int[]{-40,-45});
    rules[140]=new Rule(-20, new int[]{153,154,-21});
    rules[141]=new Rule(-20, new int[]{153,154,126});
    rules[142]=new Rule(-20, new int[]{153,154,-21,-45});
    rules[143]=new Rule(-11, new int[]{141,-46,196,-47});
    rules[144]=new Rule(-11, new int[]{141,-46,196,-47,-11});
    rules[145]=new Rule(-48, new int[]{-48,-49,-4});
    rules[146]=new Rule(-48, new int[]{-4});
    rules[147]=new Rule(-49, new int[]{44});
    rules[148]=new Rule(-50, new int[]{-51,-52});
    rules[149]=new Rule(-50, new int[]{-51,-48,-52});
    rules[150]=new Rule(-50, new int[]{-51,-48,126});
    rules[151]=new Rule(-50, new int[]{-51,126,-52});
    rules[152]=new Rule(-18, new int[]{-53,-54});
    rules[153]=new Rule(-46, new int[]{-53,-54});
    rules[154]=new Rule(-55, new int[]{-53,-54});
    rules[155]=new Rule(-55, new int[]{-54});
    rules[156]=new Rule(-54, new int[]{131});
    rules[157]=new Rule(-53, new int[]{132});
    rules[158]=new Rule(-53, new int[]{133});
    rules[159]=new Rule(-53, new int[]{128});
    rules[160]=new Rule(-53, new int[]{-56});
    rules[161]=new Rule(-57, new int[]{-58});
    rules[162]=new Rule(-57, new int[]{-53});
    rules[163]=new Rule(-59, new int[]{});
    rules[164]=new Rule(-59, new int[]{-58});
    rules[165]=new Rule(-59, new int[]{-60});
    rules[166]=new Rule(-61, new int[]{-59});
    rules[167]=new Rule(-61, new int[]{-61,44,-59});
    rules[168]=new Rule(-62, new int[]{123,-61,125});
    rules[169]=new Rule(-62, new int[]{123,-61,125,44,-62});
    rules[170]=new Rule(-63, new int[]{176});
    rules[171]=new Rule(-63, new int[]{160});
    rules[172]=new Rule(-63, new int[]{177});
    rules[173]=new Rule(-63, new int[]{178});
    rules[174]=new Rule(-63, new int[]{179});
    rules[175]=new Rule(-63, new int[]{180});
    rules[176]=new Rule(-64, new int[]{130,44,-63});
    rules[177]=new Rule(-65, new int[]{-64});
    rules[178]=new Rule(-65, new int[]{-65,44,-64});
    rules[179]=new Rule(-66, new int[]{175,40,-65,44,123,-62,125,41});
    rules[180]=new Rule(-56, new int[]{-66});
    rules[181]=new Rule(-67, new int[]{});
    rules[182]=new Rule(-67, new int[]{182});
    rules[183]=new Rule(-67, new int[]{183});
    rules[184]=new Rule(-68, new int[]{});
    rules[185]=new Rule(-68, new int[]{129});
    rules[186]=new Rule(-68, new int[]{144});
    rules[187]=new Rule(-68, new int[]{145});
    rules[188]=new Rule(-68, new int[]{146});
    rules[189]=new Rule(-68, new int[]{147});
    rules[190]=new Rule(-69, new int[]{});
    rules[191]=new Rule(-69, new int[]{-60});
    rules[192]=new Rule(-70, new int[]{181,40,-57,44,-4,41});
    rules[193]=new Rule(-70, new int[]{181,40,-57,44,-4,44,-69,41});
    rules[194]=new Rule(-70, new int[]{181,40,-57,44,-4,44,-69,44,-68,41});
    rules[195]=new Rule(-70, new int[]{181,40,-57,44,-4,44,-69,44,-68,44,-67,41});
    rules[196]=new Rule(-71, new int[]{-70});
    rules[197]=new Rule(-19, new int[]{-4});
    rules[198]=new Rule(-47, new int[]{-4});
    rules[199]=new Rule(-60, new int[]{-55});
    rules[200]=new Rule(-60, new int[]{-58});
    rules[201]=new Rule(-60, new int[]{-72});
    rules[202]=new Rule(-60, new int[]{-73});
    rules[203]=new Rule(-60, new int[]{129});
    rules[204]=new Rule(-60, new int[]{130});
    rules[205]=new Rule(-60, new int[]{-74});
    rules[206]=new Rule(-60, new int[]{-75});
    rules[207]=new Rule(-60, new int[]{144});
    rules[208]=new Rule(-60, new int[]{145});
    rules[209]=new Rule(-60, new int[]{148});
    rules[210]=new Rule(-60, new int[]{149});
    rules[211]=new Rule(-60, new int[]{150});
    rules[212]=new Rule(-4, new int[]{-57});
    rules[213]=new Rule(-4, new int[]{-60});
    rules[214]=new Rule(-4, new int[]{-44});
    rules[215]=new Rule(-74, new int[]{-76,-4});
    rules[216]=new Rule(-76, new int[]{33});
    rules[217]=new Rule(-76, new int[]{45});
    rules[218]=new Rule(-76, new int[]{43});
    rules[219]=new Rule(-75, new int[]{-4,-77,-4});
    rules[220]=new Rule(-77, new int[]{43});
    rules[221]=new Rule(-77, new int[]{45});
    rules[222]=new Rule(-77, new int[]{42});
    rules[223]=new Rule(-77, new int[]{47});
    rules[224]=new Rule(-77, new int[]{203});
    rules[225]=new Rule(-77, new int[]{204});
    rules[226]=new Rule(-77, new int[]{38});
    rules[227]=new Rule(-77, new int[]{198});
    rules[228]=new Rule(-77, new int[]{199});
    rules[229]=new Rule(-77, new int[]{200});
    rules[230]=new Rule(-77, new int[]{201});
    rules[231]=new Rule(-77, new int[]{196});
    rules[232]=new Rule(-77, new int[]{197});
    rules[233]=new Rule(-73, new int[]{-55,-72});
    rules[234]=new Rule(-72, new int[]{40,41});
    rules[235]=new Rule(-72, new int[]{40,-48,41});
    rules[236]=new Rule(-72, new int[]{40,-48,126});
    rules[237]=new Rule(-58, new int[]{-78,-79});
    rules[238]=new Rule(-58, new int[]{-71});
    rules[239]=new Rule(-58, new int[]{184,-78,-79});
    rules[240]=new Rule(-58, new int[]{184,-71});
    rules[241]=new Rule(-78, new int[]{128});
    rules[242]=new Rule(-78, new int[]{152});
    rules[243]=new Rule(-78, new int[]{144});
    rules[244]=new Rule(-78, new int[]{145});
    rules[245]=new Rule(-78, new int[]{150});
    rules[246]=new Rule(-78, new int[]{148});
    rules[247]=new Rule(-78, new int[]{149});
    rules[248]=new Rule(-78, new int[]{167});
    rules[249]=new Rule(-78, new int[]{184});
    rules[250]=new Rule(-79, new int[]{-51});
    rules[251]=new Rule(-79, new int[]{-50});
    rules[252]=new Rule(-51, new int[]{40});
    rules[253]=new Rule(-52, new int[]{41});

    nonTerminals = new string[] {"", "Start", "$accept", "DaxQueries", 
      "Expression", "DaxScript", "Empty", "Order", "OrderByList", "OrderBy", 
      "DaxQuery", "Definitions", "CreateMeasure", "CreateKpi", "CreateMember", 
      "Calculate", "Alter", "CubeName", "MeasureName", "MeasureExpression", "CalculationProperty", 
      "CalculationPropertyFormatType", "CalculationPropertyAccuracy", "CalculationPropertyVisible", 
      "CalculationPropertyDescriptionContent", "CalculationPropertyDescription", 
      "CalculationPropertyDisplayFolder", "CalculationPropertyThousandSeparator", 
      "CalculationPropertyFormat", "CalculationPropertyAdditionalInfo", "CalculationPropertyKpiDescription", 
      "CalculationPropertyKpiTargetFormatString", "CalculationPropertyKpiTargetDescription", 
      "CalculationPropertyKpiTargetExpression", "CalculationPropertyKpiStatusGraphic", 
      "CalculationPropertyKpiStatusDescription", "CalculationPropertyKpiStatusExpression", 
      "CalculationPropertyKpiTrendGraphic", "CalculationPropertyKpiTrendDescription", 
      "CalculationPropertyKpiTrendExpression", "CalculationPropertyKpiAnnotations", 
      "VarName", "VarDeclaration", "VarDeclarations", "VarExpression", "CalculationPropertyParams", 
      "QueryMeasureName", "QueryMeasureExpression", "Params1", "ParamSeparator", 
      "ParenthesisParameters", "StartArg", "EndArg", "TableRef", "ColumnRef", 
      "ColMeasureRef", "DataTableFunction", "TableExpression", "FunctionCall", 
      "DataTableValue", "ScalarExpression", "DataTableValues", "DataTableRows", 
      "DataTableColumnType", "DataTableColumn", "DataTableColumns", "DataTable", 
      "RankXTies", "RankXOrder", "RankXValue", "RankX", "RankXFunction", "ParenthesisExpression", 
      "CalculateShortcut", "UnaryExpression", "BinaryExpression", "UnaryOperator", 
      "BinaryOperator", "FunctionName", "FunctionArgs", };
  }

  protected override void DoAction(int action)
  {
    switch (action)
    {
      case 37: // CreateMeasure -> KWCREATE KWMEASURE CubeName '.' MeasureName EQ MeasureExpression 
#line 142 "../../GeneratorSource/parser.y"
			{ SpecifyFullMeasureText(location_stack.array[location_stack.top-7], location_stack.array[location_stack.top-1]); }
        break;
      case 38: // CreateMeasure -> KWCREATE KWMEASURE CubeName '.' MeasureName EQ MeasureExpression CalculationProperty 
#line 144 "../../GeneratorSource/parser.y"
			{ SpecifyFullMeasureText(location_stack.array[location_stack.top-8], location_stack.array[location_stack.top-2]); }
        break;
      case 39: // CreateMeasure -> KWCREATE KWMEASURE error '.' MeasureName EQ MeasureExpression 
#line 145 "../../GeneratorSource/parser.y"
			{ CallHdlr("Cube name expected before '.'", location_stack.array[location_stack.top-5]); }
        break;
      case 40: // CreateMeasure -> KWCREATE KWMEASURE MeasureName EQ MeasureExpression 
#line 146 "../../GeneratorSource/parser.y"
			{ SpecifyFullMeasureText(location_stack.array[location_stack.top-5], location_stack.array[location_stack.top-1]); }
        break;
      case 41: // CreateMeasure -> KWCREATE KWMEASURE MeasureName EQ MeasureExpression CalculationProperty 
#line 147 "../../GeneratorSource/parser.y"
			{ SpecifyFullMeasureText(location_stack.array[location_stack.top-6], location_stack.array[location_stack.top-2]); }
        break;
      case 42: // CreateMeasure -> KWCREATE KWMEASURE error EQ MeasureExpression 
#line 148 "../../GeneratorSource/parser.y"
			{ CallHdlr("Measure name expected", location_stack.array[location_stack.top-3]); }
        break;
      case 47: // CalculationPropertyFormatType -> KWGENERAL 
#line 168 "../../GeneratorSource/parser.y"
			{ SpecifyCalculationProperty(location_stack.array[location_stack.top-1]); }
        break;
      case 48: // CalculationPropertyFormatType -> KWNUMBERDECIMAL 
#line 169 "../../GeneratorSource/parser.y"
			{ SpecifyCalculationProperty(location_stack.array[location_stack.top-1]); }
        break;
      case 49: // CalculationPropertyFormatType -> KWNUMBERWHOLE 
#line 170 "../../GeneratorSource/parser.y"
			{ SpecifyCalculationProperty(location_stack.array[location_stack.top-1]); }
        break;
      case 50: // CalculationPropertyFormatType -> KWPERCENTAGE 
#line 171 "../../GeneratorSource/parser.y"
			{ SpecifyCalculationProperty(location_stack.array[location_stack.top-1]); }
        break;
      case 51: // CalculationPropertyFormatType -> KWSCIENTIFIC 
#line 172 "../../GeneratorSource/parser.y"
			{ SpecifyCalculationProperty(location_stack.array[location_stack.top-1]); }
        break;
      case 52: // CalculationPropertyFormatType -> KWCURRENCY 
#line 173 "../../GeneratorSource/parser.y"
			{ SpecifyCalculationProperty(location_stack.array[location_stack.top-1]); }
        break;
      case 53: // CalculationPropertyFormatType -> KWDATETIMECUSTOM 
#line 174 "../../GeneratorSource/parser.y"
			{ SpecifyCalculationProperty(location_stack.array[location_stack.top-1]); }
        break;
      case 54: // CalculationPropertyFormatType -> KWDATETIMESHORTDATEPATTERN 
#line 175 "../../GeneratorSource/parser.y"
			{ SpecifyCalculationProperty(location_stack.array[location_stack.top-1]); }
        break;
      case 55: // CalculationPropertyFormatType -> KWDATETIMEGENERAL 
#line 176 "../../GeneratorSource/parser.y"
			{ SpecifyCalculationProperty(location_stack.array[location_stack.top-1]); }
        break;
      case 56: // CalculationPropertyFormatType -> KWTEXT 
#line 177 "../../GeneratorSource/parser.y"
			{ SpecifyCalculationProperty(location_stack.array[location_stack.top-1]); }
        break;
      case 57: // CalculationPropertyAccuracy -> KWACCURACY EQ NUMBER 
#line 181 "../../GeneratorSource/parser.y"
			{ SpecifyCalcPropAccuracy(location_stack.array[location_stack.top-1]); }
        break;
      case 58: // CalculationPropertyAccuracy -> KWACCURACY error 
#line 182 "../../GeneratorSource/parser.y"
			{ CallHdlr("'=' is not specified", location_stack.array[location_stack.top-1]); }
        break;
      case 59: // CalculationPropertyAccuracy -> KWACCURACY EQ error 
#line 183 "../../GeneratorSource/parser.y"
			{ CallHdlr("Value of Accuracy is not a number", location_stack.array[location_stack.top-1]); }
        break;
      case 60: // CalculationPropertyVisible -> KWVISIBLE EQ KWTRUE 
#line 187 "../../GeneratorSource/parser.y"
			{ SpecifyCalcPropIsHidden(false); }
        break;
      case 61: // CalculationPropertyVisible -> KWVISIBLE EQ KWFALSE 
#line 188 "../../GeneratorSource/parser.y"
			{ SpecifyCalcPropIsHidden(true); }
        break;
      case 62: // CalculationPropertyVisible -> KWVISIBLE error 
#line 189 "../../GeneratorSource/parser.y"
			{ CallHdlr("'=' is not specified", location_stack.array[location_stack.top-1]); }
        break;
      case 63: // CalculationPropertyVisible -> KWVISIBLE EQ error 
#line 190 "../../GeneratorSource/parser.y"
			{ CallHdlr("Visible can be either TRUE or FALSE", location_stack.array[location_stack.top-1]); }
        break;
      case 66: // CalculationPropertyDescription -> KWDESCRIPTION EQ CalculationPropertyDescriptionContent 
#line 199 "../../GeneratorSource/parser.y"
			{ SpecifyCalcPropDescription(location_stack.array[location_stack.top-1]);  }
        break;
      case 67: // CalculationPropertyDescription -> KWDESCRIPTION error 
#line 200 "../../GeneratorSource/parser.y"
			{ CallHdlr("'=' is not specified", location_stack.array[location_stack.top-1]); }
        break;
      case 68: // CalculationPropertyDisplayFolder -> KWDISPLAYFOLDER EQ ESCAPEDTABLENAME 
#line 204 "../../GeneratorSource/parser.y"
			{ SpecifyCalcPropDisplayFolder(location_stack.array[location_stack.top-1]);  }
        break;
      case 69: // CalculationPropertyDisplayFolder -> KWDISPLAYFOLDER error 
#line 205 "../../GeneratorSource/parser.y"
			{ CallHdlr("'=' is not specified", location_stack.array[location_stack.top-1]); }
        break;
      case 70: // CalculationPropertyThousandSeparator -> KWTHOUSANDSEPARATOR EQ KWTRUE 
#line 209 "../../GeneratorSource/parser.y"
			{ SpecifyCalcPropThousandSeparator(true); }
        break;
      case 71: // CalculationPropertyThousandSeparator -> KWTHOUSANDSEPARATOR EQ KWFALSE 
#line 210 "../../GeneratorSource/parser.y"
			{ SpecifyCalcPropThousandSeparator(false); }
        break;
      case 72: // CalculationPropertyThousandSeparator -> KWTHOUSANDSEPARATOR error 
#line 211 "../../GeneratorSource/parser.y"
			{ CallHdlr("'=' is not specified", location_stack.array[location_stack.top-1]); }
        break;
      case 73: // CalculationPropertyThousandSeparator -> KWTHOUSANDSEPARATOR EQ error 
#line 212 "../../GeneratorSource/parser.y"
			{ CallHdlr("ThousandSeparator can be either TRUE or FALSE", location_stack.array[location_stack.top-1]); }
        break;
      case 74: // CalculationPropertyFormat -> KWFORMAT EQ ESCAPEDTABLENAME 
#line 216 "../../GeneratorSource/parser.y"
			{ SpecifyCalcPropFormat(location_stack.array[location_stack.top-1]); }
        break;
      case 75: // CalculationPropertyAdditionalInfo -> KWADDITIONALINFO EQ ESCAPEDTABLENAME 
#line 220 "../../GeneratorSource/parser.y"
			{ SpecifyCalcPropAdditionalInfo(location_stack.array[location_stack.top-1]); }
        break;
      case 76: // CalculationPropertyKpiDescription -> KWKPIDESCRIPTION EQ CalculationPropertyDescriptionContent 
#line 224 "../../GeneratorSource/parser.y"
			{ SpecifyCalcPropKpiDescription(location_stack.array[location_stack.top-1]);  }
        break;
      case 77: // CalculationPropertyKpiDescription -> KWKPIDESCRIPTION error 
#line 225 "../../GeneratorSource/parser.y"
			{ CallHdlr("'=' is not specified", location_stack.array[location_stack.top-1]); }
        break;
      case 78: // CalculationPropertyKpiTargetFormatString -> KWKPITARGETFORMATSTRING EQ CalculationPropertyDescriptionContent 
#line 229 "../../GeneratorSource/parser.y"
			{ SpecifyCalcPropKpiTargetFormatString(location_stack.array[location_stack.top-1]);  }
        break;
      case 79: // CalculationPropertyKpiTargetFormatString -> KWKPITARGETFORMATSTRING error 
#line 230 "../../GeneratorSource/parser.y"
			{ CallHdlr("'=' is not specified", location_stack.array[location_stack.top-1]); }
        break;
      case 80: // CalculationPropertyKpiTargetDescription -> KWKPITARGETDESCRIPTION EQ CalculationPropertyDescriptionContent 
#line 234 "../../GeneratorSource/parser.y"
			{ SpecifyCalcPropKpiTargetDescription(location_stack.array[location_stack.top-1]);  }
        break;
      case 81: // CalculationPropertyKpiTargetDescription -> KWKPITARGETDESCRIPTION error 
#line 235 "../../GeneratorSource/parser.y"
			{ CallHdlr("'=' is not specified", location_stack.array[location_stack.top-1]); }
        break;
      case 82: // CalculationPropertyKpiTargetExpression -> KWKPITARGETEXPRESSION EQ Expression 
#line 239 "../../GeneratorSource/parser.y"
			{ SpecifyCalcPropKpiTargetExpression(location_stack.array[location_stack.top-1]);  }
        break;
      case 83: // CalculationPropertyKpiTargetExpression -> KWKPITARGETEXPRESSION error 
#line 240 "../../GeneratorSource/parser.y"
			{ CallHdlr("'=' is not specified", location_stack.array[location_stack.top-1]); }
        break;
      case 84: // CalculationPropertyKpiStatusGraphic -> KWKPISTATUSGRAPHIC EQ CalculationPropertyDescriptionContent 
#line 244 "../../GeneratorSource/parser.y"
			{ SpecifyCalcPropKpiStatusGraphic(location_stack.array[location_stack.top-1]);  }
        break;
      case 85: // CalculationPropertyKpiStatusGraphic -> KWKPISTATUSGRAPHIC error 
#line 245 "../../GeneratorSource/parser.y"
			{ CallHdlr("'=' is not specified", location_stack.array[location_stack.top-1]); }
        break;
      case 86: // CalculationPropertyKpiStatusDescription -> KWKPISTATUSDESCRIPTION EQ CalculationPropertyDescriptionContent 
#line 249 "../../GeneratorSource/parser.y"
			{ SpecifyCalcPropKpiStatusDescription(location_stack.array[location_stack.top-1]);  }
        break;
      case 87: // CalculationPropertyKpiStatusDescription -> KWKPISTATUSDESCRIPTION error 
#line 250 "../../GeneratorSource/parser.y"
			{ CallHdlr("'=' is not specified", location_stack.array[location_stack.top-1]); }
        break;
      case 88: // CalculationPropertyKpiStatusExpression -> KWKPISTATUSEXPRESSION EQ Expression 
#line 254 "../../GeneratorSource/parser.y"
			{ SpecifyCalcPropKpiStatusExpression(location_stack.array[location_stack.top-1]);  }
        break;
      case 89: // CalculationPropertyKpiStatusExpression -> KWKPISTATUSEXPRESSION error 
#line 255 "../../GeneratorSource/parser.y"
			{ CallHdlr("'=' is not specified", location_stack.array[location_stack.top-1]); }
        break;
      case 90: // CalculationPropertyKpiTrendGraphic -> KWKPITRENDGRAPHIC EQ CalculationPropertyDescriptionContent 
#line 259 "../../GeneratorSource/parser.y"
			{ SpecifyCalcPropKpiTrendGraphic(location_stack.array[location_stack.top-1]);  }
        break;
      case 91: // CalculationPropertyKpiTrendGraphic -> KWKPITRENDGRAPHIC error 
#line 260 "../../GeneratorSource/parser.y"
			{ CallHdlr("'=' is not specified", location_stack.array[location_stack.top-1]); }
        break;
      case 92: // CalculationPropertyKpiTrendDescription -> KWKPITRENDDESCRIPTION EQ CalculationPropertyDescriptionContent 
#line 264 "../../GeneratorSource/parser.y"
			{ SpecifyCalcPropKpiTrendDescription(location_stack.array[location_stack.top-1]);  }
        break;
      case 93: // CalculationPropertyKpiTrendDescription -> KWKPITRENDDESCRIPTION error 
#line 265 "../../GeneratorSource/parser.y"
			{ CallHdlr("'=' is not specified", location_stack.array[location_stack.top-1]); }
        break;
      case 94: // CalculationPropertyKpiTrendExpression -> KWKPITRENDEXPRESSION EQ Expression 
#line 269 "../../GeneratorSource/parser.y"
			{ SpecifyCalcPropKpiTrendExpression(location_stack.array[location_stack.top-1]);  }
        break;
      case 95: // CalculationPropertyKpiTrendExpression -> KWKPITRENDEXPRESSION error 
#line 270 "../../GeneratorSource/parser.y"
			{ CallHdlr("'=' is not specified", location_stack.array[location_stack.top-1]); }
        break;
      case 96: // CalculationPropertyKpiAnnotations -> KWKPIANNOTATIONS EQ ESCAPEDTABLENAME 
#line 274 "../../GeneratorSource/parser.y"
			{ SpecifyCalcPropKpiAnnotations(location_stack.array[location_stack.top-1]);  }
        break;
      case 97: // CalculationPropertyKpiAnnotations -> KWKPIANNOTATIONS error 
#line 275 "../../GeneratorSource/parser.y"
			{ CallHdlr("'=' is not specified", location_stack.array[location_stack.top-1]); }
        break;
      case 100: // VarDeclaration -> KWVAR error EQ Expression 
#line 284 "../../GeneratorSource/parser.y"
			{ CallHdlr("Var name expected", location_stack.array[location_stack.top-3]); }
        break;
      case 141: // CalculationProperty -> KWCALCULATION KWPROPERTY error 
#line 337 "../../GeneratorSource/parser.y"
			{ CallHdlr("Wrong calculation property type.  Expected types: General, NumberDecimal, NumberWhole, Percentage, Scientific, Currency, DateTimeCustom, Visible, Description, DisplayFolder", location_stack.array[location_stack.top-2]); }
        break;
      case 147: // ParamSeparator -> ',' 
#line 352 "../../GeneratorSource/parser.y"
			{ NextParameter(location_stack.array[location_stack.top-1]); }
        break;
      case 148: // ParenthesisParameters -> StartArg EndArg 
#line 356 "../../GeneratorSource/parser.y"
			{ Match(location_stack.array[location_stack.top-2], location_stack.array[location_stack.top-1]); }
        break;
      case 149: // ParenthesisParameters -> StartArg Params1 EndArg 
#line 357 "../../GeneratorSource/parser.y"
			{ Match(location_stack.array[location_stack.top-3], location_stack.array[location_stack.top-1]); }
        break;
      case 150: // ParenthesisParameters -> StartArg Params1 error 
#line 358 "../../GeneratorSource/parser.y"
			{ CallHdlr("unmatched parentheses", location_stack.array[location_stack.top-1]); }
        break;
      case 151: // ParenthesisParameters -> StartArg error EndArg 
#line 359 "../../GeneratorSource/parser.y"
			{ yyval = value_stack.array[value_stack.top-1];
                                             CallHdlr("error in parameters", location_stack.array[location_stack.top-2]); }
        break;
      case 152: // MeasureName -> TableRef ColumnRef 
#line 364 "../../GeneratorSource/parser.y"
			{ CreateNewMeasure(location_stack.array[location_stack.top-2], location_stack.array[location_stack.top-1]); }
        break;
      case 180: // DataTableFunction -> DataTable 
#line 431 "../../GeneratorSource/parser.y"
			{ StartFunction(location_stack.array[location_stack.top-1], value_stack.array[value_stack.top-1].str); }
        break;
      case 196: // RankXFunction -> RankX 
#line 462 "../../GeneratorSource/parser.y"
			{ StartFunction(location_stack.array[location_stack.top-1], value_stack.array[value_stack.top-1].str); }
        break;
      case 197: // MeasureExpression -> Expression 
#line 466 "../../GeneratorSource/parser.y"
			{ SpecifyMeasureExpression(location_stack.array[location_stack.top-1]); }
        break;
      case 234: // ParenthesisExpression -> '(' ')' 
#line 517 "../../GeneratorSource/parser.y"
			{ Match(location_stack.array[location_stack.top-2], location_stack.array[location_stack.top-1]); }
        break;
      case 235: // ParenthesisExpression -> '(' Params1 ')' 
#line 518 "../../GeneratorSource/parser.y"
			{ Match(location_stack.array[location_stack.top-3], location_stack.array[location_stack.top-1]); }
        break;
      case 236: // ParenthesisExpression -> '(' Params1 error 
#line 519 "../../GeneratorSource/parser.y"
			{ CallHdlr("unmatched parentheses", location_stack.array[location_stack.top-1]); }
        break;
      case 241: // FunctionName -> FUNCTION 
#line 530 "../../GeneratorSource/parser.y"
			{ StartFunction(location_stack.array[location_stack.top-1], value_stack.array[value_stack.top-1].str); }
        break;
      case 242: // FunctionName -> KWCALCULATE 
#line 531 "../../GeneratorSource/parser.y"
			{ StartFunction(location_stack.array[location_stack.top-1], value_stack.array[value_stack.top-1].str); }
        break;
      case 243: // FunctionName -> KWTRUE 
#line 532 "../../GeneratorSource/parser.y"
			{ StartFunction(location_stack.array[location_stack.top-1], value_stack.array[value_stack.top-1].str); }
        break;
      case 244: // FunctionName -> KWFALSE 
#line 533 "../../GeneratorSource/parser.y"
			{ StartFunction(location_stack.array[location_stack.top-1], value_stack.array[value_stack.top-1].str); }
        break;
      case 245: // FunctionName -> KWYEAR 
#line 534 "../../GeneratorSource/parser.y"
			{ StartFunction(location_stack.array[location_stack.top-1], value_stack.array[value_stack.top-1].str); }
        break;
      case 246: // FunctionName -> KWDAY 
#line 535 "../../GeneratorSource/parser.y"
			{ StartFunction(location_stack.array[location_stack.top-1], value_stack.array[value_stack.top-1].str); }
        break;
      case 247: // FunctionName -> KWMONTH 
#line 536 "../../GeneratorSource/parser.y"
			{ StartFunction(location_stack.array[location_stack.top-1], value_stack.array[value_stack.top-1].str); }
        break;
      case 248: // FunctionName -> KWFORMAT 
#line 537 "../../GeneratorSource/parser.y"
			{ StartFunction(location_stack.array[location_stack.top-1], value_stack.array[value_stack.top-1].str); }
        break;
      case 249: // FunctionName -> KWNOT 
#line 538 "../../GeneratorSource/parser.y"
			{ StartFunction(location_stack.array[location_stack.top-1], value_stack.array[value_stack.top-1].str); }
        break;
      case 252: // StartArg -> '(' 
#line 549 "../../GeneratorSource/parser.y"
			{
        StartParameters(location_stack.array[location_stack.top-1]);
    }
        break;
      case 253: // EndArg -> ')' 
#line 556 "../../GeneratorSource/parser.y"
			{
        EndParameters(location_stack.array[location_stack.top-1]);
    }
        break;
    }
  }

  protected override string TerminalToString(int terminal)
  {
    if (((Tokens)terminal).ToString() != terminal.ToString())
      return ((Tokens)terminal).ToString();
    else
      return CharToString((char)terminal);
  }

#line 561 "../../GeneratorSource/parser.y"













}
}
