// This code was generated by the Managed Package Parser Generator


using System;
using System.Collections.Generic;
using System.Text;
using Babel.ParserGenerator;
using Microsoft.VisualStudio.TextManager.Interop;

namespace Babel.Parser
{
public enum Tokens {error=126,EOF=127,FUNCTION=128,
    NUMBER=129,STRING=130,COLUMNNAME=131,TABLENAME=132,ESCAPEDTABLENAME=133,PARTIALCOLUMNNAME=134,PARTIALTABLENAME=135,MDXCODE=136,
    KWALTER=137,KWEVALUATE=138,KWDEFINE=139,KWMEASURE=140,KWORDER=141,KWBY=142,KWTRUE=143,KWFALSE=144,
    KWASC=145,KWDESC=146,KWDAY=147,KWMONTH=148,KWYEAR=149,KWCREATE=150,KWCALCULATE=151,KWCALCULATION=152,
    KWPROPERTY=153,KWGENERAL=154,KWNUMBERDECIMAL=155,KWNUMBERWHOLE=156,KWPERCENTAGE=157,KWSCIENTIFIC=158,KWCURRENCY=159,KWDATETIMECUSTOM=160,
    KWDATETIMESHORTDATEPATTERN=161,KWDATETIMEGENERAL=162,KWTEXT=163,KWACCURACY=164,KWTHOUSANDSEPARATOR=165,KWFORMAT=166,KWADDITIONALINFO=167,KWKPI=168,
    KWVISIBLE=169,KWDESCRIPTION=170,KWDISPLAYFOLDER=171,KWVAR=172,KWRETURN=173,KWDATATABLE=174,KWBOOLEAN=175,KWDATETIME=176,
    KWDOUBLE=177,KWINTEGER=178,KWSTRING=179,KWRANKX=180,KWSKIP=181,KWDENSE=182,KWNOT=183,EQ=184,
    NEQ=185,GT=186,GTE=187,LT=188,LTE=189,POW=190,AMPAMP=191,BARBAR=192,
    LEFTSQUAREBRACKET=193,RIGHTSQUAREBRACKET=194,maxParseToken=195,LEX_WHITE=196,LEX_COMMENT=197,LEX_ERROR=198};

public partial struct LexValue
#line 13 "../../GeneratorSource/parser.y"
			{
    public string str;
}
// Abstract base class for MPLEX scanners
public abstract class ScanBase : AScanner<LexValue,LexLocation> {
    protected abstract int CurrentSc { get; set; }
    //
    // Override the virtual EolState property if the scanner state is more
    // complicated then a simple copy of the current start state ordinal
    //
    public virtual int EolState { get { return CurrentSc; } set { CurrentSc = value; } }
}

public partial class Parser: ShiftReduceParser<LexValue, LexLocation>
{
#line 18 "../../GeneratorSource/parser.y"

    ErrorHandler handler = null;
    public void SetHandler(ErrorHandler hdlr) { handler = hdlr; }
    internal void CallHdlr(string msg, LexLocation val)
    {
        handler.AddError(msg, val.sLin, val.sCol, val.eCol - val.sCol);
    }

    internal TextSpan MkTSpan(LexLocation s)
    {
        TextSpan ts;
        ts.iStartLine = s.sLin;
        ts.iStartIndex = s.sCol;
        ts.iEndLine = s.eLin;
        ts.iEndIndex = s.eCol;
        return ts;
    }

    internal void Match(LexLocation lh, LexLocation rh)
    {
        DefineMatch(MkTSpan(lh), MkTSpan(rh));
    }

    internal void StartFunction(LexLocation s, string token)
    {
        System.Diagnostics.Debug.WriteLine("StartName:" + token);
        Sink.StartName(MkTSpan(s), token); 
    }

    internal void StartParameters(LexLocation s)
    {
        System.Diagnostics.Debug.WriteLine("StartParameters");
        Sink.StartParameters(MkTSpan(s)); 
    }

    internal void EndParameters(LexLocation s)
    {
        System.Diagnostics.Debug.WriteLine("EndParameters");
        Sink.EndParameters(MkTSpan(s));
    }

    internal void NextParameter(LexLocation s)
    {
        System.Diagnostics.Debug.WriteLine("Next Parameter");
        Sink.NextParameter(MkTSpan(s));
    }
  protected override void Initialize()
  {
    this.errToken = (int)Tokens.error;
    this.eofToken = (int)Tokens.EOF;

    states=new State[288];
    AddState(0,new State(new int[]{139,5,138,178,184,182,150,188,151,281,137,285,127,287},new int[]{-1,1,-3,3,-10,181,-5,184,-12,185,-13,274,-14,275,-15,278,-16,282,-6,286}));
    AddState(1,new State(new int[]{127,2}));
    AddState(2,new State(-1));
    AddState(3,new State(new int[]{139,5,138,178,127,-2},new int[]{-10,4}));
    AddState(4,new State(-14));
    AddState(5,new State(new int[]{140,169},new int[]{-11,6}));
    AddState(6,new State(new int[]{138,7}));
    AddState(7,new State(new int[]{128,36,151,37,143,38,144,39,149,40,147,41,148,42,166,43,183,44,180,58,132,92,133,93,174,96,131,91,40,81,129,116,130,117,33,122,45,123,43,124,172,131},new int[]{-4,8,-45,25,-46,26,-66,27,-59,88,-58,57,-41,89,-44,94,-54,95,-48,121,-43,79,-42,113,-60,114,-61,115,-62,118,-64,119,-63,125,-32,126,-31,127,-30,130}));
    AddState(8,new State(new int[]{141,158,43,12,45,13,42,14,47,15,191,16,192,17,38,18,186,19,187,20,188,21,189,22,184,23,185,24,139,-16,138,-16,127,-16},new int[]{-9,9,-65,10}));
    AddState(9,new State(-15));
    AddState(10,new State(new int[]{128,36,151,37,143,38,144,39,149,40,147,41,148,42,166,43,183,44,180,58,132,92,133,93,174,96,131,91,40,81,129,116,130,117,33,122,45,123,43,124,172,131},new int[]{-4,11,-45,25,-46,26,-66,27,-59,88,-58,57,-41,89,-44,94,-54,95,-48,121,-43,79,-42,113,-60,114,-61,115,-62,118,-64,119,-63,125,-32,126,-31,127,-30,130}));
    AddState(11,new State(new int[]{43,12,45,13,42,14,47,15,191,16,192,17,38,18,186,19,187,20,188,21,189,22,184,23,185,24,141,-169,139,-169,138,-169,127,-169,126,-169,41,-169,44,-169,125,-169,173,-169,172,-169,145,-169,146,-169,140,-169,152,-169,59,-169},new int[]{-65,10}));
    AddState(12,new State(-170));
    AddState(13,new State(-171));
    AddState(14,new State(-172));
    AddState(15,new State(-173));
    AddState(16,new State(-174));
    AddState(17,new State(-175));
    AddState(18,new State(-176));
    AddState(19,new State(-177));
    AddState(20,new State(-178));
    AddState(21,new State(-179));
    AddState(22,new State(-180));
    AddState(23,new State(-181));
    AddState(24,new State(-182));
    AddState(25,new State(-162));
    AddState(26,new State(-113));
    AddState(27,new State(new int[]{40,47},new int[]{-67,28,-39,29,-38,48}));
    AddState(28,new State(-187));
    AddState(29,new State(new int[]{126,156,41,155,128,36,151,37,143,38,144,39,149,40,147,41,148,42,166,43,183,44,180,58,132,92,133,93,174,96,131,91,40,81,129,116,130,117,33,122,45,123,43,124,172,131,141,-200,42,-200,47,-200,191,-200,192,-200,38,-200,186,-200,187,-200,188,-200,189,-200,184,-200,185,-200,139,-200,138,-200,127,-200,44,-200,125,-200,173,-200,145,-200,146,-200,140,-200,152,-200,59,-200},new int[]{-40,30,-36,31,-4,87,-45,25,-46,26,-66,27,-59,88,-58,57,-41,89,-44,94,-54,95,-48,121,-43,79,-42,113,-60,114,-61,115,-62,118,-64,119,-63,125,-32,126,-31,127,-30,130}));
    AddState(30,new State(-100));
    AddState(31,new State(new int[]{126,33,41,155,44,86},new int[]{-40,32,-37,34}));
    AddState(32,new State(-101));
    AddState(33,new State(-102));
    AddState(34,new State(new int[]{128,36,151,37,143,38,144,39,149,40,147,41,148,42,166,43,183,44,180,58,132,92,133,93,174,96,131,91,40,81,129,116,130,117,33,122,45,123,43,124,172,131},new int[]{-4,35,-45,25,-46,26,-66,27,-59,88,-58,57,-41,89,-44,94,-54,95,-48,121,-43,79,-42,113,-60,114,-61,115,-62,118,-64,119,-63,125,-32,126,-31,127,-30,130}));
    AddState(35,new State(new int[]{43,12,45,13,42,14,47,15,191,16,192,17,38,18,186,19,187,20,188,21,189,22,184,23,185,24,126,-97,41,-97,44,-97},new int[]{-65,10}));
    AddState(36,new State(new int[]{40,-191,131,-111,141,-111,43,-111,45,-111,42,-111,47,-111,191,-111,192,-111,38,-111,186,-111,187,-111,188,-111,189,-111,184,-111,185,-111,139,-111,138,-111,127,-111,126,-111,41,-111,44,-111,125,-111,173,-111,172,-111,145,-111,146,-111,140,-111,152,-111,59,-111}));
    AddState(37,new State(-192));
    AddState(38,new State(new int[]{40,-193,141,-157,43,-157,45,-157,42,-157,47,-157,191,-157,192,-157,38,-157,186,-157,187,-157,188,-157,189,-157,184,-157,185,-157,139,-157,138,-157,127,-157,126,-157,41,-157,44,-157,125,-157,173,-157,172,-157,145,-157,146,-157,140,-157,152,-157,59,-157}));
    AddState(39,new State(new int[]{40,-194,141,-158,43,-158,45,-158,42,-158,47,-158,191,-158,192,-158,38,-158,186,-158,187,-158,188,-158,189,-158,184,-158,185,-158,139,-158,138,-158,127,-158,126,-158,41,-158,44,-158,125,-158,173,-158,172,-158,145,-158,146,-158,140,-158,152,-158,59,-158}));
    AddState(40,new State(new int[]{40,-195,141,-161,43,-161,45,-161,42,-161,47,-161,191,-161,192,-161,38,-161,186,-161,187,-161,188,-161,189,-161,184,-161,185,-161,139,-161,138,-161,127,-161,126,-161,41,-161,44,-161,125,-161,173,-161,172,-161,145,-161,146,-161,140,-161,152,-161,59,-161}));
    AddState(41,new State(new int[]{40,-196,141,-159,43,-159,45,-159,42,-159,47,-159,191,-159,192,-159,38,-159,186,-159,187,-159,188,-159,189,-159,184,-159,185,-159,139,-159,138,-159,127,-159,126,-159,41,-159,44,-159,125,-159,173,-159,172,-159,145,-159,146,-159,140,-159,152,-159,59,-159}));
    AddState(42,new State(new int[]{40,-197,141,-160,43,-160,45,-160,42,-160,47,-160,191,-160,192,-160,38,-160,186,-160,187,-160,188,-160,189,-160,184,-160,185,-160,139,-160,138,-160,127,-160,126,-160,41,-160,44,-160,125,-160,173,-160,172,-160,145,-160,146,-160,140,-160,152,-160,59,-160}));
    AddState(43,new State(-198));
    AddState(44,new State(new int[]{128,50,151,37,143,51,144,52,149,53,147,54,148,55,166,43,183,56,180,58,40,-199},new int[]{-66,45,-59,49,-58,57}));
    AddState(45,new State(new int[]{40,47},new int[]{-67,46,-39,29,-38,48}));
    AddState(46,new State(-189));
    AddState(47,new State(-202));
    AddState(48,new State(-201));
    AddState(49,new State(-190));
    AddState(50,new State(-191));
    AddState(51,new State(-193));
    AddState(52,new State(-194));
    AddState(53,new State(-195));
    AddState(54,new State(-196));
    AddState(55,new State(-197));
    AddState(56,new State(-199));
    AddState(57,new State(-146));
    AddState(58,new State(new int[]{40,59}));
    AddState(59,new State(new int[]{128,36,151,37,143,51,144,52,149,53,147,54,148,55,166,43,183,44,180,58,132,92,133,93,174,96},new int[]{-45,60,-46,153,-66,27,-59,88,-58,57,-41,154,-44,94,-54,95}));
    AddState(60,new State(new int[]{44,61}));
    AddState(61,new State(new int[]{132,92,133,93,128,36,174,96,131,91,151,37,143,38,144,39,149,40,147,41,148,42,166,43,183,44,180,58,40,81,129,116,130,117,33,122,45,123,43,124,172,131},new int[]{-48,62,-43,79,-41,89,-44,94,-54,95,-42,113,-46,26,-66,27,-59,88,-58,57,-60,114,-61,115,-62,118,-64,119,-63,125,-4,140,-45,25,-32,126,-31,127,-30,130}));
    AddState(62,new State(new int[]{41,63,44,64,43,-163,45,-163,42,-163,47,-163,191,-163,192,-163,38,-163,186,-163,187,-163,188,-163,189,-163,184,-163,185,-163}));
    AddState(63,new State(-142));
    AddState(64,new State(new int[]{132,92,133,93,128,36,174,96,131,91,151,37,143,38,144,39,149,40,147,41,148,42,166,43,183,44,180,58,40,81,129,116,130,117,33,122,45,123,43,124,172,131,41,-140,44,-140},new int[]{-57,65,-48,78,-43,79,-41,89,-44,94,-54,95,-42,113,-46,26,-66,27,-59,88,-58,57,-60,114,-61,115,-62,118,-64,119,-63,125,-4,140,-45,25,-32,126,-31,127,-30,130}));
    AddState(65,new State(new int[]{41,66,44,67}));
    AddState(66,new State(-143));
    AddState(67,new State(new int[]{129,75,143,76,144,77,41,-136,44,-136},new int[]{-56,68}));
    AddState(68,new State(new int[]{41,69,44,70}));
    AddState(69,new State(-144));
    AddState(70,new State(new int[]{181,73,182,74,41,-133},new int[]{-55,71}));
    AddState(71,new State(new int[]{41,72}));
    AddState(72,new State(-145));
    AddState(73,new State(-134));
    AddState(74,new State(-135));
    AddState(75,new State(-137));
    AddState(76,new State(-138));
    AddState(77,new State(-139));
    AddState(78,new State(new int[]{41,-141,44,-141,43,-163,45,-163,42,-163,47,-163,191,-163,192,-163,38,-163,186,-163,187,-163,188,-163,189,-163,184,-163,185,-163}));
    AddState(79,new State(new int[]{40,81,141,-149,43,-149,45,-149,42,-149,47,-149,191,-149,192,-149,38,-149,186,-149,187,-149,188,-149,189,-149,184,-149,185,-149,139,-149,138,-149,127,-149,126,-149,41,-149,44,-149,125,-149,173,-149,172,-149,145,-149,146,-149,140,-149,152,-149,59,-149},new int[]{-60,80}));
    AddState(80,new State(-183));
    AddState(81,new State(new int[]{41,82,128,36,151,37,143,38,144,39,149,40,147,41,148,42,166,43,183,44,180,58,132,92,133,93,174,96,131,91,40,81,129,116,130,117,33,122,45,123,43,124,172,131},new int[]{-36,83,-4,87,-45,25,-46,26,-66,27,-59,88,-58,57,-41,89,-44,94,-54,95,-48,121,-43,79,-42,113,-60,114,-61,115,-62,118,-64,119,-63,125,-32,126,-31,127,-30,130}));
    AddState(82,new State(-184));
    AddState(83,new State(new int[]{41,84,126,85,44,86},new int[]{-37,34}));
    AddState(84,new State(-185));
    AddState(85,new State(-186));
    AddState(86,new State(-99));
    AddState(87,new State(new int[]{43,12,45,13,42,14,47,15,191,16,192,17,38,18,186,19,187,20,188,21,189,22,184,23,185,24,126,-98,41,-98,44,-98},new int[]{-65,10}));
    AddState(88,new State(-188));
    AddState(89,new State(new int[]{131,91,141,-114,43,-114,45,-114,42,-114,47,-114,191,-114,192,-114,38,-114,186,-114,187,-114,188,-114,189,-114,184,-114,185,-114,139,-114,138,-114,127,-114,126,-114,41,-114,44,-114,125,-114,173,-114,172,-114,145,-114,146,-114,140,-114,152,-114,59,-114},new int[]{-42,90}));
    AddState(90,new State(-106));
    AddState(91,new State(-108));
    AddState(92,new State(-109));
    AddState(93,new State(-110));
    AddState(94,new State(-112));
    AddState(95,new State(-132));
    AddState(96,new State(new int[]{40,97}));
    AddState(97,new State(new int[]{130,143},new int[]{-53,98,-52,152}));
    AddState(98,new State(new int[]{44,99}));
    AddState(99,new State(new int[]{123,100,130,143},new int[]{-52,142}));
    AddState(100,new State(new int[]{123,104},new int[]{-50,101}));
    AddState(101,new State(new int[]{125,102}));
    AddState(102,new State(new int[]{41,103}));
    AddState(103,new State(-131));
    AddState(104,new State(new int[]{128,36,151,37,143,38,144,39,149,40,147,41,148,42,166,43,183,44,180,58,132,92,133,93,174,96,131,91,40,81,129,116,130,117,33,122,45,123,43,124,172,131,125,-115,44,-115},new int[]{-49,105,-47,141,-46,111,-66,27,-59,88,-58,57,-48,112,-43,79,-41,89,-44,94,-54,95,-42,113,-60,114,-61,115,-62,118,-64,119,-63,125,-4,140,-45,25,-32,126,-31,127,-30,130}));
    AddState(105,new State(new int[]{125,106,44,109}));
    AddState(106,new State(new int[]{44,107,125,-120}));
    AddState(107,new State(new int[]{123,104},new int[]{-50,108}));
    AddState(108,new State(-121));
    AddState(109,new State(new int[]{128,36,151,37,143,38,144,39,149,40,147,41,148,42,166,43,183,44,180,58,132,92,133,93,174,96,131,91,40,81,129,116,130,117,33,122,45,123,43,124,172,131,125,-115,44,-115},new int[]{-47,110,-46,111,-66,27,-59,88,-58,57,-48,112,-43,79,-41,89,-44,94,-54,95,-42,113,-60,114,-61,115,-62,118,-64,119,-63,125,-4,140,-45,25,-32,126,-31,127,-30,130}));
    AddState(110,new State(-119));
    AddState(111,new State(new int[]{125,-116,44,-116,43,-113,45,-113,42,-113,47,-113,191,-113,192,-113,38,-113,186,-113,187,-113,188,-113,189,-113,184,-113,185,-113}));
    AddState(112,new State(new int[]{125,-117,44,-117,43,-163,45,-163,42,-163,47,-163,191,-163,192,-163,38,-163,186,-163,187,-163,188,-163,189,-163,184,-163,185,-163}));
    AddState(113,new State(-107));
    AddState(114,new State(-151));
    AddState(115,new State(-152));
    AddState(116,new State(-153));
    AddState(117,new State(-154));
    AddState(118,new State(-155));
    AddState(119,new State(new int[]{128,36,151,37,143,38,144,39,149,40,147,41,148,42,166,43,183,44,180,58,132,92,133,93,174,96,131,91,40,81,129,116,130,117,33,122,45,123,43,124,172,131},new int[]{-4,120,-45,25,-46,26,-66,27,-59,88,-58,57,-41,89,-44,94,-54,95,-48,121,-43,79,-42,113,-60,114,-61,115,-62,118,-64,119,-63,125,-32,126,-31,127,-30,130}));
    AddState(120,new State(new int[]{43,12,45,13,42,14,47,15,191,16,192,17,38,18,186,19,187,20,188,21,189,22,184,23,185,24,141,-165,139,-165,138,-165,127,-165,126,-165,41,-165,44,-165,125,-165,173,-165,172,-165,145,-165,146,-165,140,-165,152,-165,59,-165},new int[]{-65,10}));
    AddState(121,new State(-163));
    AddState(122,new State(-166));
    AddState(123,new State(-167));
    AddState(124,new State(-168));
    AddState(125,new State(-156));
    AddState(126,new State(-164));
    AddState(127,new State(new int[]{173,128,172,131},new int[]{-30,139}));
    AddState(128,new State(new int[]{128,36,151,37,143,38,144,39,149,40,147,41,148,42,166,43,183,44,180,58,132,92,133,93,174,96,131,91,40,81,129,116,130,117,33,122,45,123,43,124,172,131},new int[]{-4,129,-45,25,-46,26,-66,27,-59,88,-58,57,-41,89,-44,94,-54,95,-48,121,-43,79,-42,113,-60,114,-61,115,-62,118,-64,119,-63,125,-32,126,-31,127,-30,130}));
    AddState(129,new State(new int[]{43,12,45,13,42,14,47,15,191,16,192,17,38,18,186,19,187,20,188,21,189,22,184,23,185,24,141,-77,139,-77,138,-77,127,-77,126,-77,41,-77,44,-77,125,-77,173,-77,172,-77,145,-77,146,-77,140,-77,152,-77,59,-77},new int[]{-65,10}));
    AddState(130,new State(-75));
    AddState(131,new State(new int[]{126,135,132,138},new int[]{-29,132}));
    AddState(132,new State(new int[]{184,133}));
    AddState(133,new State(new int[]{128,36,151,37,143,38,144,39,149,40,147,41,148,42,166,43,183,44,180,58,132,92,133,93,174,96,131,91,40,81,129,116,130,117,33,122,45,123,43,124,172,131},new int[]{-4,134,-45,25,-46,26,-66,27,-59,88,-58,57,-41,89,-44,94,-54,95,-48,121,-43,79,-42,113,-60,114,-61,115,-62,118,-64,119,-63,125,-32,126,-31,127,-30,130}));
    AddState(134,new State(new int[]{43,12,45,13,42,14,47,15,191,16,192,17,38,18,186,19,187,20,188,21,189,22,184,23,185,24,173,-73,172,-73},new int[]{-65,10}));
    AddState(135,new State(new int[]{184,136}));
    AddState(136,new State(new int[]{128,36,151,37,143,38,144,39,149,40,147,41,148,42,166,43,183,44,180,58,132,92,133,93,174,96,131,91,40,81,129,116,130,117,33,122,45,123,43,124,172,131},new int[]{-4,137,-45,25,-46,26,-66,27,-59,88,-58,57,-41,89,-44,94,-54,95,-48,121,-43,79,-42,113,-60,114,-61,115,-62,118,-64,119,-63,125,-32,126,-31,127,-30,130}));
    AddState(137,new State(new int[]{43,12,45,13,42,14,47,15,191,16,192,17,38,18,186,19,187,20,188,21,189,22,184,23,185,24,173,-74,172,-74},new int[]{-65,10}));
    AddState(138,new State(-72));
    AddState(139,new State(-76));
    AddState(140,new State(new int[]{43,12,45,13,42,14,47,15,191,16,192,17,38,18,186,19,187,20,188,21,189,22,184,23,185,24},new int[]{-65,10}));
    AddState(141,new State(-118));
    AddState(142,new State(-130));
    AddState(143,new State(new int[]{44,144}));
    AddState(144,new State(new int[]{175,146,159,147,176,148,177,149,178,150,179,151},new int[]{-51,145}));
    AddState(145,new State(-128));
    AddState(146,new State(-122));
    AddState(147,new State(-123));
    AddState(148,new State(-124));
    AddState(149,new State(-125));
    AddState(150,new State(-126));
    AddState(151,new State(-127));
    AddState(152,new State(-129));
    AddState(153,new State(-113));
    AddState(154,new State(-114));
    AddState(155,new State(-203));
    AddState(156,new State(new int[]{41,155},new int[]{-40,157}));
    AddState(157,new State(-103));
    AddState(158,new State(new int[]{142,159}));
    AddState(159,new State(new int[]{128,36,151,37,143,38,144,39,149,40,147,41,148,42,166,43,183,44,180,58,132,92,133,93,174,96,131,91,40,81,129,116,130,117,33,122,45,123,43,124,172,131},new int[]{-8,160,-4,161,-45,25,-46,26,-66,27,-59,88,-58,57,-41,89,-44,94,-54,95,-48,121,-43,79,-42,113,-60,114,-61,115,-62,118,-64,119,-63,125,-32,126,-31,127,-30,130}));
    AddState(160,new State(-12));
    AddState(161,new State(new int[]{44,165,145,167,146,168,43,12,45,13,42,14,47,15,191,16,192,17,38,18,186,19,187,20,188,21,189,22,184,23,185,24,139,-11,138,-11,127,-11},new int[]{-7,162,-65,10}));
    AddState(162,new State(new int[]{44,163,139,-10,138,-10,127,-10}));
    AddState(163,new State(new int[]{128,36,151,37,143,38,144,39,149,40,147,41,148,42,166,43,183,44,180,58,132,92,133,93,174,96,131,91,40,81,129,116,130,117,33,122,45,123,43,124,172,131},new int[]{-8,164,-4,161,-45,25,-46,26,-66,27,-59,88,-58,57,-41,89,-44,94,-54,95,-48,121,-43,79,-42,113,-60,114,-61,115,-62,118,-64,119,-63,125,-32,126,-31,127,-30,130}));
    AddState(164,new State(-8));
    AddState(165,new State(new int[]{128,36,151,37,143,38,144,39,149,40,147,41,148,42,166,43,183,44,180,58,132,92,133,93,174,96,131,91,40,81,129,116,130,117,33,122,45,123,43,124,172,131},new int[]{-8,166,-4,161,-45,25,-46,26,-66,27,-59,88,-58,57,-41,89,-44,94,-54,95,-48,121,-43,79,-42,113,-60,114,-61,115,-62,118,-64,119,-63,125,-32,126,-31,127,-30,130}));
    AddState(166,new State(-9));
    AddState(167,new State(-6));
    AddState(168,new State(-7));
    AddState(169,new State(new int[]{132,92,133,93,128,177,174,96},new int[]{-34,170,-41,175,-44,94,-54,95}));
    AddState(170,new State(new int[]{184,171}));
    AddState(171,new State(new int[]{128,36,151,37,143,38,144,39,149,40,147,41,148,42,166,43,183,44,180,58,132,92,133,93,174,96,131,91,40,81,129,116,130,117,33,122,45,123,43,124,172,131},new int[]{-35,172,-4,174,-45,25,-46,26,-66,27,-59,88,-58,57,-41,89,-44,94,-54,95,-48,121,-43,79,-42,113,-60,114,-61,115,-62,118,-64,119,-63,125,-32,126,-31,127,-30,130}));
    AddState(172,new State(new int[]{140,169,138,-95},new int[]{-11,173}));
    AddState(173,new State(-96));
    AddState(174,new State(new int[]{43,12,45,13,42,14,47,15,191,16,192,17,38,18,186,19,187,20,188,21,189,22,184,23,185,24,140,-148,138,-148},new int[]{-65,10}));
    AddState(175,new State(new int[]{131,91},new int[]{-42,176}));
    AddState(176,new State(-105));
    AddState(177,new State(-111));
    AddState(178,new State(new int[]{128,36,151,37,143,38,144,39,149,40,147,41,148,42,166,43,183,44,180,58,132,92,133,93,174,96,131,91,40,81,129,116,130,117,33,122,45,123,43,124,172,131},new int[]{-4,179,-45,25,-46,26,-66,27,-59,88,-58,57,-41,89,-44,94,-54,95,-48,121,-43,79,-42,113,-60,114,-61,115,-62,118,-64,119,-63,125,-32,126,-31,127,-30,130}));
    AddState(179,new State(new int[]{141,158,43,12,45,13,42,14,47,15,191,16,192,17,38,18,186,19,187,20,188,21,189,22,184,23,185,24,139,-18,138,-18,127,-18},new int[]{-9,180,-65,10}));
    AddState(180,new State(-17));
    AddState(181,new State(-13));
    AddState(182,new State(new int[]{128,36,151,37,143,38,144,39,149,40,147,41,148,42,166,43,183,44,180,58,132,92,133,93,174,96,131,91,40,81,129,116,130,117,33,122,45,123,43,124,172,131},new int[]{-4,183,-45,25,-46,26,-66,27,-59,88,-58,57,-41,89,-44,94,-54,95,-48,121,-43,79,-42,113,-60,114,-61,115,-62,118,-64,119,-63,125,-32,126,-31,127,-30,130}));
    AddState(183,new State(new int[]{43,12,45,13,42,14,47,15,191,16,192,17,38,18,186,19,187,20,188,21,189,22,184,23,185,24,127,-3},new int[]{-65,10}));
    AddState(184,new State(-4));
    AddState(185,new State(new int[]{59,186,127,-19}));
    AddState(186,new State(new int[]{150,188,151,281,137,285,127,-20},new int[]{-5,187,-12,185,-13,274,-14,275,-15,278,-16,282}));
    AddState(187,new State(-21));
    AddState(188,new State(new int[]{140,189,168,272,136,273}));
    AddState(189,new State(new int[]{126,259,132,270,131,271,133,93,128,177,174,96},new int[]{-17,190,-18,266,-41,257,-44,94,-54,95}));
    AddState(190,new State(new int[]{46,191}));
    AddState(191,new State(new int[]{132,92,133,93,128,177,174,96},new int[]{-18,192,-41,257,-44,94,-54,95}));
    AddState(192,new State(new int[]{184,193}));
    AddState(193,new State(new int[]{128,36,151,37,143,38,144,39,149,40,147,41,148,42,166,43,183,44,180,58,132,92,133,93,174,96,131,91,40,81,129,116,130,117,33,122,45,123,43,124,172,131},new int[]{-19,194,-4,256,-45,25,-46,26,-66,27,-59,88,-58,57,-41,89,-44,94,-54,95,-48,121,-43,79,-42,113,-60,114,-61,115,-62,118,-64,119,-63,125,-32,126,-31,127,-30,130}));
    AddState(194,new State(new int[]{152,196,59,-35,127,-35},new int[]{-20,195}));
    AddState(195,new State(-36));
    AddState(196,new State(new int[]{153,197}));
    AddState(197,new State(new int[]{126,245,154,246,155,247,156,248,157,249,158,250,159,251,160,252,161,253,162,254,163,255},new int[]{-21,198}));
    AddState(198,new State(new int[]{169,202,164,210,165,217,166,225,167,230,170,235,171,241,59,-92,127,-92},new int[]{-33,199,-23,200,-22,208,-26,215,-27,223,-28,228,-24,233,-25,239}));
    AddState(199,new State(-94));
    AddState(200,new State(new int[]{169,202,164,210,165,217,166,225,167,230,170,235,171,241,59,-78,127,-78},new int[]{-33,201,-23,200,-22,208,-26,215,-27,223,-28,228,-24,233,-25,239}));
    AddState(201,new State(-79));
    AddState(202,new State(new int[]{184,203,126,207}));
    AddState(203,new State(new int[]{143,204,144,205,126,206}));
    AddState(204,new State(-58));
    AddState(205,new State(-59));
    AddState(206,new State(-61));
    AddState(207,new State(-60));
    AddState(208,new State(new int[]{169,202,164,210,165,217,166,225,167,230,170,235,171,241,59,-80,127,-80},new int[]{-33,209,-23,200,-22,208,-26,215,-27,223,-28,228,-24,233,-25,239}));
    AddState(209,new State(-81));
    AddState(210,new State(new int[]{184,211,126,214}));
    AddState(211,new State(new int[]{129,212,126,213}));
    AddState(212,new State(-55));
    AddState(213,new State(-57));
    AddState(214,new State(-56));
    AddState(215,new State(new int[]{169,202,164,210,165,217,166,225,167,230,170,235,171,241,59,-82,127,-82},new int[]{-33,216,-23,200,-22,208,-26,215,-27,223,-28,228,-24,233,-25,239}));
    AddState(216,new State(-83));
    AddState(217,new State(new int[]{184,218,126,222}));
    AddState(218,new State(new int[]{143,219,144,220,126,221}));
    AddState(219,new State(-66));
    AddState(220,new State(-67));
    AddState(221,new State(-69));
    AddState(222,new State(-68));
    AddState(223,new State(new int[]{169,202,164,210,165,217,166,225,167,230,170,235,171,241,59,-84,127,-84},new int[]{-33,224,-23,200,-22,208,-26,215,-27,223,-28,228,-24,233,-25,239}));
    AddState(224,new State(-85));
    AddState(225,new State(new int[]{184,226}));
    AddState(226,new State(new int[]{133,227}));
    AddState(227,new State(-70));
    AddState(228,new State(new int[]{169,202,164,210,165,217,166,225,167,230,170,235,171,241,59,-86,127,-86},new int[]{-33,229,-23,200,-22,208,-26,215,-27,223,-28,228,-24,233,-25,239}));
    AddState(229,new State(-87));
    AddState(230,new State(new int[]{184,231}));
    AddState(231,new State(new int[]{133,232}));
    AddState(232,new State(-71));
    AddState(233,new State(new int[]{169,202,164,210,165,217,166,225,167,230,170,235,171,241,59,-88,127,-88},new int[]{-33,234,-23,200,-22,208,-26,215,-27,223,-28,228,-24,233,-25,239}));
    AddState(234,new State(-89));
    AddState(235,new State(new int[]{184,236,126,238}));
    AddState(236,new State(new int[]{133,237}));
    AddState(237,new State(-62));
    AddState(238,new State(-63));
    AddState(239,new State(new int[]{169,202,164,210,165,217,166,225,167,230,170,235,171,241,59,-90,127,-90},new int[]{-33,240,-23,200,-22,208,-26,215,-27,223,-28,228,-24,233,-25,239}));
    AddState(240,new State(-91));
    AddState(241,new State(new int[]{184,242,126,244}));
    AddState(242,new State(new int[]{133,243}));
    AddState(243,new State(-64));
    AddState(244,new State(-65));
    AddState(245,new State(-93));
    AddState(246,new State(-45));
    AddState(247,new State(-46));
    AddState(248,new State(-47));
    AddState(249,new State(-48));
    AddState(250,new State(-49));
    AddState(251,new State(-50));
    AddState(252,new State(-51));
    AddState(253,new State(-52));
    AddState(254,new State(-53));
    AddState(255,new State(-54));
    AddState(256,new State(new int[]{43,12,45,13,42,14,47,15,191,16,192,17,38,18,186,19,187,20,188,21,189,22,184,23,185,24,152,-147,59,-147,127,-147},new int[]{-65,10}));
    AddState(257,new State(new int[]{131,91},new int[]{-42,258}));
    AddState(258,new State(-104));
    AddState(259,new State(new int[]{46,260,184,264}));
    AddState(260,new State(new int[]{132,92,133,93,128,177,174,96},new int[]{-18,261,-41,257,-44,94,-54,95}));
    AddState(261,new State(new int[]{184,262}));
    AddState(262,new State(new int[]{128,36,151,37,143,38,144,39,149,40,147,41,148,42,166,43,183,44,180,58,132,92,133,93,174,96,131,91,40,81,129,116,130,117,33,122,45,123,43,124,172,131},new int[]{-19,263,-4,256,-45,25,-46,26,-66,27,-59,88,-58,57,-41,89,-44,94,-54,95,-48,121,-43,79,-42,113,-60,114,-61,115,-62,118,-64,119,-63,125,-32,126,-31,127,-30,130}));
    AddState(263,new State(-37));
    AddState(264,new State(new int[]{128,36,151,37,143,38,144,39,149,40,147,41,148,42,166,43,183,44,180,58,132,92,133,93,174,96,131,91,40,81,129,116,130,117,33,122,45,123,43,124,172,131},new int[]{-19,265,-4,256,-45,25,-46,26,-66,27,-59,88,-58,57,-41,89,-44,94,-54,95,-48,121,-43,79,-42,113,-60,114,-61,115,-62,118,-64,119,-63,125,-32,126,-31,127,-30,130}));
    AddState(265,new State(-40));
    AddState(266,new State(new int[]{184,267}));
    AddState(267,new State(new int[]{128,36,151,37,143,38,144,39,149,40,147,41,148,42,166,43,183,44,180,58,132,92,133,93,174,96,131,91,40,81,129,116,130,117,33,122,45,123,43,124,172,131},new int[]{-19,268,-4,256,-45,25,-46,26,-66,27,-59,88,-58,57,-41,89,-44,94,-54,95,-48,121,-43,79,-42,113,-60,114,-61,115,-62,118,-64,119,-63,125,-32,126,-31,127,-30,130}));
    AddState(268,new State(new int[]{152,196,59,-38,127,-38},new int[]{-20,269}));
    AddState(269,new State(-39));
    AddState(270,new State(new int[]{46,-33,131,-109}));
    AddState(271,new State(-34));
    AddState(272,new State(-41));
    AddState(273,new State(-42));
    AddState(274,new State(-22));
    AddState(275,new State(new int[]{59,276,127,-23}));
    AddState(276,new State(new int[]{150,188,151,281,137,285,127,-24},new int[]{-5,277,-12,185,-13,274,-14,275,-15,278,-16,282}));
    AddState(277,new State(-25));
    AddState(278,new State(new int[]{59,279,127,-26}));
    AddState(279,new State(new int[]{150,188,151,281,137,285,127,-27},new int[]{-5,280,-12,185,-13,274,-14,275,-15,278,-16,282}));
    AddState(280,new State(-28));
    AddState(281,new State(-43));
    AddState(282,new State(new int[]{59,283,127,-29}));
    AddState(283,new State(new int[]{150,188,151,281,137,285,127,-30},new int[]{-5,284,-12,185,-13,274,-14,275,-15,278,-16,282}));
    AddState(284,new State(-31));
    AddState(285,new State(-44));
    AddState(286,new State(-5));
    AddState(287,new State(-32));

    rules=new Rule[204];
    rules[1]=new Rule(-2, new int[]{-1,127});
    rules[2]=new Rule(-1, new int[]{-3});
    rules[3]=new Rule(-1, new int[]{184,-4});
    rules[4]=new Rule(-1, new int[]{-5});
    rules[5]=new Rule(-1, new int[]{-6});
    rules[6]=new Rule(-7, new int[]{145});
    rules[7]=new Rule(-7, new int[]{146});
    rules[8]=new Rule(-8, new int[]{-4,-7,44,-8});
    rules[9]=new Rule(-8, new int[]{-4,44,-8});
    rules[10]=new Rule(-8, new int[]{-4,-7});
    rules[11]=new Rule(-8, new int[]{-4});
    rules[12]=new Rule(-9, new int[]{141,142,-8});
    rules[13]=new Rule(-3, new int[]{-10});
    rules[14]=new Rule(-3, new int[]{-3,-10});
    rules[15]=new Rule(-10, new int[]{139,-11,138,-4,-9});
    rules[16]=new Rule(-10, new int[]{139,-11,138,-4});
    rules[17]=new Rule(-10, new int[]{138,-4,-9});
    rules[18]=new Rule(-10, new int[]{138,-4});
    rules[19]=new Rule(-5, new int[]{-12});
    rules[20]=new Rule(-5, new int[]{-12,59});
    rules[21]=new Rule(-5, new int[]{-12,59,-5});
    rules[22]=new Rule(-5, new int[]{-13});
    rules[23]=new Rule(-5, new int[]{-14});
    rules[24]=new Rule(-5, new int[]{-14,59});
    rules[25]=new Rule(-5, new int[]{-14,59,-5});
    rules[26]=new Rule(-5, new int[]{-15});
    rules[27]=new Rule(-5, new int[]{-15,59});
    rules[28]=new Rule(-5, new int[]{-15,59,-5});
    rules[29]=new Rule(-5, new int[]{-16});
    rules[30]=new Rule(-5, new int[]{-16,59});
    rules[31]=new Rule(-5, new int[]{-16,59,-5});
    rules[32]=new Rule(-6, new int[]{127});
    rules[33]=new Rule(-17, new int[]{132});
    rules[34]=new Rule(-17, new int[]{131});
    rules[35]=new Rule(-12, new int[]{150,140,-17,46,-18,184,-19});
    rules[36]=new Rule(-12, new int[]{150,140,-17,46,-18,184,-19,-20});
    rules[37]=new Rule(-12, new int[]{150,140,126,46,-18,184,-19});
    rules[38]=new Rule(-12, new int[]{150,140,-18,184,-19});
    rules[39]=new Rule(-12, new int[]{150,140,-18,184,-19,-20});
    rules[40]=new Rule(-12, new int[]{150,140,126,184,-19});
    rules[41]=new Rule(-13, new int[]{150,168});
    rules[42]=new Rule(-14, new int[]{150,136});
    rules[43]=new Rule(-15, new int[]{151});
    rules[44]=new Rule(-16, new int[]{137});
    rules[45]=new Rule(-21, new int[]{154});
    rules[46]=new Rule(-21, new int[]{155});
    rules[47]=new Rule(-21, new int[]{156});
    rules[48]=new Rule(-21, new int[]{157});
    rules[49]=new Rule(-21, new int[]{158});
    rules[50]=new Rule(-21, new int[]{159});
    rules[51]=new Rule(-21, new int[]{160});
    rules[52]=new Rule(-21, new int[]{161});
    rules[53]=new Rule(-21, new int[]{162});
    rules[54]=new Rule(-21, new int[]{163});
    rules[55]=new Rule(-22, new int[]{164,184,129});
    rules[56]=new Rule(-22, new int[]{164,126});
    rules[57]=new Rule(-22, new int[]{164,184,126});
    rules[58]=new Rule(-23, new int[]{169,184,143});
    rules[59]=new Rule(-23, new int[]{169,184,144});
    rules[60]=new Rule(-23, new int[]{169,126});
    rules[61]=new Rule(-23, new int[]{169,184,126});
    rules[62]=new Rule(-24, new int[]{170,184,133});
    rules[63]=new Rule(-24, new int[]{170,126});
    rules[64]=new Rule(-25, new int[]{171,184,133});
    rules[65]=new Rule(-25, new int[]{171,126});
    rules[66]=new Rule(-26, new int[]{165,184,143});
    rules[67]=new Rule(-26, new int[]{165,184,144});
    rules[68]=new Rule(-26, new int[]{165,126});
    rules[69]=new Rule(-26, new int[]{165,184,126});
    rules[70]=new Rule(-27, new int[]{166,184,133});
    rules[71]=new Rule(-28, new int[]{167,184,133});
    rules[72]=new Rule(-29, new int[]{132});
    rules[73]=new Rule(-30, new int[]{172,-29,184,-4});
    rules[74]=new Rule(-30, new int[]{172,126,184,-4});
    rules[75]=new Rule(-31, new int[]{-30});
    rules[76]=new Rule(-31, new int[]{-31,-30});
    rules[77]=new Rule(-32, new int[]{-31,173,-4});
    rules[78]=new Rule(-33, new int[]{-23});
    rules[79]=new Rule(-33, new int[]{-23,-33});
    rules[80]=new Rule(-33, new int[]{-22});
    rules[81]=new Rule(-33, new int[]{-22,-33});
    rules[82]=new Rule(-33, new int[]{-26});
    rules[83]=new Rule(-33, new int[]{-26,-33});
    rules[84]=new Rule(-33, new int[]{-27});
    rules[85]=new Rule(-33, new int[]{-27,-33});
    rules[86]=new Rule(-33, new int[]{-28});
    rules[87]=new Rule(-33, new int[]{-28,-33});
    rules[88]=new Rule(-33, new int[]{-24});
    rules[89]=new Rule(-33, new int[]{-24,-33});
    rules[90]=new Rule(-33, new int[]{-25});
    rules[91]=new Rule(-33, new int[]{-25,-33});
    rules[92]=new Rule(-20, new int[]{152,153,-21});
    rules[93]=new Rule(-20, new int[]{152,153,126});
    rules[94]=new Rule(-20, new int[]{152,153,-21,-33});
    rules[95]=new Rule(-11, new int[]{140,-34,184,-35});
    rules[96]=new Rule(-11, new int[]{140,-34,184,-35,-11});
    rules[97]=new Rule(-36, new int[]{-36,-37,-4});
    rules[98]=new Rule(-36, new int[]{-4});
    rules[99]=new Rule(-37, new int[]{44});
    rules[100]=new Rule(-38, new int[]{-39,-40});
    rules[101]=new Rule(-38, new int[]{-39,-36,-40});
    rules[102]=new Rule(-38, new int[]{-39,-36,126});
    rules[103]=new Rule(-38, new int[]{-39,126,-40});
    rules[104]=new Rule(-18, new int[]{-41,-42});
    rules[105]=new Rule(-34, new int[]{-41,-42});
    rules[106]=new Rule(-43, new int[]{-41,-42});
    rules[107]=new Rule(-43, new int[]{-42});
    rules[108]=new Rule(-42, new int[]{131});
    rules[109]=new Rule(-41, new int[]{132});
    rules[110]=new Rule(-41, new int[]{133});
    rules[111]=new Rule(-41, new int[]{128});
    rules[112]=new Rule(-41, new int[]{-44});
    rules[113]=new Rule(-45, new int[]{-46});
    rules[114]=new Rule(-45, new int[]{-41});
    rules[115]=new Rule(-47, new int[]{});
    rules[116]=new Rule(-47, new int[]{-46});
    rules[117]=new Rule(-47, new int[]{-48});
    rules[118]=new Rule(-49, new int[]{-47});
    rules[119]=new Rule(-49, new int[]{-49,44,-47});
    rules[120]=new Rule(-50, new int[]{123,-49,125});
    rules[121]=new Rule(-50, new int[]{123,-49,125,44,-50});
    rules[122]=new Rule(-51, new int[]{175});
    rules[123]=new Rule(-51, new int[]{159});
    rules[124]=new Rule(-51, new int[]{176});
    rules[125]=new Rule(-51, new int[]{177});
    rules[126]=new Rule(-51, new int[]{178});
    rules[127]=new Rule(-51, new int[]{179});
    rules[128]=new Rule(-52, new int[]{130,44,-51});
    rules[129]=new Rule(-53, new int[]{-52});
    rules[130]=new Rule(-53, new int[]{-53,44,-52});
    rules[131]=new Rule(-54, new int[]{174,40,-53,44,123,-50,125,41});
    rules[132]=new Rule(-44, new int[]{-54});
    rules[133]=new Rule(-55, new int[]{});
    rules[134]=new Rule(-55, new int[]{181});
    rules[135]=new Rule(-55, new int[]{182});
    rules[136]=new Rule(-56, new int[]{});
    rules[137]=new Rule(-56, new int[]{129});
    rules[138]=new Rule(-56, new int[]{143});
    rules[139]=new Rule(-56, new int[]{144});
    rules[140]=new Rule(-57, new int[]{});
    rules[141]=new Rule(-57, new int[]{-48});
    rules[142]=new Rule(-58, new int[]{180,40,-45,44,-48,41});
    rules[143]=new Rule(-58, new int[]{180,40,-45,44,-48,44,-57,41});
    rules[144]=new Rule(-58, new int[]{180,40,-45,44,-48,44,-57,44,-56,41});
    rules[145]=new Rule(-58, new int[]{180,40,-45,44,-48,44,-57,44,-56,44,-55,41});
    rules[146]=new Rule(-59, new int[]{-58});
    rules[147]=new Rule(-19, new int[]{-4});
    rules[148]=new Rule(-35, new int[]{-4});
    rules[149]=new Rule(-48, new int[]{-43});
    rules[150]=new Rule(-48, new int[]{-46});
    rules[151]=new Rule(-48, new int[]{-60});
    rules[152]=new Rule(-48, new int[]{-61});
    rules[153]=new Rule(-48, new int[]{129});
    rules[154]=new Rule(-48, new int[]{130});
    rules[155]=new Rule(-48, new int[]{-62});
    rules[156]=new Rule(-48, new int[]{-63});
    rules[157]=new Rule(-48, new int[]{143});
    rules[158]=new Rule(-48, new int[]{144});
    rules[159]=new Rule(-48, new int[]{147});
    rules[160]=new Rule(-48, new int[]{148});
    rules[161]=new Rule(-48, new int[]{149});
    rules[162]=new Rule(-4, new int[]{-45});
    rules[163]=new Rule(-4, new int[]{-48});
    rules[164]=new Rule(-4, new int[]{-32});
    rules[165]=new Rule(-62, new int[]{-64,-4});
    rules[166]=new Rule(-64, new int[]{33});
    rules[167]=new Rule(-64, new int[]{45});
    rules[168]=new Rule(-64, new int[]{43});
    rules[169]=new Rule(-63, new int[]{-4,-65,-4});
    rules[170]=new Rule(-65, new int[]{43});
    rules[171]=new Rule(-65, new int[]{45});
    rules[172]=new Rule(-65, new int[]{42});
    rules[173]=new Rule(-65, new int[]{47});
    rules[174]=new Rule(-65, new int[]{191});
    rules[175]=new Rule(-65, new int[]{192});
    rules[176]=new Rule(-65, new int[]{38});
    rules[177]=new Rule(-65, new int[]{186});
    rules[178]=new Rule(-65, new int[]{187});
    rules[179]=new Rule(-65, new int[]{188});
    rules[180]=new Rule(-65, new int[]{189});
    rules[181]=new Rule(-65, new int[]{184});
    rules[182]=new Rule(-65, new int[]{185});
    rules[183]=new Rule(-61, new int[]{-43,-60});
    rules[184]=new Rule(-60, new int[]{40,41});
    rules[185]=new Rule(-60, new int[]{40,-36,41});
    rules[186]=new Rule(-60, new int[]{40,-36,126});
    rules[187]=new Rule(-46, new int[]{-66,-67});
    rules[188]=new Rule(-46, new int[]{-59});
    rules[189]=new Rule(-46, new int[]{183,-66,-67});
    rules[190]=new Rule(-46, new int[]{183,-59});
    rules[191]=new Rule(-66, new int[]{128});
    rules[192]=new Rule(-66, new int[]{151});
    rules[193]=new Rule(-66, new int[]{143});
    rules[194]=new Rule(-66, new int[]{144});
    rules[195]=new Rule(-66, new int[]{149});
    rules[196]=new Rule(-66, new int[]{147});
    rules[197]=new Rule(-66, new int[]{148});
    rules[198]=new Rule(-66, new int[]{166});
    rules[199]=new Rule(-66, new int[]{183});
    rules[200]=new Rule(-67, new int[]{-39});
    rules[201]=new Rule(-67, new int[]{-38});
    rules[202]=new Rule(-39, new int[]{40});
    rules[203]=new Rule(-40, new int[]{41});

    nonTerminals = new string[] {"", "Start", "$accept", "DaxQueries", 
      "Expression", "DaxScript", "Empty", "Order", "OrderByList", "OrderBy", 
      "DaxQuery", "Definitions", "CreateMeasure", "CreateKpi", "CreateMember", 
      "Calculate", "Alter", "CubeName", "MeasureName", "MeasureExpression", "CalculationProperty", 
      "CalculationPropertyFormatType", "CalculationPropertyAccuracy", "CalculationPropertyVisible", 
      "CalculationPropertyDescription", "CalculationPropertyDisplayFolder", "CalculationPropertyThousandSeparator", 
      "CalculationPropertyFormat", "CalculationPropertyAdditionalInfo", "VarName", 
      "VarDeclaration", "VarDeclarations", "VarExpression", "CalculationPropertyParams", 
      "QueryMeasureName", "QueryMeasureExpression", "Params1", "ParamSeparator", 
      "ParenthesisParameters", "StartArg", "EndArg", "TableRef", "ColumnRef", 
      "ColMeasureRef", "DataTableFunction", "TableExpression", "FunctionCall", 
      "DataTableValue", "ScalarExpression", "DataTableValues", "DataTableRows", 
      "DataTableColumnType", "DataTableColumn", "DataTableColumns", "DataTable", 
      "RankXTies", "RankXOrder", "RankXValue", "RankX", "RankXFunction", "ParenthesisExpression", 
      "CalculateShortcut", "UnaryExpression", "BinaryExpression", "UnaryOperator", 
      "BinaryOperator", "FunctionName", "FunctionArgs", };
  }

  protected override void DoAction(int action)
  {
    switch (action)
    {
      case 35: // CreateMeasure -> KWCREATE KWMEASURE CubeName '.' MeasureName EQ MeasureExpression 
#line 140 "../../GeneratorSource/parser.y"
			{ SpecifyFullMeasureText(location_stack.array[location_stack.top-7], location_stack.array[location_stack.top-1]); }
        break;
      case 36: // CreateMeasure -> KWCREATE KWMEASURE CubeName '.' MeasureName EQ MeasureExpression CalculationProperty 
#line 142 "../../GeneratorSource/parser.y"
			{ SpecifyFullMeasureText(location_stack.array[location_stack.top-8], location_stack.array[location_stack.top-2]); }
        break;
      case 37: // CreateMeasure -> KWCREATE KWMEASURE error '.' MeasureName EQ MeasureExpression 
#line 143 "../../GeneratorSource/parser.y"
			{ CallHdlr("Cube name expected before '.'", location_stack.array[location_stack.top-5]); }
        break;
      case 38: // CreateMeasure -> KWCREATE KWMEASURE MeasureName EQ MeasureExpression 
#line 144 "../../GeneratorSource/parser.y"
			{ SpecifyFullMeasureText(location_stack.array[location_stack.top-5], location_stack.array[location_stack.top-1]); }
        break;
      case 39: // CreateMeasure -> KWCREATE KWMEASURE MeasureName EQ MeasureExpression CalculationProperty 
#line 146 "../../GeneratorSource/parser.y"
			{ SpecifyFullMeasureText(location_stack.array[location_stack.top-6], location_stack.array[location_stack.top-2]); }
        break;
      case 40: // CreateMeasure -> KWCREATE KWMEASURE error EQ MeasureExpression 
#line 147 "../../GeneratorSource/parser.y"
			{ CallHdlr("Measure name expected", location_stack.array[location_stack.top-3]); }
        break;
      case 41: // CreateKpi -> KWCREATE KWKPI 
#line 151 "../../GeneratorSource/parser.y"
			{ CallHdlr("KPI are not yet supported", location_stack.array[location_stack.top-1]); }
        break;
      case 45: // CalculationPropertyFormatType -> KWGENERAL 
#line 167 "../../GeneratorSource/parser.y"
			{ SpecifyCalculationProperty(location_stack.array[location_stack.top-1]); }
        break;
      case 46: // CalculationPropertyFormatType -> KWNUMBERDECIMAL 
#line 168 "../../GeneratorSource/parser.y"
			{ SpecifyCalculationProperty(location_stack.array[location_stack.top-1]); }
        break;
      case 47: // CalculationPropertyFormatType -> KWNUMBERWHOLE 
#line 169 "../../GeneratorSource/parser.y"
			{ SpecifyCalculationProperty(location_stack.array[location_stack.top-1]); }
        break;
      case 48: // CalculationPropertyFormatType -> KWPERCENTAGE 
#line 170 "../../GeneratorSource/parser.y"
			{ SpecifyCalculationProperty(location_stack.array[location_stack.top-1]); }
        break;
      case 49: // CalculationPropertyFormatType -> KWSCIENTIFIC 
#line 171 "../../GeneratorSource/parser.y"
			{ SpecifyCalculationProperty(location_stack.array[location_stack.top-1]); }
        break;
      case 50: // CalculationPropertyFormatType -> KWCURRENCY 
#line 172 "../../GeneratorSource/parser.y"
			{ SpecifyCalculationProperty(location_stack.array[location_stack.top-1]); }
        break;
      case 51: // CalculationPropertyFormatType -> KWDATETIMECUSTOM 
#line 173 "../../GeneratorSource/parser.y"
			{ SpecifyCalculationProperty(location_stack.array[location_stack.top-1]); }
        break;
      case 52: // CalculationPropertyFormatType -> KWDATETIMESHORTDATEPATTERN 
#line 174 "../../GeneratorSource/parser.y"
			{ SpecifyCalculationProperty(location_stack.array[location_stack.top-1]); }
        break;
      case 53: // CalculationPropertyFormatType -> KWDATETIMEGENERAL 
#line 175 "../../GeneratorSource/parser.y"
			{ SpecifyCalculationProperty(location_stack.array[location_stack.top-1]); }
        break;
      case 54: // CalculationPropertyFormatType -> KWTEXT 
#line 176 "../../GeneratorSource/parser.y"
			{ SpecifyCalculationProperty(location_stack.array[location_stack.top-1]); }
        break;
      case 55: // CalculationPropertyAccuracy -> KWACCURACY EQ NUMBER 
#line 180 "../../GeneratorSource/parser.y"
			{ SpecifyCalcPropAccuracy(location_stack.array[location_stack.top-1]); }
        break;
      case 56: // CalculationPropertyAccuracy -> KWACCURACY error 
#line 181 "../../GeneratorSource/parser.y"
			{ CallHdlr("'=' is not specified", location_stack.array[location_stack.top-1]); }
        break;
      case 57: // CalculationPropertyAccuracy -> KWACCURACY EQ error 
#line 182 "../../GeneratorSource/parser.y"
			{ CallHdlr("Value of Accuracy is not a number", location_stack.array[location_stack.top-1]); }
        break;
      case 58: // CalculationPropertyVisible -> KWVISIBLE EQ KWTRUE 
#line 186 "../../GeneratorSource/parser.y"
			{ SpecifyCalcPropVisible(true); }
        break;
      case 59: // CalculationPropertyVisible -> KWVISIBLE EQ KWFALSE 
#line 187 "../../GeneratorSource/parser.y"
			{ SpecifyCalcPropVisible(false); }
        break;
      case 60: // CalculationPropertyVisible -> KWVISIBLE error 
#line 188 "../../GeneratorSource/parser.y"
			{ CallHdlr("'=' is not specified", location_stack.array[location_stack.top-1]); }
        break;
      case 61: // CalculationPropertyVisible -> KWVISIBLE EQ error 
#line 189 "../../GeneratorSource/parser.y"
			{ CallHdlr("Visible can be either TRUE or FALSE", location_stack.array[location_stack.top-1]); }
        break;
      case 62: // CalculationPropertyDescription -> KWDESCRIPTION EQ ESCAPEDTABLENAME 
#line 193 "../../GeneratorSource/parser.y"
			{ SpecifyCalcPropDescription(location_stack.array[location_stack.top-1]);  }
        break;
      case 63: // CalculationPropertyDescription -> KWDESCRIPTION error 
#line 194 "../../GeneratorSource/parser.y"
			{ CallHdlr("'=' is not specified", location_stack.array[location_stack.top-1]); }
        break;
      case 64: // CalculationPropertyDisplayFolder -> KWDISPLAYFOLDER EQ ESCAPEDTABLENAME 
#line 198 "../../GeneratorSource/parser.y"
			{ SpecifyCalcPropDisplayFolder(location_stack.array[location_stack.top-1]);  }
        break;
      case 65: // CalculationPropertyDisplayFolder -> KWDISPLAYFOLDER error 
#line 199 "../../GeneratorSource/parser.y"
			{ CallHdlr("'=' is not specified", location_stack.array[location_stack.top-1]); }
        break;
      case 66: // CalculationPropertyThousandSeparator -> KWTHOUSANDSEPARATOR EQ KWTRUE 
#line 203 "../../GeneratorSource/parser.y"
			{ SpecifyCalcPropThousandSeparator(true); }
        break;
      case 67: // CalculationPropertyThousandSeparator -> KWTHOUSANDSEPARATOR EQ KWFALSE 
#line 204 "../../GeneratorSource/parser.y"
			{ SpecifyCalcPropThousandSeparator(false); }
        break;
      case 68: // CalculationPropertyThousandSeparator -> KWTHOUSANDSEPARATOR error 
#line 205 "../../GeneratorSource/parser.y"
			{ CallHdlr("'=' is not specified", location_stack.array[location_stack.top-1]); }
        break;
      case 69: // CalculationPropertyThousandSeparator -> KWTHOUSANDSEPARATOR EQ error 
#line 206 "../../GeneratorSource/parser.y"
			{ CallHdlr("ThousandSeparator can be either TRUE or FALSE", location_stack.array[location_stack.top-1]); }
        break;
      case 70: // CalculationPropertyFormat -> KWFORMAT EQ ESCAPEDTABLENAME 
#line 210 "../../GeneratorSource/parser.y"
			{ SpecifyCalcPropFormat(location_stack.array[location_stack.top-1]); }
        break;
      case 71: // CalculationPropertyAdditionalInfo -> KWADDITIONALINFO EQ ESCAPEDTABLENAME 
#line 214 "../../GeneratorSource/parser.y"
			{ SpecifyCalcPropAdditionalInfo(location_stack.array[location_stack.top-1]); }
        break;
      case 74: // VarDeclaration -> KWVAR error EQ Expression 
#line 223 "../../GeneratorSource/parser.y"
			{ CallHdlr("Var name expected", location_stack.array[location_stack.top-3]); }
        break;
      case 93: // CalculationProperty -> KWCALCULATION KWPROPERTY error 
#line 253 "../../GeneratorSource/parser.y"
			{ CallHdlr("Wrong calculation property type.  Expected types: General, NumberDecimal, NumberWhole, Percentage, Scientific, Currency, DateTimeCustom, Visible, Description, DisplayFolder", location_stack.array[location_stack.top-2]); }
        break;
      case 99: // ParamSeparator -> ',' 
#line 268 "../../GeneratorSource/parser.y"
			{ NextParameter(location_stack.array[location_stack.top-1]); }
        break;
      case 100: // ParenthesisParameters -> StartArg EndArg 
#line 272 "../../GeneratorSource/parser.y"
			{ Match(location_stack.array[location_stack.top-2], location_stack.array[location_stack.top-1]); }
        break;
      case 101: // ParenthesisParameters -> StartArg Params1 EndArg 
#line 273 "../../GeneratorSource/parser.y"
			{ Match(location_stack.array[location_stack.top-3], location_stack.array[location_stack.top-1]); }
        break;
      case 102: // ParenthesisParameters -> StartArg Params1 error 
#line 274 "../../GeneratorSource/parser.y"
			{ CallHdlr("unmatched parentheses", location_stack.array[location_stack.top-1]); }
        break;
      case 103: // ParenthesisParameters -> StartArg error EndArg 
#line 275 "../../GeneratorSource/parser.y"
			{ yyval = value_stack.array[value_stack.top-1];
                                             CallHdlr("error in parameters", location_stack.array[location_stack.top-2]); }
        break;
      case 104: // MeasureName -> TableRef ColumnRef 
#line 280 "../../GeneratorSource/parser.y"
			{ CreateNewMeasure(location_stack.array[location_stack.top-2], location_stack.array[location_stack.top-1]); }
        break;
      case 132: // DataTableFunction -> DataTable 
#line 347 "../../GeneratorSource/parser.y"
			{ StartFunction(location_stack.array[location_stack.top-1], value_stack.array[value_stack.top-1].str); }
        break;
      case 146: // RankXFunction -> RankX 
#line 376 "../../GeneratorSource/parser.y"
			{ StartFunction(location_stack.array[location_stack.top-1], value_stack.array[value_stack.top-1].str); }
        break;
      case 147: // MeasureExpression -> Expression 
#line 380 "../../GeneratorSource/parser.y"
			{ SpecifyMeasureExpression(location_stack.array[location_stack.top-1]); }
        break;
      case 184: // ParenthesisExpression -> '(' ')' 
#line 431 "../../GeneratorSource/parser.y"
			{ Match(location_stack.array[location_stack.top-2], location_stack.array[location_stack.top-1]); }
        break;
      case 185: // ParenthesisExpression -> '(' Params1 ')' 
#line 432 "../../GeneratorSource/parser.y"
			{ Match(location_stack.array[location_stack.top-3], location_stack.array[location_stack.top-1]); }
        break;
      case 186: // ParenthesisExpression -> '(' Params1 error 
#line 433 "../../GeneratorSource/parser.y"
			{ CallHdlr("unmatched parentheses", location_stack.array[location_stack.top-1]); }
        break;
      case 191: // FunctionName -> FUNCTION 
#line 444 "../../GeneratorSource/parser.y"
			{ StartFunction(location_stack.array[location_stack.top-1], value_stack.array[value_stack.top-1].str); }
        break;
      case 192: // FunctionName -> KWCALCULATE 
#line 445 "../../GeneratorSource/parser.y"
			{ StartFunction(location_stack.array[location_stack.top-1], value_stack.array[value_stack.top-1].str); }
        break;
      case 193: // FunctionName -> KWTRUE 
#line 446 "../../GeneratorSource/parser.y"
			{ StartFunction(location_stack.array[location_stack.top-1], value_stack.array[value_stack.top-1].str); }
        break;
      case 194: // FunctionName -> KWFALSE 
#line 447 "../../GeneratorSource/parser.y"
			{ StartFunction(location_stack.array[location_stack.top-1], value_stack.array[value_stack.top-1].str); }
        break;
      case 195: // FunctionName -> KWYEAR 
#line 448 "../../GeneratorSource/parser.y"
			{ StartFunction(location_stack.array[location_stack.top-1], value_stack.array[value_stack.top-1].str); }
        break;
      case 196: // FunctionName -> KWDAY 
#line 449 "../../GeneratorSource/parser.y"
			{ StartFunction(location_stack.array[location_stack.top-1], value_stack.array[value_stack.top-1].str); }
        break;
      case 197: // FunctionName -> KWMONTH 
#line 450 "../../GeneratorSource/parser.y"
			{ StartFunction(location_stack.array[location_stack.top-1], value_stack.array[value_stack.top-1].str); }
        break;
      case 198: // FunctionName -> KWFORMAT 
#line 451 "../../GeneratorSource/parser.y"
			{ StartFunction(location_stack.array[location_stack.top-1], value_stack.array[value_stack.top-1].str); }
        break;
      case 199: // FunctionName -> KWNOT 
#line 452 "../../GeneratorSource/parser.y"
			{ StartFunction(location_stack.array[location_stack.top-1], value_stack.array[value_stack.top-1].str); }
        break;
      case 202: // StartArg -> '(' 
#line 463 "../../GeneratorSource/parser.y"
			{
        StartParameters(location_stack.array[location_stack.top-1]);
    }
        break;
      case 203: // EndArg -> ')' 
#line 470 "../../GeneratorSource/parser.y"
			{
        EndParameters(location_stack.array[location_stack.top-1]);
    }
        break;
    }
  }

  protected override string TerminalToString(int terminal)
  {
    if (((Tokens)terminal).ToString() != terminal.ToString())
      return ((Tokens)terminal).ToString();
    else
      return CharToString((char)terminal);
  }

#line 475 "../../GeneratorSource/parser.y"












}
}
