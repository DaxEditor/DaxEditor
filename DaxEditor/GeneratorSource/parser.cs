// This code was generated by the Managed Package Parser Generator


using System;
using System.Collections.Generic;
using System.Text;
using Babel.ParserGenerator;
using Microsoft.VisualStudio.TextManager.Interop;

namespace Babel.Parser
{
public enum Tokens {error=126,EOF=127,FUNCTION=128,
    NUMBER=129,STRING=130,COLUMNNAME=131,TABLENAME=132,ESCAPEDTABLENAME=133,PARTIALCOLUMNNAME=134,PARTIALTABLENAME=135,MDXCODE=136,
    KWALTER=137,KWSCOPE=138,KWFORE_COLOR=139,KWEND=140,KPI=141,KWEVALUATE=142,KWDEFINE=143,KWMEASURE=144,
    KWORDER=145,KWBY=146,KWTRUE=147,KWFALSE=148,KWASC=149,KWDESC=150,KWDAY=151,KWMONTH=152,
    KWYEAR=153,KWCREATE=154,KWCALCULATE=155,KWCALCULATION=156,KWPROPERTY=157,KWGENERAL=158,KWNUMBERDECIMAL=159,KWNUMBERWHOLE=160,
    KWPERCENTAGE=161,KWSCIENTIFIC=162,KWCURRENCY=163,KWDATETIMECUSTOM=164,KWDATETIMESHORTDATEPATTERN=165,KWDATETIMEGENERAL=166,KWTEXT=167,KWACCURACY=168,
    KWTHOUSANDSEPARATOR=169,KWFORMAT=170,KWADDITIONALINFO=171,KWKPI=172,KWVISIBLE=173,KWDESCRIPTION=174,KWDISPLAYFOLDER=175,KWVAR=176,
    KWRETURN=177,KWDATATABLE=178,KWBOOLEAN=179,KWDATETIME=180,KWDOUBLE=181,KWINTEGER=182,KWSTRING=183,KWRANKX=184,
    KWSKIP=185,KWDENSE=186,KWNOT=187,KWAS=188,KWASSOCIATED_MEASURE_GROUP=189,KWGOAL=190,KWSTATUS=191,KWSTATUS_GRAPHIC=192,
    KWTREND=193,KWTREND_GRAPHIC=194,KWKPIDESCRIPTION=195,KWKPITARGETFORMATSTRING=196,KWKPITARGETDESCRIPTION=197,KWKPITARGETEXPRESSION=198,KWKPISTATUSGRAPHIC=199,KWKPISTATUSDESCRIPTION=200,
    KWKPISTATUSEXPRESSION=201,KWKPITRENDGRAPHIC=202,KWKPITRENDDESCRIPTION=203,KWKPITRENDEXPRESSION=204,KWKPIANNOTATIONS=205,EQ=206,NEQ=207,GT=208,
    GTE=209,LT=210,LTE=211,POW=212,AMPAMP=213,BARBAR=214,LEFTSQUAREBRACKET=215,RIGHTSQUAREBRACKET=216,
    maxParseToken=217,LEX_WHITE=218,LEX_COMMENT=219,LEX_ERROR=220};

public partial struct LexValue
{
    public string str;
}
// Abstract base class for MPLEX scanners
public abstract class ScanBase : AScanner<LexValue,LexLocation> {
    protected abstract int CurrentSc { get; set; }
    //
    // Override the virtual EolState property if the scanner state is more
    // complicated then a simple copy of the current start state ordinal
    //
    public virtual int EolState { get { return CurrentSc; } set { CurrentSc = value; } }
}

public partial class Parser: ShiftReduceParser<LexValue, LexLocation>
{

    ErrorHandler handler = null;
    public void SetHandler(ErrorHandler hdlr) { handler = hdlr; }
    internal void CallHdlr(string msg, LexLocation val)
    {
        handler.AddError(msg, val.sLin, val.sCol, val.eCol - val.sCol);
    }

    internal TextSpan MkTSpan(LexLocation s)
    {
        TextSpan ts;
        ts.iStartLine = s.sLin;
        ts.iStartIndex = s.sCol;
        ts.iEndLine = s.eLin;
        ts.iEndIndex = s.eCol;
        return ts;
    }

    internal void Match(LexLocation lh, LexLocation rh)
    {
        DefineMatch(MkTSpan(lh), MkTSpan(rh));
    }

    internal void StartFunction(LexLocation s, string token)
    {
        System.Diagnostics.Debug.WriteLine("StartName:" + token);
        Sink.StartName(MkTSpan(s), token); 
    }

    internal void StartParameters(LexLocation s)
    {
        System.Diagnostics.Debug.WriteLine("StartParameters");
        Sink.StartParameters(MkTSpan(s)); 
    }

    internal void EndParameters(LexLocation s)
    {
        System.Diagnostics.Debug.WriteLine("EndParameters");
        Sink.EndParameters(MkTSpan(s));
    }

    internal void NextParameter(LexLocation s)
    {
        System.Diagnostics.Debug.WriteLine("Next Parameter");
        Sink.NextParameter(MkTSpan(s));
    }
  protected override void Initialize()
  {
    this.errToken = (int)Tokens.error;
    this.eofToken = (int)Tokens.EOF;

    states=new State[401];
    AddState(0,new State(new int[]{143,5,142,184,206,188,154,195,155,389,137,391,138,393,139,395,140,397,127,400},new int[]{-1,1,-3,3,-10,187,-5,190,-12,191,-13,194,-14,386,-15,387,-16,388,-17,390,-18,392,-19,394,-20,396,-6,399}));
    AddState(1,new State(new int[]{127,2}));
    AddState(2,new State(-1));
    AddState(3,new State(new int[]{143,5,142,184,127,-2},new int[]{-10,4}));
    AddState(4,new State(-14));
    AddState(5,new State(new int[]{144,175},new int[]{-11,6}));
    AddState(6,new State(new int[]{142,7}));
    AddState(7,new State(new int[]{132,36,133,37,128,38,178,41,131,35,155,72,147,73,148,74,153,75,151,76,152,77,170,78,187,79,184,93,163,118,40,24,129,124,130,125,33,129,45,130,43,131,176,137},new int[]{-4,8,-73,17,-96,18,-94,32,-92,21,-89,22,-87,33,-86,39,-85,40,-78,57,-77,58,-69,59,-75,116,-74,92,-76,117,-90,122,-91,123,-88,126,-93,127,-58,132,-57,133,-56,136}));
    AddState(8,new State(new int[]{145,10,143,-16,142,-16,127,-16},new int[]{-9,9}));
    AddState(9,new State(-15));
    AddState(10,new State(new int[]{146,11}));
    AddState(11,new State(new int[]{132,36,133,37,128,38,178,41,131,35,155,72,147,73,148,74,153,75,151,76,152,77,170,78,187,79,184,93,163,118,40,24,129,124,130,125,33,129,45,130,43,131,176,137},new int[]{-8,12,-4,13,-73,17,-96,18,-94,32,-92,21,-89,22,-87,33,-86,39,-85,40,-78,57,-77,58,-69,59,-75,116,-74,92,-76,117,-90,122,-91,123,-88,126,-93,127,-58,132,-57,133,-56,136}));
    AddState(12,new State(-12));
    AddState(13,new State(new int[]{44,171,149,173,150,174,143,-11,142,-11,127,-11},new int[]{-7,14}));
    AddState(14,new State(new int[]{44,15,143,-10,142,-10,127,-10}));
    AddState(15,new State(new int[]{132,36,133,37,128,38,178,41,131,35,155,72,147,73,148,74,153,75,151,76,152,77,170,78,187,79,184,93,163,118,40,24,129,124,130,125,33,129,45,130,43,131,176,137},new int[]{-8,16,-4,13,-73,17,-96,18,-94,32,-92,21,-89,22,-87,33,-86,39,-85,40,-78,57,-77,58,-69,59,-75,116,-74,92,-76,117,-90,122,-91,123,-88,126,-93,127,-58,132,-57,133,-56,136}));
    AddState(16,new State(-8));
    AddState(17,new State(-274));
    AddState(18,new State(new int[]{43,158,45,159,42,160,47,161,213,162,214,163,38,164,208,165,209,166,210,167,211,168,206,169,207,170,145,-273,143,-273,142,-273,127,-273,44,-273,149,-273,150,-273,41,-273,126,-273,125,-273,177,-273,176,-273,144,-273,156,-273,59,-273,173,-273,168,-273,169,-273,170,-273,171,-273,174,-273,175,-273,195,-273,196,-273,197,-273,198,-273,199,-273,200,-273,201,-273,202,-273,203,-273,204,-273,205,-273},new int[]{-95,19}));
    AddState(19,new State(new int[]{132,36,133,37,128,38,178,41,131,35,155,72,147,73,148,74,153,75,151,76,152,77,170,78,187,79,184,93,163,118,40,24,129,124,130,125,33,129,45,130,43,131},new int[]{-94,20,-92,21,-89,22,-87,33,-86,39,-85,40,-78,57,-77,58,-69,59,-75,116,-74,92,-76,117,-90,122,-91,123,-88,126,-93,127}));
    AddState(20,new State(-272));
    AddState(21,new State(-256));
    AddState(22,new State(new int[]{40,24,43,-241,45,-241,42,-241,47,-241,213,-241,214,-241,38,-241,208,-241,209,-241,210,-241,211,-241,206,-241,207,-241,145,-241,143,-241,142,-241,127,-241,44,-241,149,-241,150,-241,41,-241,126,-241,125,-241,177,-241,176,-241,144,-241,156,-241,59,-241,173,-241,168,-241,169,-241,170,-241,171,-241,174,-241,175,-241,195,-241,196,-241,197,-241,198,-241,199,-241,200,-241,201,-241,202,-241,203,-241,204,-241,205,-241},new int[]{-90,23}));
    AddState(23,new State(-240));
    AddState(24,new State(new int[]{41,25,132,36,133,37,128,38,178,41,131,35,155,72,147,73,148,74,153,75,151,76,152,77,170,78,187,79,184,93,163,118,40,24,129,124,130,125,33,129,45,130,43,131,176,137},new int[]{-64,26,-63,71,-4,31,-73,17,-96,18,-94,32,-92,21,-89,22,-87,33,-86,39,-85,40,-78,57,-77,58,-69,59,-75,116,-74,92,-76,117,-90,122,-91,123,-88,126,-93,127,-58,132,-57,133,-56,136}));
    AddState(25,new State(-237));
    AddState(26,new State(new int[]{41,27,126,28,44,68},new int[]{-62,29}));
    AddState(27,new State(-238));
    AddState(28,new State(-239));
    AddState(29,new State(new int[]{132,36,133,37,128,38,178,41,131,35,155,72,147,73,148,74,153,75,151,76,152,77,170,78,187,79,184,93,163,118,40,24,129,124,130,125,33,129,45,130,43,131,176,137},new int[]{-63,30,-4,31,-73,17,-96,18,-94,32,-92,21,-89,22,-87,33,-86,39,-85,40,-78,57,-77,58,-69,59,-75,116,-74,92,-76,117,-90,122,-91,123,-88,126,-93,127,-58,132,-57,133,-56,136}));
    AddState(30,new State(-169));
    AddState(31,new State(-167));
    AddState(32,new State(-271));
    AddState(33,new State(new int[]{131,35,43,-231,45,-231,42,-231,47,-231,213,-231,214,-231,38,-231,208,-231,209,-231,210,-231,211,-231,206,-231,207,-231,145,-231,143,-231,142,-231,127,-231,44,-231,149,-231,150,-231,41,-231,126,-231,125,-231,177,-231,176,-231,144,-231,156,-231,59,-231,173,-231,168,-231,169,-231,170,-231,171,-231,174,-231,175,-231,195,-231,196,-231,197,-231,198,-231,199,-231,200,-231,201,-231,202,-231,203,-231,204,-231,205,-231},new int[]{-78,34}));
    AddState(34,new State(-235));
    AddState(35,new State(-209));
    AddState(36,new State(-227));
    AddState(37,new State(-228));
    AddState(38,new State(new int[]{131,-229,43,-229,45,-229,42,-229,47,-229,213,-229,214,-229,38,-229,208,-229,209,-229,210,-229,211,-229,206,-229,207,-229,145,-229,143,-229,142,-229,127,-229,44,-229,149,-229,150,-229,41,-229,126,-229,125,-229,177,-229,176,-229,144,-229,156,-229,59,-229,173,-229,168,-229,169,-229,170,-229,171,-229,174,-229,175,-229,195,-229,196,-229,197,-229,198,-229,199,-229,200,-229,201,-229,202,-229,203,-229,204,-229,205,-229,40,-177}));
    AddState(39,new State(-230));
    AddState(40,new State(-226));
    AddState(41,new State(new int[]{40,42}));
    AddState(42,new State(new int[]{130,148},new int[]{-84,43,-83,157}));
    AddState(43,new State(new int[]{44,44}));
    AddState(44,new State(new int[]{123,45,130,148},new int[]{-83,147}));
    AddState(45,new State(new int[]{123,49},new int[]{-81,46}));
    AddState(46,new State(new int[]{125,47}));
    AddState(47,new State(new int[]{41,48}));
    AddState(48,new State(-225));
    AddState(49,new State(new int[]{132,36,133,37,128,38,178,41,131,35,155,72,147,73,148,74,153,75,151,76,152,77,170,78,187,79,184,93,163,118,40,24,129,124,130,125,33,129,45,130,43,131,125,-210,44,-210},new int[]{-80,50,-79,146,-73,56,-96,18,-94,32,-92,21,-89,22,-87,33,-86,39,-85,40,-78,57,-77,58,-69,59,-75,116,-74,92,-76,117,-90,122,-91,123,-88,126,-93,127}));
    AddState(50,new State(new int[]{125,51,44,54}));
    AddState(51,new State(new int[]{44,52,125,-214}));
    AddState(52,new State(new int[]{123,49},new int[]{-81,53}));
    AddState(53,new State(-215));
    AddState(54,new State(new int[]{132,36,133,37,128,38,178,41,131,35,155,72,147,73,148,74,153,75,151,76,152,77,170,78,187,79,184,93,163,118,40,24,129,124,130,125,33,129,45,130,43,131,125,-210,44,-210},new int[]{-79,55,-73,56,-96,18,-94,32,-92,21,-89,22,-87,33,-86,39,-85,40,-78,57,-77,58,-69,59,-75,116,-74,92,-76,117,-90,122,-91,123,-88,126,-93,127}));
    AddState(55,new State(-213));
    AddState(56,new State(-211));
    AddState(57,new State(-236));
    AddState(58,new State(-242));
    AddState(59,new State(new int[]{40,82},new int[]{-68,60,-67,61,-65,62}));
    AddState(60,new State(-203));
    AddState(61,new State(-176));
    AddState(62,new State(new int[]{126,69,41,67,132,36,133,37,128,38,178,41,131,35,155,72,147,73,148,74,153,75,151,76,152,77,170,78,187,79,184,93,163,118,40,24,129,124,130,125,33,129,45,130,43,131,176,137},new int[]{-66,63,-64,64,-63,71,-4,31,-73,17,-96,18,-94,32,-92,21,-89,22,-87,33,-86,39,-85,40,-78,57,-77,58,-69,59,-75,116,-74,92,-76,117,-90,122,-91,123,-88,126,-93,127,-58,132,-57,133,-56,136}));
    AddState(63,new State(-172));
    AddState(64,new State(new int[]{126,66,41,67,44,68},new int[]{-66,65,-62,29}));
    AddState(65,new State(-173));
    AddState(66,new State(-174));
    AddState(67,new State(-171));
    AddState(68,new State(-166));
    AddState(69,new State(new int[]{41,67},new int[]{-66,70}));
    AddState(70,new State(-175));
    AddState(71,new State(-168));
    AddState(72,new State(-178));
    AddState(73,new State(new int[]{40,-179,43,-247,45,-247,42,-247,47,-247,213,-247,214,-247,38,-247,208,-247,209,-247,210,-247,211,-247,206,-247,207,-247,145,-247,143,-247,142,-247,127,-247,44,-247,149,-247,150,-247,41,-247,126,-247,125,-247,177,-247,176,-247,144,-247,156,-247,59,-247,173,-247,168,-247,169,-247,170,-247,171,-247,174,-247,175,-247,195,-247,196,-247,197,-247,198,-247,199,-247,200,-247,201,-247,202,-247,203,-247,204,-247,205,-247}));
    AddState(74,new State(new int[]{40,-180,43,-248,45,-248,42,-248,47,-248,213,-248,214,-248,38,-248,208,-248,209,-248,210,-248,211,-248,206,-248,207,-248,145,-248,143,-248,142,-248,127,-248,44,-248,149,-248,150,-248,41,-248,126,-248,125,-248,177,-248,176,-248,144,-248,156,-248,59,-248,173,-248,168,-248,169,-248,170,-248,171,-248,174,-248,175,-248,195,-248,196,-248,197,-248,198,-248,199,-248,200,-248,201,-248,202,-248,203,-248,204,-248,205,-248}));
    AddState(75,new State(new int[]{40,-181,43,-251,45,-251,42,-251,47,-251,213,-251,214,-251,38,-251,208,-251,209,-251,210,-251,211,-251,206,-251,207,-251,145,-251,143,-251,142,-251,127,-251,44,-251,149,-251,150,-251,41,-251,126,-251,125,-251,177,-251,176,-251,144,-251,156,-251,59,-251,173,-251,168,-251,169,-251,170,-251,171,-251,174,-251,175,-251,195,-251,196,-251,197,-251,198,-251,199,-251,200,-251,201,-251,202,-251,203,-251,204,-251,205,-251}));
    AddState(76,new State(new int[]{40,-182,43,-249,45,-249,42,-249,47,-249,213,-249,214,-249,38,-249,208,-249,209,-249,210,-249,211,-249,206,-249,207,-249,145,-249,143,-249,142,-249,127,-249,44,-249,149,-249,150,-249,41,-249,126,-249,125,-249,177,-249,176,-249,144,-249,156,-249,59,-249,173,-249,168,-249,169,-249,170,-249,171,-249,174,-249,175,-249,195,-249,196,-249,197,-249,198,-249,199,-249,200,-249,201,-249,202,-249,203,-249,204,-249,205,-249}));
    AddState(77,new State(new int[]{40,-183,43,-250,45,-250,42,-250,47,-250,213,-250,214,-250,38,-250,208,-250,209,-250,210,-250,211,-250,206,-250,207,-250,145,-250,143,-250,142,-250,127,-250,44,-250,149,-250,150,-250,41,-250,126,-250,125,-250,177,-250,176,-250,144,-250,156,-250,59,-250,173,-250,168,-250,169,-250,170,-250,171,-250,174,-250,175,-250,195,-250,196,-250,197,-250,198,-250,199,-250,200,-250,201,-250,202,-250,203,-250,204,-250,205,-250}));
    AddState(78,new State(-184));
    AddState(79,new State(new int[]{128,85,155,72,147,86,148,87,153,88,151,89,152,90,170,78,187,91,184,93,163,118,40,-185},new int[]{-69,80,-75,83,-76,84,-74,92}));
    AddState(80,new State(new int[]{40,82},new int[]{-68,81,-67,61,-65,62}));
    AddState(81,new State(-206));
    AddState(82,new State(-170));
    AddState(83,new State(-207));
    AddState(84,new State(-208));
    AddState(85,new State(-177));
    AddState(86,new State(-179));
    AddState(87,new State(-180));
    AddState(88,new State(-181));
    AddState(89,new State(-182));
    AddState(90,new State(-183));
    AddState(91,new State(-185));
    AddState(92,new State(-201));
    AddState(93,new State(new int[]{40,94}));
    AddState(94,new State(new int[]{132,36,133,37,128,38,178,41,131,35,155,72,147,73,148,74,153,75,151,76,152,77,170,78,187,79,184,93,163,118,40,24,129,124,130,125,33,129,45,130,43,131,176,137},new int[]{-4,95,-73,17,-96,18,-94,32,-92,21,-89,22,-87,33,-86,39,-85,40,-78,57,-77,58,-69,59,-75,116,-74,92,-76,117,-90,122,-91,123,-88,126,-93,127,-58,132,-57,133,-56,136}));
    AddState(95,new State(new int[]{44,96}));
    AddState(96,new State(new int[]{132,36,133,37,128,38,178,41,131,35,155,72,147,73,148,74,153,75,151,76,152,77,170,78,187,79,184,93,163,118,40,24,129,124,130,125,33,129,45,130,43,131,176,137},new int[]{-4,97,-73,17,-96,18,-94,32,-92,21,-89,22,-87,33,-86,39,-85,40,-78,57,-77,58,-69,59,-75,116,-74,92,-76,117,-90,122,-91,123,-88,126,-93,127,-58,132,-57,133,-56,136}));
    AddState(97,new State(new int[]{41,98,44,99}));
    AddState(98,new State(-197));
    AddState(99,new State(new int[]{132,36,133,37,128,38,178,41,131,35,155,72,147,73,148,74,153,75,151,76,152,77,170,78,187,79,184,93,163,118,40,24,129,124,130,125,33,129,45,130,43,131,41,-195,44,-195},new int[]{-72,100,-73,115,-96,18,-94,32,-92,21,-89,22,-87,33,-86,39,-85,40,-78,57,-77,58,-69,59,-75,116,-74,92,-76,117,-90,122,-91,123,-88,126,-93,127}));
    AddState(100,new State(new int[]{41,101,44,102}));
    AddState(101,new State(-198));
    AddState(102,new State(new int[]{129,110,147,111,148,112,149,113,150,114,41,-189,44,-189},new int[]{-71,103}));
    AddState(103,new State(new int[]{41,104,44,105}));
    AddState(104,new State(-199));
    AddState(105,new State(new int[]{185,108,186,109,41,-186},new int[]{-70,106}));
    AddState(106,new State(new int[]{41,107}));
    AddState(107,new State(-200));
    AddState(108,new State(-187));
    AddState(109,new State(-188));
    AddState(110,new State(-190));
    AddState(111,new State(-191));
    AddState(112,new State(-192));
    AddState(113,new State(-193));
    AddState(114,new State(-194));
    AddState(115,new State(-196));
    AddState(116,new State(-204));
    AddState(117,new State(-205));
    AddState(118,new State(new int[]{40,119}));
    AddState(119,new State(new int[]{132,36,133,37,128,38,178,41,131,35,155,72,147,73,148,74,153,75,151,76,152,77,170,78,187,79,184,93,163,118,40,24,129,124,130,125,33,129,45,130,43,131,176,137},new int[]{-4,120,-73,17,-96,18,-94,32,-92,21,-89,22,-87,33,-86,39,-85,40,-78,57,-77,58,-69,59,-75,116,-74,92,-76,117,-90,122,-91,123,-88,126,-93,127,-58,132,-57,133,-56,136}));
    AddState(120,new State(new int[]{41,121}));
    AddState(121,new State(-202));
    AddState(122,new State(-243));
    AddState(123,new State(-244));
    AddState(124,new State(-245));
    AddState(125,new State(-246));
    AddState(126,new State(-252));
    AddState(127,new State(new int[]{132,36,133,37,128,38,178,41,131,35,155,72,147,73,148,74,153,75,151,76,152,77,170,78,187,79,184,93,163,118,40,24,129,124,130,125,33,129,45,130,43,131},new int[]{-94,128,-92,21,-89,22,-87,33,-86,39,-85,40,-78,57,-77,58,-69,59,-75,116,-74,92,-76,117,-90,122,-91,123,-88,126,-93,127}));
    AddState(128,new State(-257));
    AddState(129,new State(-253));
    AddState(130,new State(-254));
    AddState(131,new State(-255));
    AddState(132,new State(-275));
    AddState(133,new State(new int[]{177,134,176,137},new int[]{-56,145}));
    AddState(134,new State(new int[]{132,36,133,37,128,38,178,41,131,35,155,72,147,73,148,74,153,75,151,76,152,77,170,78,187,79,184,93,163,118,40,24,129,124,130,125,33,129,45,130,43,131,176,137},new int[]{-4,135,-73,17,-96,18,-94,32,-92,21,-89,22,-87,33,-86,39,-85,40,-78,57,-77,58,-69,59,-75,116,-74,92,-76,117,-90,122,-91,123,-88,126,-93,127,-58,132,-57,133,-56,136}));
    AddState(135,new State(-123));
    AddState(136,new State(-121));
    AddState(137,new State(new int[]{126,141,132,144},new int[]{-55,138}));
    AddState(138,new State(new int[]{206,139}));
    AddState(139,new State(new int[]{132,36,133,37,128,38,178,41,131,35,155,72,147,73,148,74,153,75,151,76,152,77,170,78,187,79,184,93,163,118,40,24,129,124,130,125,33,129,45,130,43,131,176,137},new int[]{-4,140,-73,17,-96,18,-94,32,-92,21,-89,22,-87,33,-86,39,-85,40,-78,57,-77,58,-69,59,-75,116,-74,92,-76,117,-90,122,-91,123,-88,126,-93,127,-58,132,-57,133,-56,136}));
    AddState(140,new State(-119));
    AddState(141,new State(new int[]{206,142}));
    AddState(142,new State(new int[]{132,36,133,37,128,38,178,41,131,35,155,72,147,73,148,74,153,75,151,76,152,77,170,78,187,79,184,93,163,118,40,24,129,124,130,125,33,129,45,130,43,131,176,137},new int[]{-4,143,-73,17,-96,18,-94,32,-92,21,-89,22,-87,33,-86,39,-85,40,-78,57,-77,58,-69,59,-75,116,-74,92,-76,117,-90,122,-91,123,-88,126,-93,127,-58,132,-57,133,-56,136}));
    AddState(143,new State(-120));
    AddState(144,new State(-118));
    AddState(145,new State(-122));
    AddState(146,new State(-212));
    AddState(147,new State(-224));
    AddState(148,new State(new int[]{44,149}));
    AddState(149,new State(new int[]{179,151,163,152,180,153,181,154,182,155,183,156},new int[]{-82,150}));
    AddState(150,new State(-222));
    AddState(151,new State(-216));
    AddState(152,new State(-217));
    AddState(153,new State(-218));
    AddState(154,new State(-219));
    AddState(155,new State(-220));
    AddState(156,new State(-221));
    AddState(157,new State(-223));
    AddState(158,new State(-258));
    AddState(159,new State(-259));
    AddState(160,new State(-260));
    AddState(161,new State(-261));
    AddState(162,new State(-262));
    AddState(163,new State(-263));
    AddState(164,new State(-264));
    AddState(165,new State(-265));
    AddState(166,new State(-266));
    AddState(167,new State(-267));
    AddState(168,new State(-268));
    AddState(169,new State(-269));
    AddState(170,new State(-270));
    AddState(171,new State(new int[]{132,36,133,37,128,38,178,41,131,35,155,72,147,73,148,74,153,75,151,76,152,77,170,78,187,79,184,93,163,118,40,24,129,124,130,125,33,129,45,130,43,131,176,137},new int[]{-8,172,-4,13,-73,17,-96,18,-94,32,-92,21,-89,22,-87,33,-86,39,-85,40,-78,57,-77,58,-69,59,-75,116,-74,92,-76,117,-90,122,-91,123,-88,126,-93,127,-58,132,-57,133,-56,136}));
    AddState(172,new State(-9));
    AddState(173,new State(-6));
    AddState(174,new State(-7));
    AddState(175,new State(new int[]{132,36,133,37,128,183,178,41},new int[]{-61,176,-87,181,-86,39,-85,40}));
    AddState(176,new State(new int[]{206,177}));
    AddState(177,new State(new int[]{132,36,133,37,128,38,178,41,131,35,155,72,147,73,148,74,153,75,151,76,152,77,170,78,187,79,184,93,163,118,40,24,129,124,130,125,33,129,45,130,43,131,176,137},new int[]{-60,178,-4,180,-73,17,-96,18,-94,32,-92,21,-89,22,-87,33,-86,39,-85,40,-78,57,-77,58,-69,59,-75,116,-74,92,-76,117,-90,122,-91,123,-88,126,-93,127,-58,132,-57,133,-56,136}));
    AddState(178,new State(new int[]{144,175,142,-164},new int[]{-11,179}));
    AddState(179,new State(-165));
    AddState(180,new State(-163));
    AddState(181,new State(new int[]{131,35},new int[]{-78,182}));
    AddState(182,new State(-234));
    AddState(183,new State(-229));
    AddState(184,new State(new int[]{132,36,133,37,128,38,178,41,131,35,155,72,147,73,148,74,153,75,151,76,152,77,170,78,187,79,184,93,163,118,40,24,129,124,130,125,33,129,45,130,43,131,176,137},new int[]{-4,185,-73,17,-96,18,-94,32,-92,21,-89,22,-87,33,-86,39,-85,40,-78,57,-77,58,-69,59,-75,116,-74,92,-76,117,-90,122,-91,123,-88,126,-93,127,-58,132,-57,133,-56,136}));
    AddState(185,new State(new int[]{145,10,143,-18,142,-18,127,-18},new int[]{-9,186}));
    AddState(186,new State(-17));
    AddState(187,new State(-13));
    AddState(188,new State(new int[]{132,36,133,37,128,38,178,41,131,35,155,72,147,73,148,74,153,75,151,76,152,77,170,78,187,79,184,93,163,118,40,24,129,124,130,125,33,129,45,130,43,131,176,137},new int[]{-4,189,-73,17,-96,18,-94,32,-92,21,-89,22,-87,33,-86,39,-85,40,-78,57,-77,58,-69,59,-75,116,-74,92,-76,117,-90,122,-91,123,-88,126,-93,127,-58,132,-57,133,-56,136}));
    AddState(189,new State(-3));
    AddState(190,new State(-4));
    AddState(191,new State(new int[]{59,192,127,-27}));
    AddState(192,new State(new int[]{154,195,155,389,137,391,138,393,139,395,140,397,127,-28},new int[]{-5,193,-12,191,-13,194,-14,386,-15,387,-16,388,-17,390,-18,392,-19,394,-20,396}));
    AddState(193,new State(-29));
    AddState(194,new State(-19));
    AddState(195,new State(new int[]{144,196,172,341,136,385}));
    AddState(196,new State(new int[]{126,330,132,338,131,339,133,37,128,183,178,41},new int[]{-23,197,-21,333,-24,340,-87,336,-86,39,-85,40}));
    AddState(197,new State(new int[]{206,198}));
    AddState(198,new State(new int[]{132,36,133,37,128,38,178,41,131,35,155,72,147,73,148,74,153,75,151,76,152,77,170,78,187,79,184,93,163,118,40,24,129,124,130,125,33,129,45,130,43,131,176,137},new int[]{-22,199,-4,329,-73,17,-96,18,-94,32,-92,21,-89,22,-87,33,-86,39,-85,40,-78,57,-77,58,-69,59,-75,116,-74,92,-76,117,-90,122,-91,123,-88,126,-93,127,-58,132,-57,133,-56,136}));
    AddState(199,new State(new int[]{156,201,59,-36,127,-36},new int[]{-25,200}));
    AddState(200,new State(-37));
    AddState(201,new State(new int[]{157,202}));
    AddState(202,new State(new int[]{126,318,158,319,159,320,160,321,161,322,162,323,163,324,164,325,165,326,166,327,167,328},new int[]{-35,203}));
    AddState(203,new State(new int[]{173,207,168,215,169,222,170,230,171,235,174,240,175,248,195,254,196,260,197,266,198,272,199,278,200,284,201,290,202,296,203,302,204,308,205,314,59,-160,127,-160},new int[]{-59,204,-37,205,-36,213,-41,220,-42,228,-43,233,-39,238,-40,246,-44,252,-45,258,-46,264,-47,270,-48,276,-49,282,-50,288,-51,294,-52,300,-53,306,-54,312}));
    AddState(204,new State(-162));
    AddState(205,new State(new int[]{173,207,168,215,169,222,170,230,171,235,174,240,175,248,195,254,196,260,197,266,198,272,199,278,200,284,201,290,202,296,203,302,204,308,205,314,59,-124,127,-124},new int[]{-59,206,-37,205,-36,213,-41,220,-42,228,-43,233,-39,238,-40,246,-44,252,-45,258,-46,264,-47,270,-48,276,-49,282,-50,288,-51,294,-52,300,-53,306,-54,312}));
    AddState(206,new State(-125));
    AddState(207,new State(new int[]{206,208,126,212}));
    AddState(208,new State(new int[]{147,209,148,210,126,211}));
    AddState(209,new State(-80));
    AddState(210,new State(-81));
    AddState(211,new State(-83));
    AddState(212,new State(-82));
    AddState(213,new State(new int[]{173,207,168,215,169,222,170,230,171,235,174,240,175,248,195,254,196,260,197,266,198,272,199,278,200,284,201,290,202,296,203,302,204,308,205,314,59,-126,127,-126},new int[]{-59,214,-37,205,-36,213,-41,220,-42,228,-43,233,-39,238,-40,246,-44,252,-45,258,-46,264,-47,270,-48,276,-49,282,-50,288,-51,294,-52,300,-53,306,-54,312}));
    AddState(214,new State(-127));
    AddState(215,new State(new int[]{206,216,126,219}));
    AddState(216,new State(new int[]{129,217,126,218}));
    AddState(217,new State(-77));
    AddState(218,new State(-79));
    AddState(219,new State(-78));
    AddState(220,new State(new int[]{173,207,168,215,169,222,170,230,171,235,174,240,175,248,195,254,196,260,197,266,198,272,199,278,200,284,201,290,202,296,203,302,204,308,205,314,59,-128,127,-128},new int[]{-59,221,-37,205,-36,213,-41,220,-42,228,-43,233,-39,238,-40,246,-44,252,-45,258,-46,264,-47,270,-48,276,-49,282,-50,288,-51,294,-52,300,-53,306,-54,312}));
    AddState(221,new State(-129));
    AddState(222,new State(new int[]{206,223,126,227}));
    AddState(223,new State(new int[]{147,224,148,225,126,226}));
    AddState(224,new State(-90));
    AddState(225,new State(-91));
    AddState(226,new State(-93));
    AddState(227,new State(-92));
    AddState(228,new State(new int[]{173,207,168,215,169,222,170,230,171,235,174,240,175,248,195,254,196,260,197,266,198,272,199,278,200,284,201,290,202,296,203,302,204,308,205,314,59,-130,127,-130},new int[]{-59,229,-37,205,-36,213,-41,220,-42,228,-43,233,-39,238,-40,246,-44,252,-45,258,-46,264,-47,270,-48,276,-49,282,-50,288,-51,294,-52,300,-53,306,-54,312}));
    AddState(229,new State(-131));
    AddState(230,new State(new int[]{206,231}));
    AddState(231,new State(new int[]{133,232}));
    AddState(232,new State(-94));
    AddState(233,new State(new int[]{173,207,168,215,169,222,170,230,171,235,174,240,175,248,195,254,196,260,197,266,198,272,199,278,200,284,201,290,202,296,203,302,204,308,205,314,59,-132,127,-132},new int[]{-59,234,-37,205,-36,213,-41,220,-42,228,-43,233,-39,238,-40,246,-44,252,-45,258,-46,264,-47,270,-48,276,-49,282,-50,288,-51,294,-52,300,-53,306,-54,312}));
    AddState(234,new State(-133));
    AddState(235,new State(new int[]{206,236}));
    AddState(236,new State(new int[]{133,237}));
    AddState(237,new State(-95));
    AddState(238,new State(new int[]{173,207,168,215,169,222,170,230,171,235,174,240,175,248,195,254,196,260,197,266,198,272,199,278,200,284,201,290,202,296,203,302,204,308,205,314,59,-134,127,-134},new int[]{-59,239,-37,205,-36,213,-41,220,-42,228,-43,233,-39,238,-40,246,-44,252,-45,258,-46,264,-47,270,-48,276,-49,282,-50,288,-51,294,-52,300,-53,306,-54,312}));
    AddState(239,new State(-135));
    AddState(240,new State(new int[]{206,241,126,245}));
    AddState(241,new State(new int[]{133,243,130,244},new int[]{-38,242}));
    AddState(242,new State(-86));
    AddState(243,new State(-84));
    AddState(244,new State(-85));
    AddState(245,new State(-87));
    AddState(246,new State(new int[]{173,207,168,215,169,222,170,230,171,235,174,240,175,248,195,254,196,260,197,266,198,272,199,278,200,284,201,290,202,296,203,302,204,308,205,314,59,-136,127,-136},new int[]{-59,247,-37,205,-36,213,-41,220,-42,228,-43,233,-39,238,-40,246,-44,252,-45,258,-46,264,-47,270,-48,276,-49,282,-50,288,-51,294,-52,300,-53,306,-54,312}));
    AddState(247,new State(-137));
    AddState(248,new State(new int[]{206,249,126,251}));
    AddState(249,new State(new int[]{133,250}));
    AddState(250,new State(-88));
    AddState(251,new State(-89));
    AddState(252,new State(new int[]{173,207,168,215,169,222,170,230,171,235,174,240,175,248,195,254,196,260,197,266,198,272,199,278,200,284,201,290,202,296,203,302,204,308,205,314,59,-138,127,-138},new int[]{-59,253,-37,205,-36,213,-41,220,-42,228,-43,233,-39,238,-40,246,-44,252,-45,258,-46,264,-47,270,-48,276,-49,282,-50,288,-51,294,-52,300,-53,306,-54,312}));
    AddState(253,new State(-139));
    AddState(254,new State(new int[]{206,255,126,257}));
    AddState(255,new State(new int[]{133,243,130,244},new int[]{-38,256}));
    AddState(256,new State(-96));
    AddState(257,new State(-97));
    AddState(258,new State(new int[]{173,207,168,215,169,222,170,230,171,235,174,240,175,248,195,254,196,260,197,266,198,272,199,278,200,284,201,290,202,296,203,302,204,308,205,314,59,-140,127,-140},new int[]{-59,259,-37,205,-36,213,-41,220,-42,228,-43,233,-39,238,-40,246,-44,252,-45,258,-46,264,-47,270,-48,276,-49,282,-50,288,-51,294,-52,300,-53,306,-54,312}));
    AddState(259,new State(-141));
    AddState(260,new State(new int[]{206,261,126,263}));
    AddState(261,new State(new int[]{133,243,130,244},new int[]{-38,262}));
    AddState(262,new State(-98));
    AddState(263,new State(-99));
    AddState(264,new State(new int[]{173,207,168,215,169,222,170,230,171,235,174,240,175,248,195,254,196,260,197,266,198,272,199,278,200,284,201,290,202,296,203,302,204,308,205,314,59,-142,127,-142},new int[]{-59,265,-37,205,-36,213,-41,220,-42,228,-43,233,-39,238,-40,246,-44,252,-45,258,-46,264,-47,270,-48,276,-49,282,-50,288,-51,294,-52,300,-53,306,-54,312}));
    AddState(265,new State(-143));
    AddState(266,new State(new int[]{206,267,126,269}));
    AddState(267,new State(new int[]{133,243,130,244},new int[]{-38,268}));
    AddState(268,new State(-100));
    AddState(269,new State(-101));
    AddState(270,new State(new int[]{173,207,168,215,169,222,170,230,171,235,174,240,175,248,195,254,196,260,197,266,198,272,199,278,200,284,201,290,202,296,203,302,204,308,205,314,59,-144,127,-144},new int[]{-59,271,-37,205,-36,213,-41,220,-42,228,-43,233,-39,238,-40,246,-44,252,-45,258,-46,264,-47,270,-48,276,-49,282,-50,288,-51,294,-52,300,-53,306,-54,312}));
    AddState(271,new State(-145));
    AddState(272,new State(new int[]{206,273,126,275}));
    AddState(273,new State(new int[]{132,36,133,37,128,38,178,41,131,35,155,72,147,73,148,74,153,75,151,76,152,77,170,78,187,79,184,93,163,118,40,24,129,124,130,125,33,129,45,130,43,131,176,137},new int[]{-4,274,-73,17,-96,18,-94,32,-92,21,-89,22,-87,33,-86,39,-85,40,-78,57,-77,58,-69,59,-75,116,-74,92,-76,117,-90,122,-91,123,-88,126,-93,127,-58,132,-57,133,-56,136}));
    AddState(274,new State(-102));
    AddState(275,new State(-103));
    AddState(276,new State(new int[]{173,207,168,215,169,222,170,230,171,235,174,240,175,248,195,254,196,260,197,266,198,272,199,278,200,284,201,290,202,296,203,302,204,308,205,314,59,-146,127,-146},new int[]{-59,277,-37,205,-36,213,-41,220,-42,228,-43,233,-39,238,-40,246,-44,252,-45,258,-46,264,-47,270,-48,276,-49,282,-50,288,-51,294,-52,300,-53,306,-54,312}));
    AddState(277,new State(-147));
    AddState(278,new State(new int[]{206,279,126,281}));
    AddState(279,new State(new int[]{133,243,130,244},new int[]{-38,280}));
    AddState(280,new State(-104));
    AddState(281,new State(-105));
    AddState(282,new State(new int[]{173,207,168,215,169,222,170,230,171,235,174,240,175,248,195,254,196,260,197,266,198,272,199,278,200,284,201,290,202,296,203,302,204,308,205,314,59,-148,127,-148},new int[]{-59,283,-37,205,-36,213,-41,220,-42,228,-43,233,-39,238,-40,246,-44,252,-45,258,-46,264,-47,270,-48,276,-49,282,-50,288,-51,294,-52,300,-53,306,-54,312}));
    AddState(283,new State(-149));
    AddState(284,new State(new int[]{206,285,126,287}));
    AddState(285,new State(new int[]{133,243,130,244},new int[]{-38,286}));
    AddState(286,new State(-106));
    AddState(287,new State(-107));
    AddState(288,new State(new int[]{173,207,168,215,169,222,170,230,171,235,174,240,175,248,195,254,196,260,197,266,198,272,199,278,200,284,201,290,202,296,203,302,204,308,205,314,59,-150,127,-150},new int[]{-59,289,-37,205,-36,213,-41,220,-42,228,-43,233,-39,238,-40,246,-44,252,-45,258,-46,264,-47,270,-48,276,-49,282,-50,288,-51,294,-52,300,-53,306,-54,312}));
    AddState(289,new State(-151));
    AddState(290,new State(new int[]{206,291,126,293}));
    AddState(291,new State(new int[]{132,36,133,37,128,38,178,41,131,35,155,72,147,73,148,74,153,75,151,76,152,77,170,78,187,79,184,93,163,118,40,24,129,124,130,125,33,129,45,130,43,131,176,137},new int[]{-4,292,-73,17,-96,18,-94,32,-92,21,-89,22,-87,33,-86,39,-85,40,-78,57,-77,58,-69,59,-75,116,-74,92,-76,117,-90,122,-91,123,-88,126,-93,127,-58,132,-57,133,-56,136}));
    AddState(292,new State(-108));
    AddState(293,new State(-109));
    AddState(294,new State(new int[]{173,207,168,215,169,222,170,230,171,235,174,240,175,248,195,254,196,260,197,266,198,272,199,278,200,284,201,290,202,296,203,302,204,308,205,314,59,-152,127,-152},new int[]{-59,295,-37,205,-36,213,-41,220,-42,228,-43,233,-39,238,-40,246,-44,252,-45,258,-46,264,-47,270,-48,276,-49,282,-50,288,-51,294,-52,300,-53,306,-54,312}));
    AddState(295,new State(-153));
    AddState(296,new State(new int[]{206,297,126,299}));
    AddState(297,new State(new int[]{133,243,130,244},new int[]{-38,298}));
    AddState(298,new State(-110));
    AddState(299,new State(-111));
    AddState(300,new State(new int[]{173,207,168,215,169,222,170,230,171,235,174,240,175,248,195,254,196,260,197,266,198,272,199,278,200,284,201,290,202,296,203,302,204,308,205,314,59,-154,127,-154},new int[]{-59,301,-37,205,-36,213,-41,220,-42,228,-43,233,-39,238,-40,246,-44,252,-45,258,-46,264,-47,270,-48,276,-49,282,-50,288,-51,294,-52,300,-53,306,-54,312}));
    AddState(301,new State(-155));
    AddState(302,new State(new int[]{206,303,126,305}));
    AddState(303,new State(new int[]{133,243,130,244},new int[]{-38,304}));
    AddState(304,new State(-112));
    AddState(305,new State(-113));
    AddState(306,new State(new int[]{173,207,168,215,169,222,170,230,171,235,174,240,175,248,195,254,196,260,197,266,198,272,199,278,200,284,201,290,202,296,203,302,204,308,205,314,59,-156,127,-156},new int[]{-59,307,-37,205,-36,213,-41,220,-42,228,-43,233,-39,238,-40,246,-44,252,-45,258,-46,264,-47,270,-48,276,-49,282,-50,288,-51,294,-52,300,-53,306,-54,312}));
    AddState(307,new State(-157));
    AddState(308,new State(new int[]{206,309,126,311}));
    AddState(309,new State(new int[]{132,36,133,37,128,38,178,41,131,35,155,72,147,73,148,74,153,75,151,76,152,77,170,78,187,79,184,93,163,118,40,24,129,124,130,125,33,129,45,130,43,131,176,137},new int[]{-4,310,-73,17,-96,18,-94,32,-92,21,-89,22,-87,33,-86,39,-85,40,-78,57,-77,58,-69,59,-75,116,-74,92,-76,117,-90,122,-91,123,-88,126,-93,127,-58,132,-57,133,-56,136}));
    AddState(310,new State(-114));
    AddState(311,new State(-115));
    AddState(312,new State(new int[]{173,207,168,215,169,222,170,230,171,235,174,240,175,248,195,254,196,260,197,266,198,272,199,278,200,284,201,290,202,296,203,302,204,308,205,314,59,-158,127,-158},new int[]{-59,313,-37,205,-36,213,-41,220,-42,228,-43,233,-39,238,-40,246,-44,252,-45,258,-46,264,-47,270,-48,276,-49,282,-50,288,-51,294,-52,300,-53,306,-54,312}));
    AddState(313,new State(-159));
    AddState(314,new State(new int[]{206,315,126,317}));
    AddState(315,new State(new int[]{133,316}));
    AddState(316,new State(-116));
    AddState(317,new State(-117));
    AddState(318,new State(-161));
    AddState(319,new State(-67));
    AddState(320,new State(-68));
    AddState(321,new State(-69));
    AddState(322,new State(-70));
    AddState(323,new State(-71));
    AddState(324,new State(-72));
    AddState(325,new State(-73));
    AddState(326,new State(-74));
    AddState(327,new State(-75));
    AddState(328,new State(-76));
    AddState(329,new State(-33));
    AddState(330,new State(new int[]{206,331}));
    AddState(331,new State(new int[]{132,36,133,37,128,38,178,41,131,35,155,72,147,73,148,74,153,75,151,76,152,77,170,78,187,79,184,93,163,118,40,24,129,124,130,125,33,129,45,130,43,131,176,137},new int[]{-22,332,-4,329,-73,17,-96,18,-94,32,-92,21,-89,22,-87,33,-86,39,-85,40,-78,57,-77,58,-69,59,-75,116,-74,92,-76,117,-90,122,-91,123,-88,126,-93,127,-58,132,-57,133,-56,136}));
    AddState(332,new State(-38));
    AddState(333,new State(new int[]{46,334}));
    AddState(334,new State(new int[]{132,36,133,37,128,183,178,41},new int[]{-24,335,-87,336,-86,39,-85,40}));
    AddState(335,new State(-34));
    AddState(336,new State(new int[]{131,35},new int[]{-78,337}));
    AddState(337,new State(-232));
    AddState(338,new State(new int[]{46,-31,131,-227}));
    AddState(339,new State(-32));
    AddState(340,new State(-35));
    AddState(341,new State(new int[]{132,338,131,339,133,37,128,183,178,41},new int[]{-33,342,-21,379,-34,384,-87,382,-86,39,-85,40}));
    AddState(342,new State(new int[]{188,343}));
    AddState(343,new State(new int[]{132,338,131,339,133,37,128,183,178,41},new int[]{-33,344,-21,379,-34,384,-87,382,-86,39,-85,40}));
    AddState(344,new State(new int[]{59,345,44,350},new int[]{-26,346,-27,348,-28,369,-29,371,-30,373,-31,375,-32,377}));
    AddState(345,new State(-59));
    AddState(346,new State(new int[]{59,347}));
    AddState(347,new State(-60));
    AddState(348,new State(new int[]{44,350,59,-39},new int[]{-26,349,-27,348,-28,369,-29,371,-30,373,-31,375,-32,377}));
    AddState(349,new State(-40));
    AddState(350,new State(new int[]{189,351,190,354,191,357,192,360,193,363,194,366}));
    AddState(351,new State(new int[]{206,352}));
    AddState(352,new State(new int[]{133,353}));
    AddState(353,new State(-51));
    AddState(354,new State(new int[]{206,355}));
    AddState(355,new State(new int[]{132,36,133,37,128,38,178,41,131,35,155,72,147,73,148,74,153,75,151,76,152,77,170,78,187,79,184,93,163,118,40,24,129,124,130,125,33,129,45,130,43,131,176,137},new int[]{-4,356,-73,17,-96,18,-94,32,-92,21,-89,22,-87,33,-86,39,-85,40,-78,57,-77,58,-69,59,-75,116,-74,92,-76,117,-90,122,-91,123,-88,126,-93,127,-58,132,-57,133,-56,136}));
    AddState(356,new State(-52));
    AddState(357,new State(new int[]{206,358}));
    AddState(358,new State(new int[]{132,36,133,37,128,38,178,41,131,35,155,72,147,73,148,74,153,75,151,76,152,77,170,78,187,79,184,93,163,118,40,24,129,124,130,125,33,129,45,130,43,131,176,137},new int[]{-4,359,-73,17,-96,18,-94,32,-92,21,-89,22,-87,33,-86,39,-85,40,-78,57,-77,58,-69,59,-75,116,-74,92,-76,117,-90,122,-91,123,-88,126,-93,127,-58,132,-57,133,-56,136}));
    AddState(359,new State(-53));
    AddState(360,new State(new int[]{206,361}));
    AddState(361,new State(new int[]{133,362}));
    AddState(362,new State(-54));
    AddState(363,new State(new int[]{206,364}));
    AddState(364,new State(new int[]{132,36,133,37,128,38,178,41,131,35,155,72,147,73,148,74,153,75,151,76,152,77,170,78,187,79,184,93,163,118,40,24,129,124,130,125,33,129,45,130,43,131,176,137},new int[]{-4,365,-73,17,-96,18,-94,32,-92,21,-89,22,-87,33,-86,39,-85,40,-78,57,-77,58,-69,59,-75,116,-74,92,-76,117,-90,122,-91,123,-88,126,-93,127,-58,132,-57,133,-56,136}));
    AddState(365,new State(-55));
    AddState(366,new State(new int[]{206,367}));
    AddState(367,new State(new int[]{133,368}));
    AddState(368,new State(-56));
    AddState(369,new State(new int[]{44,350,59,-41},new int[]{-26,370,-27,348,-28,369,-29,371,-30,373,-31,375,-32,377}));
    AddState(370,new State(-42));
    AddState(371,new State(new int[]{44,350,59,-43},new int[]{-26,372,-27,348,-28,369,-29,371,-30,373,-31,375,-32,377}));
    AddState(372,new State(-44));
    AddState(373,new State(new int[]{44,350,59,-45},new int[]{-26,374,-27,348,-28,369,-29,371,-30,373,-31,375,-32,377}));
    AddState(374,new State(-46));
    AddState(375,new State(new int[]{44,350,59,-47},new int[]{-26,376,-27,348,-28,369,-29,371,-30,373,-31,375,-32,377}));
    AddState(376,new State(-48));
    AddState(377,new State(new int[]{44,350,59,-49},new int[]{-26,378,-27,348,-28,369,-29,371,-30,373,-31,375,-32,377}));
    AddState(378,new State(-50));
    AddState(379,new State(new int[]{46,380}));
    AddState(380,new State(new int[]{132,36,133,37,128,183,178,41},new int[]{-34,381,-87,382,-86,39,-85,40}));
    AddState(381,new State(-57));
    AddState(382,new State(new int[]{131,35},new int[]{-78,383}));
    AddState(383,new State(-233));
    AddState(384,new State(-58));
    AddState(385,new State(-61));
    AddState(386,new State(-20));
    AddState(387,new State(-21));
    AddState(388,new State(-22));
    AddState(389,new State(-62));
    AddState(390,new State(-23));
    AddState(391,new State(-63));
    AddState(392,new State(-24));
    AddState(393,new State(-64));
    AddState(394,new State(-25));
    AddState(395,new State(-65));
    AddState(396,new State(-26));
    AddState(397,new State(new int[]{138,398}));
    AddState(398,new State(-66));
    AddState(399,new State(-5));
    AddState(400,new State(-30));

    rules=new Rule[276];
    rules[1]=new Rule(-2, new int[]{-1,127});
    rules[2]=new Rule(-1, new int[]{-3});
    rules[3]=new Rule(-1, new int[]{206,-4});
    rules[4]=new Rule(-1, new int[]{-5});
    rules[5]=new Rule(-1, new int[]{-6});
    rules[6]=new Rule(-7, new int[]{149});
    rules[7]=new Rule(-7, new int[]{150});
    rules[8]=new Rule(-8, new int[]{-4,-7,44,-8});
    rules[9]=new Rule(-8, new int[]{-4,44,-8});
    rules[10]=new Rule(-8, new int[]{-4,-7});
    rules[11]=new Rule(-8, new int[]{-4});
    rules[12]=new Rule(-9, new int[]{145,146,-8});
    rules[13]=new Rule(-3, new int[]{-10});
    rules[14]=new Rule(-3, new int[]{-3,-10});
    rules[15]=new Rule(-10, new int[]{143,-11,142,-4,-9});
    rules[16]=new Rule(-10, new int[]{143,-11,142,-4});
    rules[17]=new Rule(-10, new int[]{142,-4,-9});
    rules[18]=new Rule(-10, new int[]{142,-4});
    rules[19]=new Rule(-12, new int[]{-13});
    rules[20]=new Rule(-12, new int[]{-14});
    rules[21]=new Rule(-12, new int[]{-15});
    rules[22]=new Rule(-12, new int[]{-16});
    rules[23]=new Rule(-12, new int[]{-17});
    rules[24]=new Rule(-12, new int[]{-18});
    rules[25]=new Rule(-12, new int[]{-19});
    rules[26]=new Rule(-12, new int[]{-20});
    rules[27]=new Rule(-5, new int[]{-12});
    rules[28]=new Rule(-5, new int[]{-12,59});
    rules[29]=new Rule(-5, new int[]{-12,59,-5});
    rules[30]=new Rule(-6, new int[]{127});
    rules[31]=new Rule(-21, new int[]{132});
    rules[32]=new Rule(-21, new int[]{131});
    rules[33]=new Rule(-22, new int[]{-4});
    rules[34]=new Rule(-23, new int[]{-21,46,-24});
    rules[35]=new Rule(-23, new int[]{-24});
    rules[36]=new Rule(-13, new int[]{154,144,-23,206,-22});
    rules[37]=new Rule(-13, new int[]{154,144,-23,206,-22,-25});
    rules[38]=new Rule(-13, new int[]{154,144,126,206,-22});
    rules[39]=new Rule(-26, new int[]{-27});
    rules[40]=new Rule(-26, new int[]{-27,-26});
    rules[41]=new Rule(-26, new int[]{-28});
    rules[42]=new Rule(-26, new int[]{-28,-26});
    rules[43]=new Rule(-26, new int[]{-29});
    rules[44]=new Rule(-26, new int[]{-29,-26});
    rules[45]=new Rule(-26, new int[]{-30});
    rules[46]=new Rule(-26, new int[]{-30,-26});
    rules[47]=new Rule(-26, new int[]{-31});
    rules[48]=new Rule(-26, new int[]{-31,-26});
    rules[49]=new Rule(-26, new int[]{-32});
    rules[50]=new Rule(-26, new int[]{-32,-26});
    rules[51]=new Rule(-27, new int[]{44,189,206,133});
    rules[52]=new Rule(-28, new int[]{44,190,206,-4});
    rules[53]=new Rule(-29, new int[]{44,191,206,-4});
    rules[54]=new Rule(-30, new int[]{44,192,206,133});
    rules[55]=new Rule(-31, new int[]{44,193,206,-4});
    rules[56]=new Rule(-32, new int[]{44,194,206,133});
    rules[57]=new Rule(-33, new int[]{-21,46,-34});
    rules[58]=new Rule(-33, new int[]{-34});
    rules[59]=new Rule(-14, new int[]{154,172,-33,188,-33,59});
    rules[60]=new Rule(-14, new int[]{154,172,-33,188,-33,-26,59});
    rules[61]=new Rule(-15, new int[]{154,136});
    rules[62]=new Rule(-16, new int[]{155});
    rules[63]=new Rule(-17, new int[]{137});
    rules[64]=new Rule(-18, new int[]{138});
    rules[65]=new Rule(-19, new int[]{139});
    rules[66]=new Rule(-20, new int[]{140,138});
    rules[67]=new Rule(-35, new int[]{158});
    rules[68]=new Rule(-35, new int[]{159});
    rules[69]=new Rule(-35, new int[]{160});
    rules[70]=new Rule(-35, new int[]{161});
    rules[71]=new Rule(-35, new int[]{162});
    rules[72]=new Rule(-35, new int[]{163});
    rules[73]=new Rule(-35, new int[]{164});
    rules[74]=new Rule(-35, new int[]{165});
    rules[75]=new Rule(-35, new int[]{166});
    rules[76]=new Rule(-35, new int[]{167});
    rules[77]=new Rule(-36, new int[]{168,206,129});
    rules[78]=new Rule(-36, new int[]{168,126});
    rules[79]=new Rule(-36, new int[]{168,206,126});
    rules[80]=new Rule(-37, new int[]{173,206,147});
    rules[81]=new Rule(-37, new int[]{173,206,148});
    rules[82]=new Rule(-37, new int[]{173,126});
    rules[83]=new Rule(-37, new int[]{173,206,126});
    rules[84]=new Rule(-38, new int[]{133});
    rules[85]=new Rule(-38, new int[]{130});
    rules[86]=new Rule(-39, new int[]{174,206,-38});
    rules[87]=new Rule(-39, new int[]{174,126});
    rules[88]=new Rule(-40, new int[]{175,206,133});
    rules[89]=new Rule(-40, new int[]{175,126});
    rules[90]=new Rule(-41, new int[]{169,206,147});
    rules[91]=new Rule(-41, new int[]{169,206,148});
    rules[92]=new Rule(-41, new int[]{169,126});
    rules[93]=new Rule(-41, new int[]{169,206,126});
    rules[94]=new Rule(-42, new int[]{170,206,133});
    rules[95]=new Rule(-43, new int[]{171,206,133});
    rules[96]=new Rule(-44, new int[]{195,206,-38});
    rules[97]=new Rule(-44, new int[]{195,126});
    rules[98]=new Rule(-45, new int[]{196,206,-38});
    rules[99]=new Rule(-45, new int[]{196,126});
    rules[100]=new Rule(-46, new int[]{197,206,-38});
    rules[101]=new Rule(-46, new int[]{197,126});
    rules[102]=new Rule(-47, new int[]{198,206,-4});
    rules[103]=new Rule(-47, new int[]{198,126});
    rules[104]=new Rule(-48, new int[]{199,206,-38});
    rules[105]=new Rule(-48, new int[]{199,126});
    rules[106]=new Rule(-49, new int[]{200,206,-38});
    rules[107]=new Rule(-49, new int[]{200,126});
    rules[108]=new Rule(-50, new int[]{201,206,-4});
    rules[109]=new Rule(-50, new int[]{201,126});
    rules[110]=new Rule(-51, new int[]{202,206,-38});
    rules[111]=new Rule(-51, new int[]{202,126});
    rules[112]=new Rule(-52, new int[]{203,206,-38});
    rules[113]=new Rule(-52, new int[]{203,126});
    rules[114]=new Rule(-53, new int[]{204,206,-4});
    rules[115]=new Rule(-53, new int[]{204,126});
    rules[116]=new Rule(-54, new int[]{205,206,133});
    rules[117]=new Rule(-54, new int[]{205,126});
    rules[118]=new Rule(-55, new int[]{132});
    rules[119]=new Rule(-56, new int[]{176,-55,206,-4});
    rules[120]=new Rule(-56, new int[]{176,126,206,-4});
    rules[121]=new Rule(-57, new int[]{-56});
    rules[122]=new Rule(-57, new int[]{-57,-56});
    rules[123]=new Rule(-58, new int[]{-57,177,-4});
    rules[124]=new Rule(-59, new int[]{-37});
    rules[125]=new Rule(-59, new int[]{-37,-59});
    rules[126]=new Rule(-59, new int[]{-36});
    rules[127]=new Rule(-59, new int[]{-36,-59});
    rules[128]=new Rule(-59, new int[]{-41});
    rules[129]=new Rule(-59, new int[]{-41,-59});
    rules[130]=new Rule(-59, new int[]{-42});
    rules[131]=new Rule(-59, new int[]{-42,-59});
    rules[132]=new Rule(-59, new int[]{-43});
    rules[133]=new Rule(-59, new int[]{-43,-59});
    rules[134]=new Rule(-59, new int[]{-39});
    rules[135]=new Rule(-59, new int[]{-39,-59});
    rules[136]=new Rule(-59, new int[]{-40});
    rules[137]=new Rule(-59, new int[]{-40,-59});
    rules[138]=new Rule(-59, new int[]{-44});
    rules[139]=new Rule(-59, new int[]{-44,-59});
    rules[140]=new Rule(-59, new int[]{-45});
    rules[141]=new Rule(-59, new int[]{-45,-59});
    rules[142]=new Rule(-59, new int[]{-46});
    rules[143]=new Rule(-59, new int[]{-46,-59});
    rules[144]=new Rule(-59, new int[]{-47});
    rules[145]=new Rule(-59, new int[]{-47,-59});
    rules[146]=new Rule(-59, new int[]{-48});
    rules[147]=new Rule(-59, new int[]{-48,-59});
    rules[148]=new Rule(-59, new int[]{-49});
    rules[149]=new Rule(-59, new int[]{-49,-59});
    rules[150]=new Rule(-59, new int[]{-50});
    rules[151]=new Rule(-59, new int[]{-50,-59});
    rules[152]=new Rule(-59, new int[]{-51});
    rules[153]=new Rule(-59, new int[]{-51,-59});
    rules[154]=new Rule(-59, new int[]{-52});
    rules[155]=new Rule(-59, new int[]{-52,-59});
    rules[156]=new Rule(-59, new int[]{-53});
    rules[157]=new Rule(-59, new int[]{-53,-59});
    rules[158]=new Rule(-59, new int[]{-54});
    rules[159]=new Rule(-59, new int[]{-54,-59});
    rules[160]=new Rule(-25, new int[]{156,157,-35});
    rules[161]=new Rule(-25, new int[]{156,157,126});
    rules[162]=new Rule(-25, new int[]{156,157,-35,-59});
    rules[163]=new Rule(-60, new int[]{-4});
    rules[164]=new Rule(-11, new int[]{144,-61,206,-60});
    rules[165]=new Rule(-11, new int[]{144,-61,206,-60,-11});
    rules[166]=new Rule(-62, new int[]{44});
    rules[167]=new Rule(-63, new int[]{-4});
    rules[168]=new Rule(-64, new int[]{-63});
    rules[169]=new Rule(-64, new int[]{-64,-62,-63});
    rules[170]=new Rule(-65, new int[]{40});
    rules[171]=new Rule(-66, new int[]{41});
    rules[172]=new Rule(-67, new int[]{-65,-66});
    rules[173]=new Rule(-67, new int[]{-65,-64,-66});
    rules[174]=new Rule(-67, new int[]{-65,-64,126});
    rules[175]=new Rule(-67, new int[]{-65,126,-66});
    rules[176]=new Rule(-68, new int[]{-67});
    rules[177]=new Rule(-69, new int[]{128});
    rules[178]=new Rule(-69, new int[]{155});
    rules[179]=new Rule(-69, new int[]{147});
    rules[180]=new Rule(-69, new int[]{148});
    rules[181]=new Rule(-69, new int[]{153});
    rules[182]=new Rule(-69, new int[]{151});
    rules[183]=new Rule(-69, new int[]{152});
    rules[184]=new Rule(-69, new int[]{170});
    rules[185]=new Rule(-69, new int[]{187});
    rules[186]=new Rule(-70, new int[]{});
    rules[187]=new Rule(-70, new int[]{185});
    rules[188]=new Rule(-70, new int[]{186});
    rules[189]=new Rule(-71, new int[]{});
    rules[190]=new Rule(-71, new int[]{129});
    rules[191]=new Rule(-71, new int[]{147});
    rules[192]=new Rule(-71, new int[]{148});
    rules[193]=new Rule(-71, new int[]{149});
    rules[194]=new Rule(-71, new int[]{150});
    rules[195]=new Rule(-72, new int[]{});
    rules[196]=new Rule(-72, new int[]{-73});
    rules[197]=new Rule(-74, new int[]{184,40,-4,44,-4,41});
    rules[198]=new Rule(-74, new int[]{184,40,-4,44,-4,44,-72,41});
    rules[199]=new Rule(-74, new int[]{184,40,-4,44,-4,44,-72,44,-71,41});
    rules[200]=new Rule(-74, new int[]{184,40,-4,44,-4,44,-72,44,-71,44,-70,41});
    rules[201]=new Rule(-75, new int[]{-74});
    rules[202]=new Rule(-76, new int[]{163,40,-4,41});
    rules[203]=new Rule(-77, new int[]{-69,-68});
    rules[204]=new Rule(-77, new int[]{-75});
    rules[205]=new Rule(-77, new int[]{-76});
    rules[206]=new Rule(-77, new int[]{187,-69,-68});
    rules[207]=new Rule(-77, new int[]{187,-75});
    rules[208]=new Rule(-77, new int[]{187,-76});
    rules[209]=new Rule(-78, new int[]{131});
    rules[210]=new Rule(-79, new int[]{});
    rules[211]=new Rule(-79, new int[]{-73});
    rules[212]=new Rule(-80, new int[]{-79});
    rules[213]=new Rule(-80, new int[]{-80,44,-79});
    rules[214]=new Rule(-81, new int[]{123,-80,125});
    rules[215]=new Rule(-81, new int[]{123,-80,125,44,-81});
    rules[216]=new Rule(-82, new int[]{179});
    rules[217]=new Rule(-82, new int[]{163});
    rules[218]=new Rule(-82, new int[]{180});
    rules[219]=new Rule(-82, new int[]{181});
    rules[220]=new Rule(-82, new int[]{182});
    rules[221]=new Rule(-82, new int[]{183});
    rules[222]=new Rule(-83, new int[]{130,44,-82});
    rules[223]=new Rule(-84, new int[]{-83});
    rules[224]=new Rule(-84, new int[]{-84,44,-83});
    rules[225]=new Rule(-85, new int[]{178,40,-84,44,123,-81,125,41});
    rules[226]=new Rule(-86, new int[]{-85});
    rules[227]=new Rule(-87, new int[]{132});
    rules[228]=new Rule(-87, new int[]{133});
    rules[229]=new Rule(-87, new int[]{128});
    rules[230]=new Rule(-87, new int[]{-86});
    rules[231]=new Rule(-88, new int[]{-87});
    rules[232]=new Rule(-24, new int[]{-87,-78});
    rules[233]=new Rule(-34, new int[]{-87,-78});
    rules[234]=new Rule(-61, new int[]{-87,-78});
    rules[235]=new Rule(-89, new int[]{-87,-78});
    rules[236]=new Rule(-89, new int[]{-78});
    rules[237]=new Rule(-90, new int[]{40,41});
    rules[238]=new Rule(-90, new int[]{40,-64,41});
    rules[239]=new Rule(-90, new int[]{40,-64,126});
    rules[240]=new Rule(-91, new int[]{-89,-90});
    rules[241]=new Rule(-92, new int[]{-89});
    rules[242]=new Rule(-92, new int[]{-77});
    rules[243]=new Rule(-92, new int[]{-90});
    rules[244]=new Rule(-92, new int[]{-91});
    rules[245]=new Rule(-92, new int[]{129});
    rules[246]=new Rule(-92, new int[]{130});
    rules[247]=new Rule(-92, new int[]{147});
    rules[248]=new Rule(-92, new int[]{148});
    rules[249]=new Rule(-92, new int[]{151});
    rules[250]=new Rule(-92, new int[]{152});
    rules[251]=new Rule(-92, new int[]{153});
    rules[252]=new Rule(-92, new int[]{-88});
    rules[253]=new Rule(-93, new int[]{33});
    rules[254]=new Rule(-93, new int[]{45});
    rules[255]=new Rule(-93, new int[]{43});
    rules[256]=new Rule(-94, new int[]{-92});
    rules[257]=new Rule(-94, new int[]{-93,-94});
    rules[258]=new Rule(-95, new int[]{43});
    rules[259]=new Rule(-95, new int[]{45});
    rules[260]=new Rule(-95, new int[]{42});
    rules[261]=new Rule(-95, new int[]{47});
    rules[262]=new Rule(-95, new int[]{213});
    rules[263]=new Rule(-95, new int[]{214});
    rules[264]=new Rule(-95, new int[]{38});
    rules[265]=new Rule(-95, new int[]{208});
    rules[266]=new Rule(-95, new int[]{209});
    rules[267]=new Rule(-95, new int[]{210});
    rules[268]=new Rule(-95, new int[]{211});
    rules[269]=new Rule(-95, new int[]{206});
    rules[270]=new Rule(-95, new int[]{207});
    rules[271]=new Rule(-96, new int[]{-94});
    rules[272]=new Rule(-96, new int[]{-96,-95,-94});
    rules[273]=new Rule(-73, new int[]{-96});
    rules[274]=new Rule(-4, new int[]{-73});
    rules[275]=new Rule(-4, new int[]{-58});

    nonTerminals = new string[] {"", "Start", "$accept", "DaxQueries", 
      "Expression", "DaxScript", "Empty", "Order", "OrderByList", "OrderBy", 
      "DaxQuery", "Definitions", "CreateExpression", "CreateMeasure", "CreateKpi", 
      "CreateMember", "Calculate", "Alter", "Scope", "ForeColor", "EndScope", 
      "CubeName", "MeasureExpression", "MeasureFullName", "MeasureName", "CalculationProperty", 
      "KpiPropertyParams", "KpiPropertyAssociatedMeasureGroup", "KpiPropertyGoal", 
      "KpiPropertyStatus", "KpiPropertyStatusGraphic", "KpiPropertyTrend", "KpiPropertyTrendGraphic", 
      "KpiFullName", "KpiName", "CalculationPropertyFormatType", "CalculationPropertyAccuracy", 
      "CalculationPropertyVisible", "CalculationPropertyDescriptionContent", 
      "CalculationPropertyDescription", "CalculationPropertyDisplayFolder", "CalculationPropertyThousandSeparator", 
      "CalculationPropertyFormat", "CalculationPropertyAdditionalInfo", "CalculationPropertyKpiDescription", 
      "CalculationPropertyKpiTargetFormatString", "CalculationPropertyKpiTargetDescription", 
      "CalculationPropertyKpiTargetExpression", "CalculationPropertyKpiStatusGraphic", 
      "CalculationPropertyKpiStatusDescription", "CalculationPropertyKpiStatusExpression", 
      "CalculationPropertyKpiTrendGraphic", "CalculationPropertyKpiTrendDescription", 
      "CalculationPropertyKpiTrendExpression", "CalculationPropertyKpiAnnotations", 
      "VarName", "VarDeclaration", "VarDeclarations", "VarExpression", "CalculationPropertyParams", 
      "QueryMeasureExpression", "QueryMeasureName", "ParamSeparator", "ParamExpression", 
      "Params1", "StartArg", "EndArg", "ParenthesisParameters", "FunctionArgs", 
      "FunctionName", "RankXTies", "RankXOrder", "RankXValue", "ScalarExpression", 
      "RankX", "RankXFunction", "CurrencyFunction", "FunctionCall", "ColumnRef", 
      "DataTableValue", "DataTableValues", "DataTableRows", "DataTableColumnType", 
      "DataTableColumn", "DataTableColumns", "DataTable", "DataTableFunction", 
      "TableRef", "TableExpression", "ColMeasureRef", "ParenthesisExpression", 
      "CalculateShortcut", "PrimaryExpression", "UnaryOperator", "UnaryExpression", 
      "BinaryOperator", "BinaryExpression", };
  }

  protected override void DoAction(int action)
  {
    switch (action)
    {
      case 33: // MeasureExpression -> Expression 
{ SpecifyMeasureExpression(location_stack.array[location_stack.top-1]); }
        break;
      case 36: // CreateMeasure -> KWCREATE KWMEASURE MeasureFullName EQ MeasureExpression 
{ SpecifyFullMeasureText(location_stack.array[location_stack.top-5], location_stack.array[location_stack.top-1]); }
        break;
      case 37: // CreateMeasure -> KWCREATE KWMEASURE MeasureFullName EQ MeasureExpression CalculationProperty 
{ SpecifyFullMeasureText(location_stack.array[location_stack.top-6], location_stack.array[location_stack.top-2]); }
        break;
      case 38: // CreateMeasure -> KWCREATE KWMEASURE error EQ MeasureExpression 
{ CallHdlr("Measure name expected", location_stack.array[location_stack.top-3]); }
        break;
      case 51: // KpiPropertyAssociatedMeasureGroup -> ',' KWASSOCIATED_MEASURE_GROUP EQ ESCAPEDTABLENAME 
{ SpecifyCalcPropAssociatedMeasureGroup(location_stack.array[location_stack.top-1]); }
        break;
      case 52: // KpiPropertyGoal -> ',' KWGOAL EQ Expression 
{ SpecifyCalcPropGoal(location_stack.array[location_stack.top-1]); }
        break;
      case 53: // KpiPropertyStatus -> ',' KWSTATUS EQ Expression 
{ SpecifyCalcPropStatus(location_stack.array[location_stack.top-1]); }
        break;
      case 54: // KpiPropertyStatusGraphic -> ',' KWSTATUS_GRAPHIC EQ ESCAPEDTABLENAME 
{ SpecifyCalcPropStatusGraphic(location_stack.array[location_stack.top-1]); }
        break;
      case 55: // KpiPropertyTrend -> ',' KWTREND EQ Expression 
{ SpecifyCalcPropTrend(location_stack.array[location_stack.top-1]); }
        break;
      case 56: // KpiPropertyTrendGraphic -> ',' KWTREND_GRAPHIC EQ ESCAPEDTABLENAME 
{ SpecifyCalcPropTrendGraphic(location_stack.array[location_stack.top-1]); }
        break;
      case 64: // Scope -> KWSCOPE 
{ SpecifyScope(location_stack.array[location_stack.top-1]);  }
        break;
      case 66: // EndScope -> KWEND KWSCOPE 
{ SpecifyEndScope(location_stack.array[location_stack.top-1]);  }
        break;
      case 67: // CalculationPropertyFormatType -> KWGENERAL 
{ SpecifyCalculationProperty(location_stack.array[location_stack.top-1]); }
        break;
      case 68: // CalculationPropertyFormatType -> KWNUMBERDECIMAL 
{ SpecifyCalculationProperty(location_stack.array[location_stack.top-1]); }
        break;
      case 69: // CalculationPropertyFormatType -> KWNUMBERWHOLE 
{ SpecifyCalculationProperty(location_stack.array[location_stack.top-1]); }
        break;
      case 70: // CalculationPropertyFormatType -> KWPERCENTAGE 
{ SpecifyCalculationProperty(location_stack.array[location_stack.top-1]); }
        break;
      case 71: // CalculationPropertyFormatType -> KWSCIENTIFIC 
{ SpecifyCalculationProperty(location_stack.array[location_stack.top-1]); }
        break;
      case 72: // CalculationPropertyFormatType -> KWCURRENCY 
{ SpecifyCalculationProperty(location_stack.array[location_stack.top-1]); }
        break;
      case 73: // CalculationPropertyFormatType -> KWDATETIMECUSTOM 
{ SpecifyCalculationProperty(location_stack.array[location_stack.top-1]); }
        break;
      case 74: // CalculationPropertyFormatType -> KWDATETIMESHORTDATEPATTERN 
{ SpecifyCalculationProperty(location_stack.array[location_stack.top-1]); }
        break;
      case 75: // CalculationPropertyFormatType -> KWDATETIMEGENERAL 
{ SpecifyCalculationProperty(location_stack.array[location_stack.top-1]); }
        break;
      case 76: // CalculationPropertyFormatType -> KWTEXT 
{ SpecifyCalculationProperty(location_stack.array[location_stack.top-1]); }
        break;
      case 77: // CalculationPropertyAccuracy -> KWACCURACY EQ NUMBER 
{ SpecifyCalcPropAccuracy(location_stack.array[location_stack.top-1]); }
        break;
      case 78: // CalculationPropertyAccuracy -> KWACCURACY error 
{ CallHdlr("'=' is not specified", location_stack.array[location_stack.top-1]); }
        break;
      case 79: // CalculationPropertyAccuracy -> KWACCURACY EQ error 
{ CallHdlr("Value of Accuracy is not a number", location_stack.array[location_stack.top-1]); }
        break;
      case 80: // CalculationPropertyVisible -> KWVISIBLE EQ KWTRUE 
{ SpecifyCalcPropIsHidden(false); }
        break;
      case 81: // CalculationPropertyVisible -> KWVISIBLE EQ KWFALSE 
{ SpecifyCalcPropIsHidden(true); }
        break;
      case 82: // CalculationPropertyVisible -> KWVISIBLE error 
{ CallHdlr("'=' is not specified", location_stack.array[location_stack.top-1]); }
        break;
      case 83: // CalculationPropertyVisible -> KWVISIBLE EQ error 
{ CallHdlr("Visible can be either TRUE or FALSE", location_stack.array[location_stack.top-1]); }
        break;
      case 86: // CalculationPropertyDescription -> KWDESCRIPTION EQ CalculationPropertyDescriptionContent 
{ SpecifyCalcPropDescription(location_stack.array[location_stack.top-1]);  }
        break;
      case 87: // CalculationPropertyDescription -> KWDESCRIPTION error 
{ CallHdlr("'=' is not specified", location_stack.array[location_stack.top-1]); }
        break;
      case 88: // CalculationPropertyDisplayFolder -> KWDISPLAYFOLDER EQ ESCAPEDTABLENAME 
{ SpecifyCalcPropDisplayFolder(location_stack.array[location_stack.top-1]);  }
        break;
      case 89: // CalculationPropertyDisplayFolder -> KWDISPLAYFOLDER error 
{ CallHdlr("'=' is not specified", location_stack.array[location_stack.top-1]); }
        break;
      case 90: // CalculationPropertyThousandSeparator -> KWTHOUSANDSEPARATOR EQ KWTRUE 
{ SpecifyCalcPropThousandSeparator(true); }
        break;
      case 91: // CalculationPropertyThousandSeparator -> KWTHOUSANDSEPARATOR EQ KWFALSE 
{ SpecifyCalcPropThousandSeparator(false); }
        break;
      case 92: // CalculationPropertyThousandSeparator -> KWTHOUSANDSEPARATOR error 
{ CallHdlr("'=' is not specified", location_stack.array[location_stack.top-1]); }
        break;
      case 93: // CalculationPropertyThousandSeparator -> KWTHOUSANDSEPARATOR EQ error 
{ CallHdlr("ThousandSeparator can be either TRUE or FALSE", location_stack.array[location_stack.top-1]); }
        break;
      case 94: // CalculationPropertyFormat -> KWFORMAT EQ ESCAPEDTABLENAME 
{ SpecifyCalcPropFormat(location_stack.array[location_stack.top-1]); }
        break;
      case 95: // CalculationPropertyAdditionalInfo -> KWADDITIONALINFO EQ ESCAPEDTABLENAME 
{ SpecifyCalcPropAdditionalInfo(location_stack.array[location_stack.top-1]); }
        break;
      case 96: // CalculationPropertyKpiDescription -> KWKPIDESCRIPTION EQ CalculationPropertyDescriptionContent 
{ SpecifyCalcPropKpiDescription(location_stack.array[location_stack.top-1]);  }
        break;
      case 97: // CalculationPropertyKpiDescription -> KWKPIDESCRIPTION error 
{ CallHdlr("'=' is not specified", location_stack.array[location_stack.top-1]); }
        break;
      case 98: // CalculationPropertyKpiTargetFormatString -> KWKPITARGETFORMATSTRING EQ CalculationPropertyDescriptionContent 
{ SpecifyCalcPropKpiTargetFormatString(location_stack.array[location_stack.top-1]);  }
        break;
      case 99: // CalculationPropertyKpiTargetFormatString -> KWKPITARGETFORMATSTRING error 
{ CallHdlr("'=' is not specified", location_stack.array[location_stack.top-1]); }
        break;
      case 100: // CalculationPropertyKpiTargetDescription -> KWKPITARGETDESCRIPTION EQ CalculationPropertyDescriptionContent 
{ SpecifyCalcPropKpiTargetDescription(location_stack.array[location_stack.top-1]);  }
        break;
      case 101: // CalculationPropertyKpiTargetDescription -> KWKPITARGETDESCRIPTION error 
{ CallHdlr("'=' is not specified", location_stack.array[location_stack.top-1]); }
        break;
      case 102: // CalculationPropertyKpiTargetExpression -> KWKPITARGETEXPRESSION EQ Expression 
{ SpecifyCalcPropKpiTargetExpression(location_stack.array[location_stack.top-1]);  }
        break;
      case 103: // CalculationPropertyKpiTargetExpression -> KWKPITARGETEXPRESSION error 
{ CallHdlr("'=' is not specified", location_stack.array[location_stack.top-1]); }
        break;
      case 104: // CalculationPropertyKpiStatusGraphic -> KWKPISTATUSGRAPHIC EQ CalculationPropertyDescriptionContent 
{ SpecifyCalcPropKpiStatusGraphic(location_stack.array[location_stack.top-1]);  }
        break;
      case 105: // CalculationPropertyKpiStatusGraphic -> KWKPISTATUSGRAPHIC error 
{ CallHdlr("'=' is not specified", location_stack.array[location_stack.top-1]); }
        break;
      case 106: // CalculationPropertyKpiStatusDescription -> KWKPISTATUSDESCRIPTION EQ CalculationPropertyDescriptionContent 
{ SpecifyCalcPropKpiStatusDescription(location_stack.array[location_stack.top-1]);  }
        break;
      case 107: // CalculationPropertyKpiStatusDescription -> KWKPISTATUSDESCRIPTION error 
{ CallHdlr("'=' is not specified", location_stack.array[location_stack.top-1]); }
        break;
      case 108: // CalculationPropertyKpiStatusExpression -> KWKPISTATUSEXPRESSION EQ Expression 
{ SpecifyCalcPropKpiStatusExpression(location_stack.array[location_stack.top-1]);  }
        break;
      case 109: // CalculationPropertyKpiStatusExpression -> KWKPISTATUSEXPRESSION error 
{ CallHdlr("'=' is not specified", location_stack.array[location_stack.top-1]); }
        break;
      case 110: // CalculationPropertyKpiTrendGraphic -> KWKPITRENDGRAPHIC EQ CalculationPropertyDescriptionContent 
{ SpecifyCalcPropKpiTrendGraphic(location_stack.array[location_stack.top-1]);  }
        break;
      case 111: // CalculationPropertyKpiTrendGraphic -> KWKPITRENDGRAPHIC error 
{ CallHdlr("'=' is not specified", location_stack.array[location_stack.top-1]); }
        break;
      case 112: // CalculationPropertyKpiTrendDescription -> KWKPITRENDDESCRIPTION EQ CalculationPropertyDescriptionContent 
{ SpecifyCalcPropKpiTrendDescription(location_stack.array[location_stack.top-1]);  }
        break;
      case 113: // CalculationPropertyKpiTrendDescription -> KWKPITRENDDESCRIPTION error 
{ CallHdlr("'=' is not specified", location_stack.array[location_stack.top-1]); }
        break;
      case 114: // CalculationPropertyKpiTrendExpression -> KWKPITRENDEXPRESSION EQ Expression 
{ SpecifyCalcPropKpiTrendExpression(location_stack.array[location_stack.top-1]);  }
        break;
      case 115: // CalculationPropertyKpiTrendExpression -> KWKPITRENDEXPRESSION error 
{ CallHdlr("'=' is not specified", location_stack.array[location_stack.top-1]); }
        break;
      case 116: // CalculationPropertyKpiAnnotations -> KWKPIANNOTATIONS EQ ESCAPEDTABLENAME 
{ SpecifyCalcPropKpiAnnotations(location_stack.array[location_stack.top-1]);  }
        break;
      case 117: // CalculationPropertyKpiAnnotations -> KWKPIANNOTATIONS error 
{ CallHdlr("'=' is not specified", location_stack.array[location_stack.top-1]); }
        break;
      case 120: // VarDeclaration -> KWVAR error EQ Expression 
{ CallHdlr("Invalid var name", location_stack.array[location_stack.top-3]); }
        break;
      case 161: // CalculationProperty -> KWCALCULATION KWPROPERTY error 
{ CallHdlr("Wrong calculation property type.  Expected types: General, NumberDecimal, NumberWhole, Percentage, Scientific, Currency, DateTimeCustom, Visible, Description, DisplayFolder", location_stack.array[location_stack.top-2]); }
        break;
      case 166: // ParamSeparator -> ',' 
{ NextParameter(location_stack.array[location_stack.top-1]); }
        break;
      case 170: // StartArg -> '(' 
{ StartParameters(location_stack.array[location_stack.top-1]); }
        break;
      case 171: // EndArg -> ')' 
{ EndParameters(location_stack.array[location_stack.top-1]); }
        break;
      case 172: // ParenthesisParameters -> StartArg EndArg 
{ Match(location_stack.array[location_stack.top-2], location_stack.array[location_stack.top-1]); }
        break;
      case 173: // ParenthesisParameters -> StartArg Params1 EndArg 
{ Match(location_stack.array[location_stack.top-3], location_stack.array[location_stack.top-1]); }
        break;
      case 174: // ParenthesisParameters -> StartArg Params1 error 
{ CallHdlr("unmatched parentheses", location_stack.array[location_stack.top-1]); }
        break;
      case 175: // ParenthesisParameters -> StartArg error EndArg 
{ yyval = value_stack.array[value_stack.top-1];
                                            CallHdlr("error in parameters", location_stack.array[location_stack.top-2]); }
        break;
      case 177: // FunctionName -> FUNCTION 
{ StartFunction(location_stack.array[location_stack.top-1], value_stack.array[value_stack.top-1].str); }
        break;
      case 178: // FunctionName -> KWCALCULATE 
{ StartFunction(location_stack.array[location_stack.top-1], value_stack.array[value_stack.top-1].str); }
        break;
      case 179: // FunctionName -> KWTRUE 
{ StartFunction(location_stack.array[location_stack.top-1], value_stack.array[value_stack.top-1].str); }
        break;
      case 180: // FunctionName -> KWFALSE 
{ StartFunction(location_stack.array[location_stack.top-1], value_stack.array[value_stack.top-1].str); }
        break;
      case 181: // FunctionName -> KWYEAR 
{ StartFunction(location_stack.array[location_stack.top-1], value_stack.array[value_stack.top-1].str); }
        break;
      case 182: // FunctionName -> KWDAY 
{ StartFunction(location_stack.array[location_stack.top-1], value_stack.array[value_stack.top-1].str); }
        break;
      case 183: // FunctionName -> KWMONTH 
{ StartFunction(location_stack.array[location_stack.top-1], value_stack.array[value_stack.top-1].str); }
        break;
      case 184: // FunctionName -> KWFORMAT 
{ StartFunction(location_stack.array[location_stack.top-1], value_stack.array[value_stack.top-1].str); }
        break;
      case 185: // FunctionName -> KWNOT 
{ StartFunction(location_stack.array[location_stack.top-1], value_stack.array[value_stack.top-1].str); }
        break;
      case 201: // RankXFunction -> RankX 
{ StartFunction(location_stack.array[location_stack.top-1], value_stack.array[value_stack.top-1].str); }
        break;
      case 226: // DataTableFunction -> DataTable 
{ StartFunction(location_stack.array[location_stack.top-1], value_stack.array[value_stack.top-1].str); }
        break;
      case 232: // MeasureName -> TableRef ColumnRef 
{ CreateNewMeasure(location_stack.array[location_stack.top-2], location_stack.array[location_stack.top-1]); }
        break;
      case 233: // KpiName -> TableRef ColumnRef 
{ SetKpiMeasureName(location_stack.array[location_stack.top-1]); }
        break;
      case 237: // ParenthesisExpression -> '(' ')' 
{ Match(location_stack.array[location_stack.top-2], location_stack.array[location_stack.top-1]); }
        break;
      case 238: // ParenthesisExpression -> '(' Params1 ')' 
{ Match(location_stack.array[location_stack.top-3], location_stack.array[location_stack.top-1]); }
        break;
      case 239: // ParenthesisExpression -> '(' Params1 error 
{ CallHdlr("unmatched parentheses", location_stack.array[location_stack.top-1]); }
        break;
    }
  }

  protected override string TerminalToString(int terminal)
  {
    if (((Tokens)terminal).ToString() != terminal.ToString())
      return ((Tokens)terminal).ToString();
    else
      return CharToString((char)terminal);
  }


















}
}
