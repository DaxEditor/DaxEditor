//
//  This CSharp output file generated by Managed Package LEX
//  Version:  0.6.0 (1-August-2007)
//  Machine:  GAP
//  DateTime: 2/8/2017 12:46:13 AM
//  UserName: marco
//  MPLEX input file <lexer.lex>
//  MPLEX frame file <C:\Users\marco\Source\Repos\DaxEditor\DaxEditor\GeneratorSource\mplex.frame>
//
//  Option settings: unicode, parser, minimize, classes, compressmap, compressnext
//

#define BACKUP
//
// mplex.frame
// Version 0.6.1 of 1 August 2007
// Left and Right Anchored state support.
// Start condition stack. Two generic params.
// Using fixed length context handling for right anchors
//
using System;
using System.IO;
using System.Collections.Generic;
#if !STANDALONE
using Babel.ParserGenerator;
#endif // STANDALONE

using Babel;
using Babel.Parser;
using DaxEditor.GeneratorSource;
using System.Diagnostics;

namespace Babel.Lexer
{   
    /// <summary>
    /// Summary Canonical example of MPLEX automaton
    /// </summary>
    
#if STANDALONE
    //
    // These are the dummy declarations for stand-alone MPLEX applications
    // normally these declarations would come from the parser.
    // If you declare /noparser, or %option noparser then you get this.
    //

    public enum Tokens
    { 
      EOF = 0, maxParseToken = int.MaxValue 
      // must have at least these two, values are almost arbitrary
    }

    public abstract class ScanBase
    {
        public abstract int yylex();
        protected abstract int CurrentSc { get; set; }
        //
        // Override this virtual EolState property if the scanner state is more
        // complicated then a simple copy of the current start state ordinal
        //
        public virtual int EolState { get { return CurrentSc; } set { CurrentSc = value; } }
    }
    
    public interface IColorScan
    {
        void SetSource(string source, int offset);
        int GetNext(ref int state, out int start, out int end);
    }
    
    

#endif // STANDALONE

    public abstract class ScanBuff
    {
        public const int EOF = -1;
        public abstract int Pos { get; set; }
        public abstract int Read();
        public abstract int Peek();
        public abstract int ReadPos { get; }
        public abstract string GetString(int b, int e);
    }
    
    // If the compiler can't find ScanBase maybe you need
    // to run mppg with /mplex, or run mplex with /noparser
    public sealed class Scanner : ScanBase, IColorScan
    {
   
        public ScanBuff buffer;
        private IErrorHandler handler;
        int scState;
        
        private static int GetMaxParseToken() {
            System.Reflection.FieldInfo f = typeof(Tokens).GetField("maxParseToken");
            return (f == null ? int.MaxValue : (int)f.GetValue(null));
        }
        
        static int parserMax = GetMaxParseToken();        
        
        protected override int CurrentSc 
        {
             // The current start state is a property
             // to try to avoid the user error of setting
             // scState but forgetting to update the FSA
             // start state "currentStart"
             //
             get { return scState; }
             set { scState = value; currentStart = startState[value]; }
        }
        
        enum Result {accept, noMatch, contextFound};

        const int maxAccept = 522;
        const int initial = 523;
        const int eofNum = 0;
        const int goStart = -1;
        const int INITIAL = 0;
        const int COMMENT = 1;

/*
The project released under MS-PL license https://daxeditor.codeplex.com/license
*/
int GetIdToken(string txt)
       {
            if(DaxFunctions.GetFunctionsTree().Contains(txt))
            {
                return (int)Tokens.FUNCTION;
            }

            return (int)Tokens.TABLENAME;
       }
       
       internal void LoadYylval()
       {
           yylval.str = tokTxt;
           yylloc = new LexLocation(tokLin, tokCol, tokLin, tokECol);
       }
       
       public override void yyerror(string s, params object[] a)
       {
           if (handler != null) handler.AddError(s, tokLin, tokCol, tokECol - tokCol + 1, 2);  // Sev 2 = error
       }

       public void SetSourceText(string text)
       {
            SetSource(text, 0);
            InitializeLineStartArray(text);
       }

       private int[] _lineStartArray = null;

       public override string GetText(LexLocation location)
       {
            Debug.Assert(_lineStartArray != null);

            int startPosition = FindBegginingOfLinePosition(location.sLin) + location.sCol;
            int endPosition = FindBegginingOfLinePosition(location.eLin) + location.eCol;

            Debug.Assert(endPosition > startPosition);

            return buffer.GetString(startPosition, endPosition);
       }

       private void InitializeLineStartArray(string text)
       {
            Debug.Assert(_lineStartArray == null);
            var lineStartList = new List<int>();
            lineStartList.Add(0);

            // Expected EOL - \n and \r\n
            var textChars = text.ToCharArray();
            for(int position = 1; position < textChars.Length; ++position)
            {
                char prevChar = textChars[position - 1];
                if(prevChar == '\n')
                    lineStartList.Add(position);
            }
            lineStartList.Add(textChars.Length - 1);

            _lineStartArray = lineStartList.ToArray();
       }

       /// <summary>
       /// Returns start position for the specified line.  Line is 1-based index.
       /// </summary>
       private int FindBegginingOfLinePosition(int line)
       {
            Debug.Assert(line > 0 && line < _lineStartArray.Length);
            return _lineStartArray[line - 1];
       }
        int state;
        int currentStart = initial;
        int chr;           // last character read
        int cNum;          // ordinal number of chr
        int lNum = 0;      // current line number
        int lineStartNum;  // cNum at start of line

        //
        // The following instance variables are useful, among other
        // things, for constructing the yylloc location objects.
        //
        int tokPos;        // buffer position at start of token
        int tokNum;        // ordinal number of first character
        int tokLen;        // number of character in token
        int tokCol;        // zero-based column number at start of token
        int tokLin;        // line number at start of token
        int tokEPos;       // buffer position at end of token
        int tokECol;       // column number at end of token
        int tokELin;       // line number at end of token
        string tokTxt;     // lazily constructed text of token
#if STACK          
        private Stack<int> scStack = new Stack<int>();
#endif // STACK

#region ScannerTables
    struct Table {
        public int min; public int rng; public int dflt;
        public short[] nxt;
        public Table(int m, int x, int d, short[] n) {
            min = m; rng = x; dflt = d; nxt = n;
        }
    };

    static int[] startState = {523, 518, 0};

#region CharacterMap
    //
    // There are 53 equivalence classes
    // There are 2 character sequence regions
    // There are 1 tables, 126 entries
    // There are 1 runs, 0 singletons
    //
    static sbyte[] map0 = new sbyte[126] {
/* \0     */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 52, 25, 52, 52, 52, 29, 29, 
/* \020   */ 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 
/* \040   */ 52, 45, 51, 29, 29, 29, 49, 30, 37, 38, 43, 42, 36, 35, 34, 44, 
/* 0      */ 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 29, 0, 47, 46, 48, 29, 
/* @      */ 29, 26, 15, 17, 7, 1, 8, 20, 18, 9, 32, 23, 4, 11, 10, 14, 
/* P      */ 19, 32, 13, 12, 6, 5, 2, 21, 22, 16, 32, 28, 29, 31, 41, 24, 
/* `      */ 29, 3, 15, 17, 7, 1, 8, 20, 18, 9, 32, 23, 27, 11, 10, 14, 
/* p      */ 19, 32, 13, 12, 6, 5, 2, 21, 22, 16, 32, 39, 50, 40 };

    sbyte Map(int chr)
    { // '\0' <= chr <= '\uFFFF'
      if (chr < 126) return map0[chr - 0];
      else return (sbyte)29;
    }
#endregion

    static Table[] NxS = new Table[531];

    static Scanner() {
    NxS[0] = new Table(0, 0, 0, null);
    NxS[1] = new Table(0, 0, -1, null);
    NxS[2] = new Table(25, 31, 66, new short[] {-1, 66, 66, -1, -1, -1, 
        -1, 66, 66, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, 66, 511});
    NxS[3] = new Table(1, 34, -1, new short[] {66, 66, 503, 66, 66, 66, 
        66, 66, 504, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 
        66, 66, -1, 503, 66, -1, -1, -1, -1, 66, 66, 68});
    NxS[4] = new Table(1, 34, -1, new short[] {66, 66, 66, 66, 66, 66, 
        72, 66, 66, 66, 66, 73, 66, 66, 66, 66, 74, 66, 66, 66, 66, 66, 
        66, 66, -1, 66, 66, -1, -1, -1, -1, 66, 66, 68});
    NxS[5] = new Table(25, 29, 66, new short[] {-1, 66, 66, -1, -1, -1, 
        -1, 66, 66, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1});
    NxS[6] = new Table(1, 34, -1, new short[] {470, 66, 66, 66, 66, 66, 
        66, 66, 66, 66, 66, 66, 471, 66, 66, 66, 66, 472, 66, 66, 66, 66, 
        66, 66, -1, 66, 66, -1, -1, -1, -1, 66, 66, 68});
    NxS[7] = new Table(1, 34, -1, new short[] {393, 66, 394, 66, 66, 66, 
        66, 66, 395, 66, 66, 66, 66, 396, 66, 66, 66, 66, 66, 66, 66, 66, 
        66, 66, -1, 394, 66, -1, -1, -1, -1, 66, 66, 68});
    NxS[8] = new Table(1, 34, -1, new short[] {66, 66, 384, 66, 66, 66, 
        66, 66, 66, 66, 66, 66, 66, 385, 66, 66, 66, 66, 66, 66, 66, 66, 
        66, 66, -1, 384, 66, -1, -1, -1, -1, 66, 66, 68});
    NxS[9] = new Table(1, 34, -1, new short[] {66, 66, 66, 66, 66, 66, 
        66, 66, 66, 378, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 
        66, 66, -1, 66, 66, -1, -1, -1, -1, 66, 66, 68});
    NxS[10] = new Table(1, 34, -1, new short[] {66, 66, 66, 66, 359, 66, 
        66, 66, 66, 66, 66, 66, 66, 360, 66, 66, 66, 66, 66, 66, 66, 66, 
        66, 66, -1, 66, 66, -1, -1, -1, -1, 66, 66, 68});
    NxS[11] = new Table(1, 34, -1, new short[] {345, 66, 66, 66, 66, 66, 
        66, 66, 66, 66, 66, 66, 66, 346, 66, 66, 66, 66, 66, 66, 66, 66, 
        66, 66, -1, 66, 66, -1, -1, -1, -1, 66, 66, 68});
    NxS[12] = new Table(1, 34, -1, new short[] {66, 66, 66, 66, 66, 316, 
        66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 317, 66, 66, 66, 66, 66, 
        318, 66, -1, 66, 66, -1, -1, -1, -1, 66, 66, 68});
    NxS[13] = new Table(25, 32, 66, new short[] {-1, 308, 66, -1, -1, -1, 
        -1, 66, 66, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, 307, 66, 308});
    NxS[14] = new Table(1, 34, -1, new short[] {66, 66, 66, 66, 66, 66, 
        66, 66, 66, 66, 66, 66, 303, 66, 66, 66, 66, 66, 66, 66, 66, 66, 
        66, 66, -1, 66, 66, -1, -1, -1, -1, 66, 66, 68});
    NxS[15] = new Table(1, 34, -1, new short[] {66, 66, 66, 66, 66, 66, 
        66, 66, 66, 66, 66, 66, 66, 296, 66, 297, 66, 66, 66, 66, 66, 66, 
        66, 66, -1, 66, 66, -1, -1, -1, -1, 66, 66, 68});
    NxS[16] = new Table(25, 30, 66, new short[] {-1, 66, 66, -1, -1, -1, 
        -1, 66, 66, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, 293});
    NxS[17] = new Table(1, 34, -1, new short[] {66, 66, 270, 66, 271, 66, 
        66, 66, 66, 66, 66, 66, 272, 66, 66, 66, 66, 66, 66, 66, 66, 66, 
        66, 66, -1, 270, 66, -1, -1, -1, -1, 66, 66, 68});
    NxS[18] = new Table(1, 34, -1, new short[] {254, 66, 66, 66, 66, 66, 
        66, 66, 66, 66, 66, 66, 255, 66, 66, 66, 66, 66, 66, 66, 66, 66, 
        66, 66, -1, 66, 66, -1, -1, -1, -1, 66, 66, 68});
    NxS[19] = new Table(1, 34, -1, new short[] {245, 66, 66, 66, 66, 66, 
        66, 66, 66, 66, 66, 66, 66, 246, 66, 66, 66, 66, 66, 66, 66, 66, 
        66, 66, -1, 66, 66, -1, -1, -1, -1, 66, 66, 68});
    NxS[20] = new Table(1, 34, -1, new short[] {66, 66, 66, 66, 66, 66, 
        66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 116, 66, 66, 66, 
        66, 66, -1, 66, 66, -1, -1, -1, -1, 66, 66, 68});
    NxS[21] = new Table(0, 0, -1, null);
    NxS[22] = new Table(1, 34, -1, new short[] {66, 66, 66, 67, 66, 66, 
        72, 66, 66, 66, 66, 73, 66, 66, 66, 66, 74, 66, 66, 66, 66, 66, 
        66, 66, -1, 66, 67, -1, -1, -1, -1, 66, 66, 68});
    NxS[23] = new Table(25, 33, 66, new short[] {-1, 66, 67, -1, -1, -1, 
        -1, 66, 66, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, 66, 66, 66, 67});
    NxS[24] = new Table(25, 7, 64, new short[] {-1, 64, 64, 64, 64, 64, 
        -1});
    NxS[25] = new Table(0, 0, -1, null);
    NxS[26] = new Table(25, 6, 62, new short[] {-1, 62, 62, 62, 62, -1});
    NxS[27] = new Table(0, 0, -1, null);
    NxS[28] = new Table(33, 2, -1, new short[] {28, 529});
    NxS[29] = new Table(33, 1, -1, new short[] {60});
    NxS[30] = new Table(35, 1, -1, new short[] {527});
    NxS[31] = new Table(0, 0, -1, null);
    NxS[32] = new Table(0, 0, -1, null);
    NxS[33] = new Table(0, 0, -1, null);
    NxS[34] = new Table(0, 0, -1, null);
    NxS[35] = new Table(0, 0, -1, null);
    NxS[36] = new Table(0, 0, -1, null);
    NxS[37] = new Table(0, 0, -1, null);
    NxS[38] = new Table(43, 2, -1, new short[] {526, 58});
    NxS[39] = new Table(43, 2, -1, new short[] {54, 525});
    NxS[40] = new Table(0, 0, -1, null);
    NxS[41] = new Table(0, 0, -1, null);
    NxS[42] = new Table(46, 3, -1, new short[] {52, -1, 53});
    NxS[43] = new Table(46, 1, -1, new short[] {51});
    NxS[44] = new Table(49, 1, -1, new short[] {50});
    NxS[45] = new Table(50, 1, -1, new short[] {49});
    NxS[46] = new Table(25, 27, 524, new short[] {-1, 524, 524, 524, 524, 524, 
        524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 
        524, 524, 524, 524, 48});
    NxS[47] = new Table(52, 1, -1, new short[] {47});
    NxS[48] = new Table(0, 0, -1, null);
    NxS[49] = new Table(0, 0, -1, null);
    NxS[50] = new Table(0, 0, -1, null);
    NxS[51] = new Table(0, 0, -1, null);
    NxS[52] = new Table(0, 0, -1, null);
    NxS[53] = new Table(0, 0, -1, null);
    NxS[54] = new Table(25, 19, 54, new short[] {-1, 54, 54, 54, 54, 54, 
        54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 56});
    NxS[55] = new Table(0, 0, -1, null);
    NxS[56] = new Table(43, 2, -1, new short[] {56, 57});
    NxS[57] = new Table(0, 0, -1, null);
    NxS[58] = new Table(0, 0, -1, null);
    NxS[59] = new Table(0, 0, -1, null);
    NxS[60] = new Table(33, 22, -1, new short[] {60, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 528});
    NxS[61] = new Table(33, 22, -1, new short[] {61, 529, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 530});
    NxS[62] = new Table(25, 6, 62, new short[] {-1, 62, 62, 62, 62, 63});
    NxS[63] = new Table(0, 0, -1, null);
    NxS[64] = new Table(25, 7, 64, new short[] {-1, 64, 64, 64, 64, 64, 
        65});
    NxS[65] = new Table(0, 0, -1, null);
    NxS[66] = new Table(25, 29, 68, new short[] {-1, 68, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1});
    NxS[67] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 69, 
        68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[68] = new Table(25, 29, 68, new short[] {-1, 68, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1});
    NxS[69] = new Table(25, 30, 68, new short[] {-1, 68, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, 70});
    NxS[70] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 68, 71, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[71] = new Table(0, 1, 71, new short[] {-1});
    NxS[72] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        104, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[73] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 81, 68, 68, 68, 68, 82, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[74] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 75, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[75] = new Table(25, 34, 68, new short[] {-1, 68, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, 68, 68, 68, 68, 76});
    NxS[76] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 68, 77, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[77] = new Table(25, 32, 68, new short[] {-1, 78, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, 68, 68, 78});
    NxS[78] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 79, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[79] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 68, 68, 68, 68, 80, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[80] = new Table(25, 29, 68, new short[] {-1, 68, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1});
    NxS[81] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 68, 68, 83, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[82] = new Table(25, 29, 68, new short[] {-1, 68, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1});
    NxS[83] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 84, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[84] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 85, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[85] = new Table(25, 32, 68, new short[] {-1, 86, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, 68, 68, 86});
    NxS[86] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 87, 
        68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[87] = new Table(25, 30, 68, new short[] {-1, 68, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, 88});
    NxS[88] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        89, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[89] = new Table(24, 30, 68, new short[] {90, -1, 68, 68, -1, -1, 
        -1, -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, -1});
    NxS[90] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 91, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[91] = new Table(25, 30, 68, new short[] {-1, 68, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, 92});
    NxS[92] = new Table(25, 32, 68, new short[] {-1, 93, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, 68, 68, 93});
    NxS[93] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 94, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[94] = new Table(25, 34, 68, new short[] {-1, 68, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, 68, 68, 68, 68, 95});
    NxS[95] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 68, 96, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[96] = new Table(25, 30, 68, new short[] {-1, 68, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, 97});
    NxS[97] = new Table(24, 30, 68, new short[] {98, -1, 68, 68, -1, -1, 
        -1, -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, -1});
    NxS[98] = new Table(20, 34, 68, new short[] {99, 68, 68, 68, 68, -1, 
        68, 68, -1, -1, -1, -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1});
    NxS[99] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 68, 100, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[100] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 68, 68, 101, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[101] = new Table(25, 34, 68, new short[] {-1, 68, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, 68, 68, 68, 68, 102});
    NxS[102] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 103, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[103] = new Table(25, 29, 68, new short[] {-1, 68, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1});
    NxS[104] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 105, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[105] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 106, 
        68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[106] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 107, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[107] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 68, 68, 108, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[108] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 109, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[109] = new Table(25, 32, 68, new short[] {-1, 110, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, 68, 68, 110});
    NxS[110] = new Table(25, 33, 68, new short[] {-1, 68, 111, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, 68, 68, 68, 111});
    NxS[111] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 112, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[112] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 113, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[113] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 114, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[114] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 68, 68, 115, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[115] = new Table(25, 29, 68, new short[] {-1, 68, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1});
    NxS[116] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 117, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[117] = new Table(1, 34, -1, new short[] {68, 68, 118, 68, 68, 119, 
        120, 68, 68, 68, 68, 121, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 118, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[118] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 235, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[119] = new Table(1, 34, -1, new short[] {68, 68, 165, 68, 68, 68, 
        68, 68, 68, 68, 68, 68, 166, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 165, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[120] = new Table(25, 30, 68, new short[] {-1, 68, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, 155});
    NxS[121] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 122, 
        68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[122] = new Table(25, 32, 68, new short[] {-1, 123, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, 68, 68, 123});
    NxS[123] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 124, 
        68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[124] = new Table(25, 34, 68, new short[] {-1, 68, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, 68, 68, 68, 68, 125});
    NxS[125] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 126, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[126] = new Table(1, 34, -1, new short[] {127, 68, 68, 68, 68, 68, 
        128, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 129, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[127] = new Table(22, 32, 68, new short[] {146, 68, 68, -1, 68, 68, 
        -1, -1, -1, -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1});
    NxS[128] = new Table(25, 30, 68, new short[] {-1, 68, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, 136});
    NxS[129] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 68, 130, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[130] = new Table(25, 32, 68, new short[] {-1, 131, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, 68, 68, 131});
    NxS[131] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 132, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[132] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 133, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[133] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 134, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[134] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 135, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[135] = new Table(25, 29, 68, new short[] {-1, 68, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1});
    NxS[136] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 137, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[137] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 138, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[138] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 68, 139, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[139] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 140, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[140] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 141, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[141] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 142, 
        68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[142] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 143, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[143] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 68, 68, 144, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[144] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 145, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[145] = new Table(25, 29, 68, new short[] {-1, 68, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1});
    NxS[146] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 147, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[147] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 68, 148, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[148] = new Table(25, 30, 68, new short[] {-1, 68, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, 149});
    NxS[149] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 150, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[150] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 151, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[151] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 152, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[152] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 68, 68, 153, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[153] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 154, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[154] = new Table(25, 29, 68, new short[] {-1, 68, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1});
    NxS[155] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 156, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[156] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 157, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[157] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 68, 158, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[158] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 159, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[159] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 160, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[160] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 161, 
        68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[161] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 162, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[162] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 68, 68, 163, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[163] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 164, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[164] = new Table(25, 29, 68, new short[] {-1, 68, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1});
    NxS[165] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 68, 198, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[166] = new Table(25, 30, 68, new short[] {-1, 68, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, 167});
    NxS[167] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 168, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[168] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        169, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[169] = new Table(1, 34, -1, new short[] {170, 68, 68, 68, 68, 68, 
        171, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 172, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[170] = new Table(22, 32, 68, new short[] {189, 68, 68, -1, 68, 68, 
        -1, -1, -1, -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1});
    NxS[171] = new Table(25, 30, 68, new short[] {-1, 68, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, 179});
    NxS[172] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 68, 173, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[173] = new Table(25, 32, 68, new short[] {-1, 174, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, 68, 68, 174});
    NxS[174] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 175, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[175] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 176, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[176] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 177, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[177] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 178, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[178] = new Table(25, 29, 68, new short[] {-1, 68, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1});
    NxS[179] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 180, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[180] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 181, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[181] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 68, 182, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[182] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 183, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[183] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 184, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[184] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 185, 
        68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[185] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 186, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[186] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 68, 68, 187, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[187] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 188, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[188] = new Table(25, 29, 68, new short[] {-1, 68, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1});
    NxS[189] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 190, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[190] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 68, 191, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[191] = new Table(25, 30, 68, new short[] {-1, 68, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, 192});
    NxS[192] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 193, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[193] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 194, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[194] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 195, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[195] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 68, 68, 196, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[196] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 197, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[197] = new Table(25, 29, 68, new short[] {-1, 68, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1});
    NxS[198] = new Table(20, 34, 68, new short[] {199, 68, 68, 68, 68, -1, 
        68, 68, -1, -1, -1, -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1});
    NxS[199] = new Table(25, 30, 68, new short[] {-1, 68, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, 200});
    NxS[200] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 201, 
        68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[201] = new Table(1, 34, -1, new short[] {202, 68, 68, 68, 68, 68, 
        203, 204, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[202] = new Table(22, 32, 68, new short[] {226, 68, 68, -1, 68, 68, 
        -1, -1, -1, -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1});
    NxS[203] = new Table(25, 30, 68, new short[] {-1, 68, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, 216});
    NxS[204] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 68, 68, 205, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[205] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 68, 206, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[206] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 207, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[207] = new Table(25, 32, 68, new short[] {-1, 208, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, 68, 68, 208});
    NxS[208] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 209, 
        68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[209] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 210, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[210] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 211, 
        68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[211] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 68, 212, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[212] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 213, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[213] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 214, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[214] = new Table(20, 34, 68, new short[] {215, 68, 68, 68, 68, -1, 
        68, 68, -1, -1, -1, -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1});
    NxS[215] = new Table(25, 29, 68, new short[] {-1, 68, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1});
    NxS[216] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 217, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[217] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 218, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[218] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 68, 219, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[219] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 220, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[220] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 221, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[221] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 222, 
        68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[222] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 223, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[223] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 68, 68, 224, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[224] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 225, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[225] = new Table(25, 29, 68, new short[] {-1, 68, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1});
    NxS[226] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 227, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[227] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 68, 228, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[228] = new Table(25, 30, 68, new short[] {-1, 68, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, 229});
    NxS[229] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 230, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[230] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 231, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[231] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 232, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[232] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 68, 68, 233, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[233] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 234, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[234] = new Table(25, 29, 68, new short[] {-1, 68, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1});
    NxS[235] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 236, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[236] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 68, 68, 237, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[237] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 238, 
        68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[238] = new Table(25, 32, 68, new short[] {-1, 239, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, 68, 68, 239});
    NxS[239] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 240, 
        68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[240] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 241, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[241] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 68, 68, 242, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[242] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 243, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[243] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 244, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[244] = new Table(25, 29, 68, new short[] {-1, 68, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1});
    NxS[245] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 249, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[246] = new Table(25, 32, 68, new short[] {-1, 247, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, 68, 68, 247});
    NxS[247] = new Table(25, 33, 68, new short[] {-1, 68, 248, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, 68, 68, 68, 248});
    NxS[248] = new Table(25, 29, 68, new short[] {-1, 68, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1});
    NxS[249] = new Table(25, 30, 68, new short[] {-1, 68, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, 250});
    NxS[250] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 68, 251, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[251] = new Table(25, 32, 68, new short[] {-1, 252, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, 68, 68, 252});
    NxS[252] = new Table(25, 33, 68, new short[] {-1, 68, 253, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, 68, 68, 68, 253});
    NxS[253] = new Table(25, 29, 68, new short[] {-1, 68, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1});
    NxS[254] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 68, 262, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[255] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 68, 68, 256, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[256] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 257, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[257] = new Table(25, 30, 68, new short[] {-1, 68, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, 258});
    NxS[258] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 68, 259, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[259] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 260, 
        68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[260] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 68, 68, 68, 68, 261, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[261] = new Table(25, 29, 68, new short[] {-1, 68, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1});
    NxS[262] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 263, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[263] = new Table(25, 30, 68, new short[] {-1, 68, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, 264});
    NxS[264] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 265, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[265] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 266, 
        68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[266] = new Table(25, 32, 68, new short[] {-1, 267, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, 68, 68, 267});
    NxS[267] = new Table(20, 34, 68, new short[] {268, 68, 68, 68, 68, -1, 
        68, 68, -1, -1, -1, -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1});
    NxS[268] = new Table(25, 30, 68, new short[] {-1, 68, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, 269});
    NxS[269] = new Table(25, 29, 68, new short[] {-1, 68, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1});
    NxS[270] = new Table(25, 33, 68, new short[] {-1, 68, 283, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, 68, 68, 68, 283});
    NxS[271] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 68, 277, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[272] = new Table(25, 30, 68, new short[] {-1, 68, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, 273});
    NxS[273] = new Table(25, 32, 68, new short[] {-1, 274, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, 68, 68, 274});
    NxS[274] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 275, 
        68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[275] = new Table(25, 30, 68, new short[] {-1, 68, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, 276});
    NxS[276] = new Table(25, 29, 68, new short[] {-1, 68, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1});
    NxS[277] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 68, 278, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[278] = new Table(25, 30, 68, new short[] {-1, 68, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, 279});
    NxS[279] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 280, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[280] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 281, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[281] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 68, 68, 68, 68, 282, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[282] = new Table(25, 29, 68, new short[] {-1, 68, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1});
    NxS[283] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 284, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[284] = new Table(25, 34, 68, new short[] {-1, 68, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, 68, 68, 68, 68, 285});
    NxS[285] = new Table(25, 33, 68, new short[] {-1, 68, 286, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, 68, 68, 68, 286});
    NxS[286] = new Table(25, 32, 68, new short[] {-1, 287, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, 68, 68, 287});
    NxS[287] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 288, 
        68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[288] = new Table(1, 34, -1, new short[] {289, 68, 68, 68, 68, 68, 
        68, 68, 290, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[289] = new Table(25, 29, 68, new short[] {-1, 68, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1});
    NxS[290] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 68, 68, 291, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[291] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 292, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[292] = new Table(25, 29, 68, new short[] {-1, 68, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1});
    NxS[293] = new Table(25, 32, 68, new short[] {-1, 294, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, 68, 68, 294});
    NxS[294] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 68, 295, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[295] = new Table(25, 29, 68, new short[] {-1, 68, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1});
    NxS[296] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 68, 68, 298, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[297] = new Table(25, 29, 68, new short[] {-1, 68, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1});
    NxS[298] = new Table(25, 33, 68, new short[] {-1, 68, 299, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, 68, 68, 68, 299});
    NxS[299] = new Table(25, 30, 68, new short[] {-1, 68, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, 300});
    NxS[300] = new Table(25, 32, 68, new short[] {-1, 301, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, 68, 68, 301});
    NxS[301] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 302, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[302] = new Table(25, 29, 68, new short[] {-1, 68, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1});
    NxS[303] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        304, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[304] = new Table(25, 30, 68, new short[] {-1, 68, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, 305});
    NxS[305] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 68, 306, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[306] = new Table(25, 29, 68, new short[] {-1, 68, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1});
    NxS[307] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 312, 
        68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[308] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 309, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[309] = new Table(23, 31, 68, new short[] {310, 68, -1, 68, 68, -1, 
        -1, -1, -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, -1, -1});
    NxS[310] = new Table(22, 32, 68, new short[] {311, 68, 68, -1, 68, 68, 
        -1, -1, -1, -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1});
    NxS[311] = new Table(25, 29, 68, new short[] {-1, 68, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1});
    NxS[312] = new Table(25, 34, 68, new short[] {-1, 68, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, 68, 68, 68, 68, 313});
    NxS[313] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 68, 314, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[314] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 315, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[315] = new Table(25, 29, 68, new short[] {-1, 68, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1});
    NxS[316] = new Table(1, 34, -1, new short[] {68, 68, 329, 68, 68, 68, 
        68, 68, 68, 68, 68, 68, 330, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 329, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[317] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 321, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[318] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 319, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[319] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 320, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[320] = new Table(25, 29, 68, new short[] {-1, 68, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1});
    NxS[321] = new Table(25, 30, 68, new short[] {-1, 68, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, 322});
    NxS[322] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 323, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[323] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 324, 
        68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[324] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 325, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[325] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 326, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[326] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 327, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[327] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 328, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[328] = new Table(25, 29, 68, new short[] {-1, 68, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1});
    NxS[329] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 334, 
        68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[330] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 331, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[331] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 332, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[332] = new Table(20, 34, 68, new short[] {333, 68, 68, 68, 68, -1, 
        68, 68, -1, -1, -1, -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1});
    NxS[333] = new Table(25, 29, 68, new short[] {-1, 68, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1});
    NxS[334] = new Table(25, 34, 68, new short[] {-1, 68, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, 68, 68, 68, 68, 335});
    NxS[335] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 336, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[336] = new Table(24, 30, 68, new short[] {337, -1, 68, 68, -1, -1, 
        -1, -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, -1});
    NxS[337] = new Table(20, 34, 68, new short[] {338, 68, 68, 68, 68, -1, 
        68, 68, -1, -1, -1, -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1});
    NxS[338] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 68, 339, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[339] = new Table(25, 32, 68, new short[] {-1, 340, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, 68, 68, 340});
    NxS[340] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 341, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[341] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 342, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[342] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 343, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[343] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 344, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[344] = new Table(25, 29, 68, new short[] {-1, 68, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1});
    NxS[345] = new Table(1, 34, -1, new short[] {68, 68, 350, 68, 68, 68, 
        68, 68, 68, 68, 351, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 350, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[346] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 347, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[347] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 348, 
        68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[348] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 349, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[349] = new Table(25, 29, 68, new short[] {-1, 68, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1});
    NxS[350] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 355, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[351] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 68, 68, 68, 352, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[352] = new Table(25, 30, 68, new short[] {-1, 68, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, 353});
    NxS[353] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 68, 354, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[354] = new Table(0, 1, 354, new short[] {-1});
    NxS[355] = new Table(25, 34, 68, new short[] {-1, 68, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, 68, 68, 68, 68, 356});
    NxS[356] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 68, 357, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[357] = new Table(25, 30, 68, new short[] {-1, 68, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, 358});
    NxS[358] = new Table(25, 29, 68, new short[] {-1, 68, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1});
    NxS[359] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 362, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[360] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 361, 
        68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[361] = new Table(25, 29, 68, new short[] {-1, 68, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1});
    NxS[362] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 68, 68, 68, 363, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[363] = new Table(25, 30, 68, new short[] {-1, 68, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, 364});
    NxS[364] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 68, 365, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[365] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        366, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 367, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[366] = new Table(25, 30, 68, new short[] {-1, 68, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, 372});
    NxS[367] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 368, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[368] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 68, 68, 369, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[369] = new Table(25, 33, 68, new short[] {-1, 68, 370, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, 68, 68, 68, 370});
    NxS[370] = new Table(25, 30, 68, new short[] {-1, 68, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, 371});
    NxS[371] = new Table(25, 29, 68, new short[] {-1, 68, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1});
    NxS[372] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 373, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[373] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 374, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[374] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 375, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[375] = new Table(25, 32, 68, new short[] {-1, 376, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, 68, 68, 376});
    NxS[376] = new Table(25, 33, 68, new short[] {-1, 68, 377, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, 68, 68, 68, 377});
    NxS[377] = new Table(25, 29, 68, new short[] {-1, 68, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1});
    NxS[378] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 379, 
        68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[379] = new Table(25, 30, 68, new short[] {-1, 68, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, 380});
    NxS[380] = new Table(20, 34, 68, new short[] {381, 68, 68, 68, 68, -1, 
        68, 68, -1, -1, -1, -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1});
    NxS[381] = new Table(25, 30, 68, new short[] {-1, 68, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, 382});
    NxS[382] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 68, 383, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[383] = new Table(25, 29, 68, new short[] {-1, 68, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1});
    NxS[384] = new Table(25, 33, 68, new short[] {-1, 68, 390, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, 68, 68, 68, 390});
    NxS[385] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 68, 386, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[386] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 387, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[387] = new Table(25, 32, 68, new short[] {-1, 388, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, 68, 68, 388});
    NxS[388] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 389, 
        68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[389] = new Table(25, 29, 68, new short[] {-1, 68, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1});
    NxS[390] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 391, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[391] = new Table(25, 30, 68, new short[] {-1, 68, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, 392});
    NxS[392] = new Table(25, 29, 68, new short[] {-1, 68, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1});
    NxS[393] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 454, 68, 455, 68, 456, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[394] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 412, 
        68, 68, 68, 68, 68, 68, 68, 68, 68, 413, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[395] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 401, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[396] = new Table(25, 34, 68, new short[] {-1, 68, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, 68, 68, 68, 68, 397});
    NxS[397] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 68, 68, 68, 398, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[398] = new Table(25, 33, 68, new short[] {-1, 68, 399, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, 68, 68, 68, 399});
    NxS[399] = new Table(25, 30, 68, new short[] {-1, 68, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, 400});
    NxS[400] = new Table(25, 29, 68, new short[] {-1, 68, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1});
    NxS[401] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 402, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[402] = new Table(25, 33, 68, new short[] {-1, 68, 403, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, 68, 68, 68, 403});
    NxS[403] = new Table(25, 32, 68, new short[] {-1, 404, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, 68, 68, 404});
    NxS[404] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 68, 68, 68, 68, 405, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[405] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 406, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[406] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 68, 68, 407, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[407] = new Table(25, 33, 68, new short[] {-1, 68, 408, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, 68, 68, 68, 408});
    NxS[408] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        409, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[409] = new Table(25, 30, 68, new short[] {-1, 68, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, 410});
    NxS[410] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 68, 411, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[411] = new Table(25, 29, 68, new short[] {-1, 68, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1});
    NxS[412] = new Table(25, 32, 68, new short[] {-1, 415, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, 414, 68, 415});
    NxS[413] = new Table(25, 29, 68, new short[] {-1, 68, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1});
    NxS[414] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 421, 
        68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[415] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 416, 
        68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[416] = new Table(25, 32, 68, new short[] {-1, 417, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, 68, 68, 417});
    NxS[417] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 68, 68, 68, 418, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[418] = new Table(25, 33, 68, new short[] {-1, 68, 419, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, 68, 68, 68, 419});
    NxS[419] = new Table(25, 30, 68, new short[] {-1, 68, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, 420});
    NxS[420] = new Table(25, 29, 68, new short[] {-1, 68, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1});
    NxS[421] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 422, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[422] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 423, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[423] = new Table(25, 30, 68, new short[] {-1, 68, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, 424});
    NxS[424] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 425, 68, 68, 68, 68, 426, 68, 68, 427, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[425] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 439, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[426] = new Table(25, 34, 68, new short[] {-1, 68, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, 68, 68, 68, 68, 434});
    NxS[427] = new Table(25, 30, 68, new short[] {-1, 68, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, 428});
    NxS[428] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 429, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[429] = new Table(25, 30, 68, new short[] {-1, 68, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, 430});
    NxS[430] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 68, 431, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[431] = new Table(25, 32, 68, new short[] {-1, 432, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, 68, 68, 432});
    NxS[432] = new Table(25, 33, 68, new short[] {-1, 68, 433, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, 68, 68, 68, 433});
    NxS[433] = new Table(25, 29, 68, new short[] {-1, 68, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1});
    NxS[434] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 435, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[435] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 436, 
        68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[436] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 68, 68, 437, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[437] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 438, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[438] = new Table(25, 29, 68, new short[] {-1, 68, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1});
    NxS[439] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 68, 68, 440, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[440] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 68, 441, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[441] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 442, 
        68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[442] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        443, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[443] = new Table(25, 32, 68, new short[] {-1, 444, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, 68, 68, 444});
    NxS[444] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 445, 
        68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[445] = new Table(25, 30, 68, new short[] {-1, 68, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, 446});
    NxS[446] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 447, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[447] = new Table(25, 32, 68, new short[] {-1, 448, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, 68, 68, 448});
    NxS[448] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 449, 
        68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[449] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 450, 
        68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[450] = new Table(25, 30, 68, new short[] {-1, 68, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, 451});
    NxS[451] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 68, 452, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[452] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 453, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[453] = new Table(25, 29, 68, new short[] {-1, 68, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1});
    NxS[454] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 467, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[455] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 465, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[456] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 457, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[457] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 68, 458, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[458] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 459, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[459] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 460, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[460] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 461, 
        68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[461] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 462, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[462] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 68, 68, 463, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[463] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 464, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[464] = new Table(25, 29, 68, new short[] {-1, 68, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1});
    NxS[465] = new Table(25, 30, 68, new short[] {-1, 68, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, 466});
    NxS[466] = new Table(25, 29, 68, new short[] {-1, 68, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1});
    NxS[467] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 468, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[468] = new Table(25, 30, 68, new short[] {-1, 68, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, 469});
    NxS[469] = new Table(25, 29, 68, new short[] {-1, 68, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1});
    NxS[470] = new Table(22, 32, 68, new short[] {501, 68, 68, -1, 68, 68, 
        -1, -1, -1, -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1});
    NxS[471] = new Table(25, 34, 68, new short[] {-1, 68, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, 488, 68, 68, 68, 489});
    NxS[472] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 68, 68, 473, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[473] = new Table(25, 34, 68, new short[] {-1, 68, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, 68, 68, 68, 68, 474});
    NxS[474] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 475, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[475] = new Table(25, 32, 68, new short[] {-1, 476, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, 68, 68, 476});
    NxS[476] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 477, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[477] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        478, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[478] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 479, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[479] = new Table(25, 30, 68, new short[] {-1, 68, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, 480});
    NxS[480] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 481, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[481] = new Table(25, 32, 68, new short[] {-1, 482, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, 68, 68, 482});
    NxS[482] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 68, 483, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[483] = new Table(25, 32, 68, new short[] {-1, 484, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, 68, 68, 484});
    NxS[484] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 485, 
        68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[485] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 68, 68, 486, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[486] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 68, 487, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[487] = new Table(25, 29, 68, new short[] {-1, 68, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1});
    NxS[488] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 491, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[489] = new Table(25, 30, 68, new short[] {-1, 68, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, 490});
    NxS[490] = new Table(25, 29, 68, new short[] {-1, 68, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1});
    NxS[491] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        492, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[492] = new Table(24, 30, 68, new short[] {493, -1, 68, 68, -1, -1, 
        -1, -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, -1});
    NxS[493] = new Table(20, 34, 68, new short[] {494, 68, 68, 68, 68, -1, 
        68, 68, -1, -1, -1, -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1});
    NxS[494] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 68, 495, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[495] = new Table(25, 32, 68, new short[] {-1, 496, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, 68, 68, 496});
    NxS[496] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 497, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[497] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 498, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[498] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 499, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[499] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 500, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[500] = new Table(25, 29, 68, new short[] {-1, 68, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1});
    NxS[501] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 502, 
        68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[502] = new Table(25, 29, 68, new short[] {-1, 68, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1});
    NxS[503] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 68, 510, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[504] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 505, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[505] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 506, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[506] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 68, 
        68, 68, 68, 68, 68, 68, 68, 68, 507, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[507] = new Table(25, 33, 68, new short[] {-1, 68, 508, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, 68, 68, 68, 508});
    NxS[508] = new Table(25, 30, 68, new short[] {-1, 68, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, 509});
    NxS[509] = new Table(25, 29, 68, new short[] {-1, 68, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1});
    NxS[510] = new Table(25, 29, 68, new short[] {-1, 68, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1});
    NxS[511] = new Table(25, 32, 68, new short[] {-1, 512, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, 68, 68, 512});
    NxS[512] = new Table(25, 33, 68, new short[] {-1, 68, 513, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, 68, 68, 68, 513});
    NxS[513] = new Table(25, 34, 68, new short[] {-1, 68, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, 68, 68, 68, 68, 514});
    NxS[514] = new Table(25, 32, 68, new short[] {-1, 515, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, 68, 68, 515});
    NxS[515] = new Table(1, 34, -1, new short[] {68, 68, 68, 68, 68, 516, 
        68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 
        68, 68, -1, 68, 68, -1, -1, -1, -1, 68, 68, 68});
    NxS[516] = new Table(25, 30, 68, new short[] {-1, 68, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1, 517});
    NxS[517] = new Table(25, 29, 68, new short[] {-1, 68, 68, -1, -1, -1, 
        -1, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
        -1, -1, -1, -1, -1, -1, -1});
    NxS[518] = new Table(25, 19, 519, new short[] {520, 519, 519, 519, 519, 519, 
        519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 521});
    NxS[519] = new Table(25, 19, 519, new short[] {-1, 519, 519, 519, 519, 519, 
        519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 521});
    NxS[520] = new Table(0, 0, -1, null);
    NxS[521] = new Table(43, 2, -1, new short[] {521, 522});
    NxS[522] = new Table(0, 0, -1, null);
    NxS[523] = new Table(6, 51, 5, new short[] {6, 7, 8, 9, 10, 11, 
        12, 13, 14, 15, 16, 17, 5, 18, 19, 5, 5, 20, 5, 21, 22, 23, 
        24, 25, 26, 27, 5, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 
        39, 40, 41, 42, 43, 44, 45, 46, 47, 1, 2, 3, 4});
    NxS[524] = new Table(25, 27, 524, new short[] {-1, 524, 524, 524, 524, 524, 
        524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 524, 
        524, 524, 524, 524, 48});
    NxS[525] = new Table(25, 19, 525, new short[] {55, 525, 525, 525, 525, 525, 
        525, 525, 525, 525, 525, 525, 525, 525, 525, 525, 525, 525, -1});
    NxS[526] = new Table(43, 2, -1, new short[] {526, 58});
    NxS[527] = new Table(25, 19, 527, new short[] {59, 527, 527, 527, 527, 527, 
        527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, 527, -1});
    NxS[528] = new Table(33, 10, -1, new short[] {60, -1, 528, -1, -1, -1, 
        -1, -1, -1, 528});
    NxS[529] = new Table(33, 1, -1, new short[] {61});
    NxS[530] = new Table(33, 10, -1, new short[] {61, -1, 530, -1, -1, -1, 
        -1, -1, -1, 530});
    }

int NextState(int qStat) {
    if (chr == ScanBuff.EOF)
        return (qStat <= maxAccept && qStat != currentStart ? currentStart : eofNum);
    else {
        int rslt;
        int idx = Map(chr) - NxS[qStat].min;
        if (idx < 0) idx += 53;
        if ((uint)idx >= (uint)NxS[qStat].rng) rslt = NxS[qStat].dflt;
        else rslt = NxS[qStat].nxt[idx];
        return (rslt == goStart ? currentStart : rslt);
    }
}

int NextState() {
    if (chr == ScanBuff.EOF)
        return (state <= maxAccept && state != currentStart ? currentStart : eofNum);
    else {
        int rslt;
        int idx = Map(chr) - NxS[state].min;
        if (idx < 0) idx += 53;
        if ((uint)idx >= (uint)NxS[state].rng) rslt = NxS[state].dflt;
        else rslt = NxS[state].nxt[idx];
        return (rslt == goStart ? currentStart : rslt);
    }
}
#endregion


#if BACKUP
        // ====================== Nested class ==========================

        internal class Context // class used for automaton backup.
        {
            public int bPos;
            public int cNum;
            public int state;
            public int cChr;
        }
#endif // BACKUP


        // ====================== Nested class ==========================

        public sealed class StringBuff : ScanBuff
        {
            string str;        // input buffer
            int bPos;          // current position in buffer
            int sLen;

            public StringBuff(string str)
            {
                this.str = str;
                this.sLen = str.Length;
            }

            public override int Read()
            {
                if (bPos < sLen) return str[bPos++];
                else if (bPos == sLen) { bPos++; return '\n'; }   // one strike, see newline
                else return EOF;                                  // two strikes and you're out!
            }
            
            public override int ReadPos { get { return bPos - 1; } }

            public override int Peek()
            {
                if (bPos < sLen) return str[bPos];
                else return '\n';
            }

            public override string GetString(int beg, int end)
            {
                //  "end" can be greater than sLen with the BABEL
                //  option set.  Read returns a "virtual" EOL if
                //  an attempt is made to read past the end of the
                //  string buffer.  Without the guard any attempt 
                //  to fetch yytext for a token that includes the 
                //  EOL will throw an index exception.
                if (end > sLen) end = sLen;
                if (end <= beg) return ""; 
                else return str.Substring(beg, end - beg);
            }

            public override int Pos
            {
                get { return bPos; }
                set { bPos = value; }
            }
        }

        // ====================== Nested class ==========================

        public sealed class StreamBuff : ScanBuff
        {
            BufferedStream bStrm;   // input buffer
            int delta = 1;

            public StreamBuff(Stream str) { this.bStrm = new BufferedStream(str); }

            public override int Read() {
                return bStrm.ReadByte(); 
            }
            
            public override int ReadPos {
                get { return (int)bStrm.Position - delta; }
            }

            public override int Peek()
            {
                int rslt = bStrm.ReadByte();
                bStrm.Seek(-delta, SeekOrigin.Current);
                return rslt;
            }

            public override string GetString(int beg, int end)
            {
                if (end - beg <= 0) return "";
                long savePos = bStrm.Position;
                char[] arr = new char[end - beg];
                bStrm.Position = (long)beg;
                for (int i = 0; i < (end - beg); i++)
                    arr[i] = (char)bStrm.ReadByte();
                bStrm.Position = savePos;
                return new String(arr);
            }

            // Pos is the position *after* reading chr!
            public override int Pos
            {
                get { return (int)bStrm.Position; }
                set { bStrm.Position = value; }
            }
        }

        // ====================== Nested class ==========================

        /// <summary>
        /// This is the Buffer for UTF8 files.
        /// It attempts to read the encoding preamble, which for 
        /// this encoding should be unicode point \uFEFF which is 
        /// encoded as EF BB BF
        /// </summary>
        public class TextBuff : ScanBuff
        {
            protected BufferedStream bStrm;   // input buffer
            protected int delta = 1;
            
            private Exception BadUTF8()
            { return new Exception(String.Format("BadUTF8 Character")); }

            /// <summary>
            /// TextBuff factory.  Reads the file preamble
            /// and returns a TextBuff, LittleEndTextBuff or
            /// BigEndTextBuff according to the result.
            /// </summary>
            /// <param name="strm">The underlying stream</param>
            /// <returns></returns>
            public static TextBuff NewTextBuff(Stream strm)
            {
                // First check if this is a UTF16 file
                //
                int b0 = strm.ReadByte();
                int b1 = strm.ReadByte();

                if (b0 == 0xfe && b1 == 0xff)
                    return new BigEndTextBuff(strm);
                if (b0 == 0xff && b1 == 0xfe)
                    return new LittleEndTextBuff(strm);
                
                int b2 = strm.ReadByte();
                if (b0 == 0xef && b1 == 0xbb && b2 == 0xbf)
                    return new TextBuff(strm);
                //
                // There is no unicode preamble, so we
                // must go back to the UTF8 default.
                //
                strm.Seek(0, SeekOrigin.Begin);
                return new TextBuff(strm);
            }

            protected TextBuff(Stream str) { 
                this.bStrm = new BufferedStream(str);
            }

            public override int Read()
            {
                int ch0 = bStrm.ReadByte();
                int ch1;
                int ch2;
                if (ch0 < 0x7f)
                {
                    delta = (ch0 == EOF ? 0 : 1);
                    return ch0;
                }
                else if ((ch0 & 0xe0) == 0xc0)
                {
                    delta = 2;
                    ch1 = bStrm.ReadByte();
                    if ((ch1 & 0xc0) == 0x80)
                        return ((ch0 & 0x1f) << 6) + (ch1 & 0x3f);
                    else
                        throw BadUTF8();
                }
                else if ((ch0 & 0xf0) == 0xe0)
                {
                    delta = 3;
                    ch1 = bStrm.ReadByte();
                    ch2 = bStrm.ReadByte();
                    if ((ch1 & ch2 & 0xc0) == 0x80)
                        return ((ch0 & 0xf) << 12) + ((ch1 & 0x3f) << 6) + (ch2 & 0x3f);
                    else
                        throw BadUTF8();
                }
                else
                    throw BadUTF8();
            }

            public sealed override int ReadPos
            {
                get { return (int)bStrm.Position - delta; }
            }

            public sealed override int Peek()
            {
                int rslt = Read();
                bStrm.Seek(-delta, SeekOrigin.Current);
                return rslt;
            }

            /// <summary>
            /// Returns the string from the buffer between
            /// the given file positions.  This needs to be
            /// done carefully, as the number of characters
            /// is, in general, not equal to (end - beg).
            /// </summary>
            /// <param name="beg">Begin filepos</param>
            /// <param name="end">End filepos</param>
            /// <returns></returns>
            public sealed override string GetString(int beg, int end)
            {
                int i;
                if (end - beg <= 0) return "";
                long savePos = bStrm.Position;
                char[] arr = new char[end - beg];
                bStrm.Position = (long)beg;
                for (i = 0; bStrm.Position < end; i++)
                    arr[i] = (char)Read();
                bStrm.Position = savePos;
                return new String(arr, 0, i);
            }

            // Pos is the position *after* reading chr!
            public sealed override int Pos
            {
                get { return (int)bStrm.Position; }
                set { bStrm.Position = value; }
            }
        }

        // ====================== Nested class ==========================
        /// <summary>
        /// This is the Buffer for Big-endian UTF16 files.
        /// </summary>
        public sealed class BigEndTextBuff : TextBuff
        {
            internal BigEndTextBuff(Stream str) : base(str) { } // 

            public override int Read()
            {
                int ch0 = bStrm.ReadByte();
                int ch1 = bStrm.ReadByte();
                return (ch0 << 8) + ch1;
            }
        }
        
        // ====================== Nested class ==========================
        /// <summary>
        /// This is the Buffer for Little-endian UTF16 files.
        /// </summary>
        public sealed class LittleEndTextBuff : TextBuff
        {
            internal LittleEndTextBuff(Stream str) : base(str) { } // { this.bStrm = new BufferedStream(str); }

            public override int Read()
            {
                int ch0 = bStrm.ReadByte();
                int ch1 = bStrm.ReadByte();
                return (ch1 << 8) + ch0;
            }
        }
        
        // =================== End Nested classes =======================

        public Scanner(Stream file) {
            buffer = TextBuff.NewTextBuff(file); // selected by /unicode option
            this.cNum = -1;
            this.chr = '\n'; // to initialize yyline, yycol and lineStart
            GetChr();
        }

        public Scanner() { }

        void GetChr()
        {
            if (chr == '\n') 
            { 
                lineStartNum = cNum + 1; 
                lNum++; 
            }
            chr = buffer.Read();
            cNum++;
        }

        void MarkToken()
        {
            tokPos = buffer.ReadPos;
            tokNum = cNum;
            tokLin = lNum;
            tokCol = cNum - lineStartNum;
        }
        
        void MarkEnd()
        {
            tokTxt = null;
            tokLen = cNum - tokNum;
            tokEPos = buffer.ReadPos;
            tokELin = lNum;
            tokECol = cNum - lineStartNum;
        }
 
        // ================ StringBuffer Initialization ===================

        public void SetSource(string source, int offset)
        {
            this.buffer = new StringBuff(source);
            this.buffer.Pos = offset;
            this.cNum = offset - 1;
            this.chr = '\n'; // to initialize yyline, yycol and lineStart
            GetChr();
        }
        
        public int GetNext(ref int state, out int start, out int end)
        {
            Tokens next;
            EolState = state;
            next = (Tokens)Scan();
            state = EolState;
            start = tokPos;
            end = tokEPos - 1; // end is the index of last char.
            return (int)next;
        }

        // ======== IScanner<> Implementation =========

        public override int yylex()
        {
            // parserMax is set by reflecting on the Tokens
            // enumeration.  If maxParseTokeen is defined
            // that is used, otherwise int.MaxValue is used.
            //
            int next;
            do { next = Scan(); } while (next >= parserMax);
            return next;
        }
        
        int yyleng { get { return tokLen; } }
        int yypos { get { return tokPos; } }
        int yyline { get { return tokLin; } }
        int yycol { get { return tokCol; } }

        public string yytext
        {
            get 
            {
                if (tokTxt == null) 
                    tokTxt = buffer.GetString(tokPos, tokEPos);
                return tokTxt;
            }
        }

        void yyless(int n) { 
            buffer.Pos = tokPos;
            cNum = tokNum;
            for (int i = 0; i <= n; i++) GetChr();
            MarkEnd();
        }

        public IErrorHandler Handler { get { return this.handler; }
                                       set { this.handler = value; }}

        // ============ methods available in actions ==============

        internal int YY_START {
            get { return CurrentSc; }
            set { CurrentSc = value; } 
        }

        // ============== The main tokenizer code =================

        int Scan()
        {
            try {
                for (; ; )
                {
                    int next;              // next state to enter                   
#if BACKUP
                    bool inAccept = false; // inAccept ==> current state is an accept state
                    Result rslt = Result.noMatch;
                    // skip "idle" transitions
#if LEFTANCHORS
                    if (lineStartNum == cNum && NextState(anchorState[CurrentSc]) != currentStart)
                        state = anchorState[CurrentSc];
                    else {
                        state = currentStart;
                        while (NextState() == state) {
                            GetChr();
                            if (lineStartNum == cNum) {
                                int anchor = anchorState[CurrentSc];
                                if (NextState(anchor) != state) {
                                    state = anchor; 
                                    break;
                                }
                            }
                        }
                    }
#else // !LEFTANCHORS
                    state = currentStart;
                    while (NextState() == state) 
                        GetChr(); // skip "idle" transitions
#endif // LEFTANCHORS
                    MarkToken();
                    
                    while ((next = NextState()) != currentStart)
                        if (inAccept && next > maxAccept) // need to prepare backup data
                        {
                            Context ctx = new Context();
                            rslt = Recurse2(ctx, next);
                            if (rslt == Result.noMatch) RestoreStateAndPos(ctx);
                            // else if (rslt == Result.contextFound) RestorePos(ctx);
                            break;
                        }
                        else
                        {
                            state = next;
                            GetChr();
                            if (state <= maxAccept) inAccept = true;
                        }
#else // !BACKUP
#if LEFTANCHORS
                    if (lineStartNum == cNum) {
                        int anchor = anchorState[CurrentSc];
                        if (NextState(anchor) != currentStart)
                            state = anchor;
                    }
                    else {
                        state = currentStart;
                        while (NextState() == state) {
                            GetChr();
                            if (lineStartNum == cNum) {
                                anchor = anchorState[CurrentSc];
                                if (NextState(anchor) != state) {
                                    state = anchor;
                                    break;
                                }
                            }
                        }
                    }
#else // !LEFTANCHORS
                    state = currentStart;
                    while (NextState() == state) 
                        GetChr(); // skip "idle" transitions
#endif // LEFTANCHORS
                    MarkToken();
                    // common code
                    while ((next = NextState()) != currentStart)
                    {
                        state = next;
                        GetChr();
                    }
#endif // BACKUP
                    if (state > maxAccept) 
                        state = currentStart;
                    else
                    {
                        MarkEnd();
#region ActionSwitch
#pragma warning disable 162
    switch (state)
    {
        case eofNum:
            return (int)Tokens.EOF;
        case 1:
return (int)';';
            break;
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        case 13:
        case 14:
        case 15:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 22:
        case 23:
        case 68:
        case 69:
        case 70:
        case 75:
        case 76:
        case 77:
        case 78:
        case 79:
        case 81:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122:
        case 123:
        case 124:
        case 125:
        case 126:
        case 127:
        case 128:
        case 129:
        case 130:
        case 131:
        case 132:
        case 133:
        case 134:
        case 136:
        case 137:
        case 138:
        case 139:
        case 140:
        case 141:
        case 142:
        case 143:
        case 144:
        case 146:
        case 147:
        case 148:
        case 149:
        case 150:
        case 151:
        case 152:
        case 153:
        case 155:
        case 156:
        case 157:
        case 158:
        case 159:
        case 160:
        case 161:
        case 162:
        case 163:
        case 165:
        case 166:
        case 167:
        case 168:
        case 169:
        case 170:
        case 171:
        case 172:
        case 173:
        case 174:
        case 175:
        case 176:
        case 177:
        case 179:
        case 180:
        case 181:
        case 182:
        case 183:
        case 184:
        case 185:
        case 186:
        case 187:
        case 189:
        case 190:
        case 191:
        case 192:
        case 193:
        case 194:
        case 195:
        case 196:
        case 198:
        case 199:
        case 200:
        case 201:
        case 202:
        case 203:
        case 204:
        case 205:
        case 206:
        case 207:
        case 208:
        case 209:
        case 210:
        case 211:
        case 212:
        case 213:
        case 214:
        case 216:
        case 217:
        case 218:
        case 219:
        case 220:
        case 221:
        case 222:
        case 223:
        case 224:
        case 226:
        case 227:
        case 228:
        case 229:
        case 230:
        case 231:
        case 232:
        case 233:
        case 235:
        case 236:
        case 237:
        case 238:
        case 239:
        case 240:
        case 241:
        case 242:
        case 243:
        case 247:
        case 249:
        case 250:
        case 251:
        case 252:
        case 256:
        case 257:
        case 258:
        case 259:
        case 260:
        case 262:
        case 263:
        case 264:
        case 265:
        case 266:
        case 267:
        case 268:
        case 273:
        case 274:
        case 275:
        case 277:
        case 278:
        case 279:
        case 280:
        case 281:
        case 283:
        case 284:
        case 285:
        case 286:
        case 287:
        case 288:
        case 290:
        case 291:
        case 294:
        case 298:
        case 299:
        case 300:
        case 301:
        case 304:
        case 305:
        case 309:
        case 310:
        case 312:
        case 313:
        case 314:
        case 319:
        case 321:
        case 322:
        case 323:
        case 324:
        case 325:
        case 326:
        case 327:
        case 329:
        case 330:
        case 331:
        case 332:
        case 334:
        case 335:
        case 337:
        case 338:
        case 339:
        case 340:
        case 341:
        case 342:
        case 343:
        case 347:
        case 348:
        case 350:
        case 351:
        case 352:
        case 353:
        case 355:
        case 356:
        case 357:
        case 362:
        case 363:
        case 364:
        case 365:
        case 366:
        case 367:
        case 368:
        case 369:
        case 370:
        case 372:
        case 373:
        case 374:
        case 375:
        case 376:
        case 379:
        case 380:
        case 381:
        case 382:
        case 386:
        case 387:
        case 388:
        case 390:
        case 391:
        case 397:
        case 398:
        case 399:
        case 401:
        case 402:
        case 403:
        case 404:
        case 405:
        case 406:
        case 407:
        case 408:
        case 409:
        case 410:
        case 412:
        case 414:
        case 415:
        case 416:
        case 417:
        case 418:
        case 419:
        case 421:
        case 422:
        case 423:
        case 425:
        case 426:
        case 427:
        case 428:
        case 429:
        case 430:
        case 431:
        case 432:
        case 434:
        case 435:
        case 436:
        case 437:
        case 439:
        case 440:
        case 441:
        case 442:
        case 443:
        case 444:
        case 445:
        case 446:
        case 447:
        case 448:
        case 449:
        case 450:
        case 451:
        case 452:
        case 454:
        case 455:
        case 456:
        case 458:
        case 459:
        case 460:
        case 461:
        case 462:
        case 463:
        case 465:
        case 467:
        case 468:
        case 473:
        case 474:
        case 475:
        case 476:
        case 477:
        case 478:
        case 479:
        case 480:
        case 481:
        case 482:
        case 483:
        case 484:
        case 485:
        case 486:
        case 488:
        case 489:
        case 491:
        case 493:
        case 494:
        case 495:
        case 496:
        case 497:
        case 498:
        case 499:
        case 501:
        case 505:
        case 506:
        case 507:
        case 508:
        case 512:
        case 513:
        case 514:
        case 515:
        case 516:
return GetIdToken(yytext);
            break;
        case 21:
return (int)Tokens.LEX_WHITE;
            break;
        case 24:
return (int) Tokens.LEFTSQUAREBRACKET;
            break;
        case 25:
        case 26:
        case 46:
yyerror("illegal char");
                             return (int)Tokens.LEX_ERROR;
            break;
        case 27:
return (int) Tokens.RIGHTSQUAREBRACKET;
            break;
        case 28:
        case 61:
return (int)Tokens.NUMBER;
            break;
        case 29:
return (int)'.';
            break;
        case 30:
return (int)'-';
            break;
        case 31:
return (int)',';
            break;
        case 32:
return (int)'(';
            break;
        case 33:
return (int)')';
            break;
        case 34:
return (int)'{';
            break;
        case 35:
return (int)'}';
            break;
        case 36:
return (int) Tokens.POW;
            break;
        case 37:
return (int)'+';
            break;
        case 38:
return (int)'*';
            break;
        case 39:
return (int)'/';
            break;
        case 40:
return (int)'!';
            break;
        case 41:
return (int)Tokens.EQ;
            break;
        case 42:
return (int)Tokens.LT;
            break;
        case 43:
return (int)Tokens.GT;
            break;
        case 44:
return (int)'&';
            break;
        case 45:
return (int)'|';
            break;
        case 47:
return (int)Tokens.LEX_WHITE;
            break;
        case 48:
return (int)Tokens.STRING;
            break;
        case 49:
return (int)Tokens.BARBAR;
            break;
        case 50:
return (int)Tokens.AMPAMP;
            break;
        case 51:
return (int)Tokens.GTE;
            break;
        case 52:
return (int)Tokens.LTE;
            break;
        case 53:
return (int)Tokens.NEQ;
            break;
        case 54:
        case 56:
BEGIN(COMMENT); return (int)Tokens.LEX_COMMENT;
            break;
        case 55:
return (int)Tokens.LEX_COMMENT;
            break;
        case 57:
return (int)Tokens.LEX_COMMENT;
            break;
        case 58:
return (int)Tokens.LEX_COMMENT;
            break;
        case 59:
return (int)Tokens.LEX_COMMENT;
            break;
        case 60:
return (int)Tokens.NUMBER;
            break;
        case 62:
return (int)Tokens.PARTIALTABLENAME;
            break;
        case 63:
return (int)Tokens.ESCAPEDTABLENAME;
            break;
        case 64:
return (int)Tokens.PARTIALCOLUMNNAME;
            break;
        case 65:
return (int)Tokens.COLUMNNAME;
            break;
        case 66:
        case 67:
        case 72:
        case 74:
        case 116:
        case 245:
        case 246:
        case 254:
        case 255:
        case 270:
        case 271:
        case 272:
        case 293:
        case 296:
        case 303:
        case 307:
        case 308:
        case 316:
        case 317:
        case 318:
        case 345:
        case 346:
        case 359:
        case 360:
        case 378:
        case 384:
        case 385:
        case 393:
        case 394:
        case 395:
        case 396:
        case 470:
        case 471:
        case 472:
        case 503:
        case 504:
        case 511:
return GetIdToken(yytext);
            break;
        case 71:
return (int)Tokens.KWALTER;
            break;
        case 73:
return (int)Tokens.KWAS;
            break;
        case 80:
return (int)Tokens.KWACCURACY;
            break;
        case 82:
return (int)Tokens.KWASC;
            break;
        case 103:
return (int)Tokens.KWASSOCIATED_MEASURE_GROUP;
            break;
        case 115:
return (int)Tokens.KWADDITIONALINFO;
            break;
        case 117:
return (int)Tokens.KWKPI;
            break;
        case 135:
return (int)Tokens.KWKPISTATUSGRAPHIC;
            break;
        case 145:
return (int)Tokens.KWKPISTATUSDESCRIPTION;
            break;
        case 154:
return (int)Tokens.KWKPISTATUSEXPRESSION;
            break;
        case 164:
return (int)Tokens.KWKPIDESCRIPTION;
            break;
        case 178:
return (int)Tokens.KWKPITRENDGRAPHIC;
            break;
        case 188:
return (int)Tokens.KWKPITRENDDESCRIPTION;
            break;
        case 197:
return (int)Tokens.KWKPITRENDEXPRESSION;
            break;
        case 215:
return (int)Tokens.KWKPITARGETFORMATSTRING;
            break;
        case 225:
return (int)Tokens.KWKPITARGETDESCRIPTION;
            break;
        case 234:
return (int)Tokens.KWKPITARGETEXPRESSION;
            break;
        case 244:
return (int)Tokens.KWKPIANNOTATIONS;
            break;
        case 248:
return (int)Tokens.KWGOAL;
            break;
        case 253:
return (int)Tokens.KWGENERAL;
            break;
        case 261:
return (int)Tokens.KWPROPERTY;
            break;
        case 269:
return (int)Tokens.KWPERCENTAGE;
            break;
        case 276:
return (int)Tokens.KWCREATE;
            break;
        case 282:
return (int)Tokens.KWCURRENCY;
            break;
        case 289:
return (int)Tokens.KWCALCULATE;
            break;
        case 292:
return (int)Tokens.KWCALCULATION;
            break;
        case 295:
return (int)Tokens.KWYEAR;
            break;
        case 297:
return (int)Tokens.KWBY;
            break;
        case 302:
return (int)Tokens.KWBOOLEAN;
            break;
        case 306:
return (int)Tokens.KWORDER;
            break;
        case 311:
return (int)Tokens.KWRANKX;
            break;
        case 315:
return (int)Tokens.KWRETURN;
            break;
        case 320:
return (int)Tokens.KWSKIP;
            break;
        case 328:
return (int)Tokens.KWSCIENTIFIC;
            break;
        case 333:
return (int)Tokens.KWSTRING;
            break;
        case 336:
return (int)Tokens.KWSTATUS;
            break;
        case 344:
return (int)Tokens.KWSTATUS_GRAPHIC;
            break;
        case 349:
return (int)Tokens.KWMONTH;
            break;
        case 354:
return (int)Tokens.MDXCODE;
            break;
        case 358:
return (int)Tokens.KWMEASURE;
            break;
        case 361:
return (int)Tokens.KWNOT;
            break;
        case 371:
return (int)Tokens.KWNUMBERWHOLE;
            break;
        case 377:
return (int)Tokens.KWNUMBERDECIMAL;
            break;
        case 383:
return (int)Tokens.KWINTEGER;
            break;
        case 389:
return (int)Tokens.KWFORMAT;
            break;
        case 392:
return (int)Tokens.KWFALSE;
            break;
        case 400:
return (int)Tokens.KWDOUBLE;
            break;
        case 411:
return (int)Tokens.KWDISPLAYFOLDER;
            break;
        case 413:
return (int)Tokens.KWDAY;
            break;
        case 420:
return (int)Tokens.KWDATATABLE;
            break;
        case 424:
return (int)Tokens.KWDATETIME;
            break;
        case 433:
return (int)Tokens.KWDATETIMEGENERAL;
            break;
        case 438:
return (int)Tokens.KWDATETIMECUSTOM;
            break;
        case 453:
return (int)Tokens.KWDATETIMESHORTDATEPATTERN;
            break;
        case 457:
return (int)Tokens.KWDESC;
            break;
        case 464:
return (int)Tokens.KWDESCRIPTION;
            break;
        case 466:
return (int)Tokens.KWDENSE;
            break;
        case 469:
return (int)Tokens.KWDEFINE;
            break;
        case 487:
return (int)Tokens.KWTHOUSANDSEPARATOR;
            break;
        case 490:
return (int)Tokens.KWTRUE;
            break;
        case 492:
return (int)Tokens.KWTREND;
            break;
        case 500:
return (int)Tokens.KWTREND_GRAPHIC;
            break;
        case 502:
return (int)Tokens.KWTEXT;
            break;
        case 509:
return (int)Tokens.KWVISIBLE;
            break;
        case 510:
return (int)Tokens.KWVAR;
            break;
        case 517:
return (int)Tokens.KWEVALUATE;
            break;
        case 518:
        case 519:
        case 520:
        case 521:
return (int)Tokens.LEX_COMMENT;
            break;
        case 522:
BEGIN(INITIAL); return (int)Tokens.LEX_COMMENT;
            break;
        default:
            break;
    }
#pragma warning restore 162
#endregion
                    }
                }
            } // end try
            finally {
LoadYylval();
            } // end finally
        }

#if BACKUP
        Result Recurse2(Context ctx, int next)
        {
            // Assert: at entry "state" is an accept state AND
            //         NextState(state, chr) != currentStart AND
            //         NextState(state, chr) is not an accept state.
            //
            bool inAccept;
            SaveStateAndPos(ctx);
            state = next;
            if (state == eofNum) return Result.accept;
            GetChr();
            inAccept = false;

            while ((next = NextState()) != currentStart)
            {
                if (inAccept && next > maxAccept) // need to prepare backup data
                    SaveStateAndPos(ctx);
                state = next;
                if (state == eofNum) return Result.accept;
                GetChr(); 
                inAccept = (state <= maxAccept);
            }
            if (inAccept) return Result.accept; else return Result.noMatch;
        }

        void SaveStateAndPos(Context ctx)
        {
            ctx.bPos  = buffer.Pos;
            ctx.cNum  = cNum;
            ctx.state = state;
            ctx.cChr = chr;
        }

        void RestoreStateAndPos(Context ctx)
        {
            buffer.Pos = ctx.bPos;
            cNum = ctx.cNum;
            state = ctx.state;
            chr = ctx.cChr;
        }

        void RestorePos(Context ctx) { buffer.Pos = ctx.bPos; cNum = ctx.cNum; }
#endif // BACKUP

        // ============= End of the tokenizer code ================

        internal void BEGIN(int next)
        { CurrentSc = next; }

#if STACK        
        internal void yy_clear_stack() { scStack.Clear(); }
        internal int yy_top_state() { return scStack.Peek(); }
        
        internal void yy_push_state(int state)
        {
            scStack.Push(CurrentSc);
            CurrentSc = state;
        }
        
        internal void yy_pop_state()
        {
            // Protect against input errors that pop too far ...
            if (scStack.Count > 0) {
				int newSc = scStack.Pop();
				CurrentSc = newSc;
            } // Otherwise leave stack unchanged.
        }
 #endif // STACK

        internal void ECHO() { Console.Out.Write(yytext); }
        
#region UserCodeSection

/* .... */

#endregion
    } // end class Scanner
} // end namespace
